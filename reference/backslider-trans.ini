;-------------------------------------------------------------------------------
#unset enablehardware_test

[MegaTune]
   MTversion      = 2.25

   queryCommand   = "Q"
   signature      = "backslider transmission 202501-dev"
   versionInfo    = "S" ;This info is what is displayed to user

[TunerStudio]
   iniSpecVersion = 3.64

;-------------------------------------------------------------------------------

[SettingGroups]
   ; the referenceName will over-ride previous, so if you are creating a
   ; settingGroup with a reference name of lambdaSensor, it will replace the
   ; setting group defined in the settingGroups.xml of the TunerStudio config
   ; folder. If is is an undefined referenceName, it will be added.
   ; keyword    =  referenceName,  DisplayName

    ;settingGroup = boostUnits, "Boost table units"
    ;settingOption = DEFAULT, "kPa"
    ;settingOption = BOOSTPSI, "PSI"

    settingGroup = pressure_units, "Pressure Display"
    settingOption = DEFAULT, "PSI"
    settingOption = pressure_bar, "BAR"

    settingGroup = enablehardware_test, "Enable Hardware Test Page"

    ;settingGroup = resetcontrol_group, "Reset Control Features"
    ;settingOption = resetcontrol_standard, "Basic Options Only"
    ;settingOption = resetcontrol_adv, "Advanced Features (16u2 Firmware Update Required)"

    settingGroup  = mcu, "Controller in use"
    ;settingOption = DEFAULT, "Arduino Mega 2560"
    settingOption = mcu_teensy, "Teensy"
    ;settingOption = mcu_stm32, "STM32"

    ;settingGroup = COMMS_COMPAT_GROUP, "Serial Mode"
    ;settingOption = COMMS_COMPAT, "Compatibility Mode"
    ;settingOption = DEFAULT, "Normal"

    ;settingGroup = COMMS_MSDROID_COMPAT, "msDroid Compatibility-ONLY enable on Android"
    ;settingOption = MSDROID_COMPAT, "Enable"
    ;settingOption = DEFAULT, "Disable"

[PcVariables]
   ; valid types: boolean, double, int, list
   ;
   ; no offset as they are local variables.
   ; entry format the same as Constants, except there is no offset.
   ; arrays are not yet supported.
   ; name = class,  type,    shape,  units,       scale, translate,    lo,      hi, digits
   ; name = type, min, max;
   ;
   ; type List: value will be index.
    tsCanId          = bits,     U08,   [0:3], "CAN ID 0", "CAN ID 1", "CAN ID 2", "CAN ID 3", "CAN ID 4", "CAN ID 5", "CAN ID 6", "CAN ID 7", "CAN ID 8", "CAN ID 9", "CAN ID 10","CAN ID 11","CAN ID 12","CAN ID 13","CAN ID 14","INVALID"
    rpmhigh = scalar,   U16,    "rpm", 1, 0, 0, 30000, 0
    rpmwarn = scalar,   U16,    "rpm", 1, 0, 0, 30000, 0
    rpmdang = scalar,   U16,    "rpm", 1, 0, 0, 30000, 0
    maphigh = scalar,   U16,    "kPa", 1, 0, 0, 30000, 0
    mapwarn = scalar,   U16,    "kPa", 1, 0, 0, 30000, 0
    mapdang = scalar,   U16,    "kPa", 1, 0, 0, 30000, 0
    batlow  = scalar,   U08,    "Volts",  .1, 0, 0, 25.5,   1
    bathigh = scalar,   U08,    "Volts",  .1, 0, 0, 25.5,   1

  #if LAMBDA
    ;wueAFR = array, S16,  [10], "Lambda", { 0.1 / stoich }, 0.000, -0.300, 0.300, 3
  #else
    ;wueAFR = array, S16,  [10], "AFR", 0.1,   0.0, -4.0, 4.0, 1
  #endif
    wueRecommended = array, U08,  [10], "%", 1.0,  0.0, 100, 255.0, 0

    idleUnits = bits,   U08,    [0:2], "None", "On/Off", "Duty Cycle", "Duty Cycle", "Steps", "Steps"

    boardFuelOutputs  = array,   U08,   [128],   " ", 1.0, 0, 0, 255, 0, noMsqSave
    boardIgnOutputs   = array,   U08,   [128],   " ", 1.0, 0, 0, 255, 0, noMsqSave
    boardHasRTC       = array,   U08,   [128],   " ", 1.0, 0, 0, 255, 0, noMsqSave

    ;These are used for padding out bits variables
    #define invalid_x8      = "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define invalid_x16     = $invalid_x8,  $invalid_x8
    #define invalid_x24     = $invalid_x16, $invalid_x8
    #define invalid_x32     = $invalid_x16, $invalid_x16
    #define invalid_x64     = $invalid_x32, $invalid_x32
    #define invalid_x128    = $invalid_x64, $invalid_x64
    #define invalid_x256    = $invalid_x128, $invalid_x128
    #define invalid_x512    = $invalid_x256, $invalid_x256
    #define invalid_x1024   = $invalid_x512, $invalid_x512
    #define invalid_x2048   = $invalid_x1024, $invalid_x1024
    #define invalid_x4096   = $invalid_x2048, $invalid_x2048
    #define invalid_x8192   = $invalid_x4096, $invalid_x4096
    #define invalid_x16384  = $invalid_x8192, $invalid_x8192
    #define invalid_x32768  = $invalid_x16384, $invalid_x16384

    #define loadSourceNames = "MAP", "TPS", "IMAP/EMAP", "INVALID",   "INVALID", "INVALID", "INVALID", "INVALID"
    #define loadSourceUnits = "kPa",           "% TPS",   "%",         "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"

    algorithmNames          = bits,    U08,   [0:2], $loadSourceNames
    algorithmUnits          = bits,    U08,   [0:2], "kPa",           "% TPS",   "%",         "% TPS", "INVALID", "INVALID", "INVALID", "INVALID"
    algorithmLimits         = array,   U16,   [8],   "", 1.0, 0, 0, 511, 0, noMsqSave
    fuel2SwitchUnits        = bits,    U08,   [0:2], "rpm", "kPa",          "% TPS",   "%",         "% TPS", "INVALID", "INVALID", "INVALID"
    spark2ModeUnits         = bits,    U08,   [0:2], "", "%", "deg", "deg", "deg","INVALID","INVALID","INVALID"

    ;All definitions of split fullStatus should keep 32 options
    #define fullStatus_def_1= "seconds", "status bits", "Engine status", "syncLossCounter", "MAP (Kpa)", "INVALID", "IAT / MAT", "coolant",  "batCorrection", "battery voltage x10", "O2", "egoCorrection", "iatCorrection", "wueCorrection", "RPM", "INVALID", "AEamount/2", "GammaE", "INVALID", "VE1", "VE2", "AFR Target", "TPS DOT", "INVALID", "Advance", "TPS", "loopsPerSecond", "INVALID", "free RAM", "INVALID", "boostTarget/2", "Boost duty"
    #define fullStatus_def_2= "spark bits", "RPM DOT", "INVALID", "ethanolPct", "flexCorrection", "flexIgnCorrection", "idle Load", "testOutputs", "O2_2", "baro", "Aux in 0", "INVALID", "Aux in 1", "INVALID", "Aux in 2", "INVALID", "Aux in 3", "INVALID", "Aux in 4", "INVALID", "Aux in 5", "INVALID", "Aux in 6", "INVALID", "Aux in 7", "INVALID", "Aux in 8", "INVALID", "Aux in 9", "INVALID", "Aux in 10", "INVALID"
    #define fullStatus_def_3= "Aux in 11", "INVALID", "Aux in 12", "INVALID", "Aux in 13", "INVALID", "Aux in 14", "INVALID", "Aux in 15", "INVALID", "TPS ADC", "Error code", "Pulsewidth 1", "INVALID", "Pulsewidth 2", "INVALID", "Pulsewidth 3", "INVALID", "Pulsewidth 4", "INVALID", "status bits 3", "engineProtectStatus", "Fuel load", "INVALID", "Ignition load", "INVALID", "dwell", "INVALID", "idle C.L. target", "MAP DOT", "INVALID", "VVT1 Angle"
    #define fullStatus_def_4= "INVALID", "VVT1 Target", "VVT1 duty", "flexBoostCorrection", "INVALID", "baro correction", "Current VE", "ASE Value", "vss", "INVALID", "Gear", "Fuel Pressure", "Oil Pressure", "WMI duty", "WMI empty", "VVT2 angle", "INVALID", "VVT2 target", "VVT2 duty", "outputs status", "Fuel temp", "Fuel temp correction", "Advance 1", "Advance 2", "SD status", "EMAP", "INVALID", "Fan duty", "airConStatus", "INVALID", "INVALID"
    #define fullStatus_def_5= $invalid_x32
    #define fullStatus_def_6= $invalid_x32
    #define fullStatus_def_7= $invalid_x32
    ;Rules start at index 240
    #define fullStatus_def_8= "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "running seconds x10", "Rule 1", "Rule 2", "Rule 3", "Rule 4", "Rule 5", "Rule 6", "Rule 7", "Rule 8", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    #define fullStatus_def  = $fullStatus_def_1, $fullStatus_def_2, $fullStatus_def_3, $fullStatus_def_4, $fullStatus_def_5, $fullStatus_def_6, $fullStatus_def_7, $fullStatus_def_8

    #define pinLayouts      = "INVALID", "Speeduino v0.2", "Speeduino v0.3", "Speeduino v0.4", "INVALID", "INVALID", "01-05 MX5 PNP", "INVALID", "96-97 MX5 PNP", "NA6 MX5 PNP", "Turtana PCB", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "Plazomat I/O 0.1", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "Daz V6 Shield 0.1", "BMW PnP", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "NO2C", "UA4C", "BlitzboxBL49sp", "INVALID", "INVALID", "DIY-EFI CORE4 v1.0", "INVALID", "INVALID", "INVALID", "INVALID", "dvjcodec Teensy RevA", "dvjcodec Teensy RevB", "INVALID", "JUICEBOX", "INVALID", "Drop Bear", "INVALID", "INVALID", "INVALID", "INVALID", "Black STM32F407VET6 V0.1", "INVALID", "INVALID", "INVALID", $invalid_x128, $invalid_x64

    boostTableLabels    = bits,    U08,   [0:1], "Duty Cycle %", "kPa"
    boostByGearLabels   = bits,    U08,   [0:1], "", "%", "Limit", ""
    prgm_out_selection  = bits,    U08,   [0:2], "1", "2", "3", "4", "5", "6", "7", "8"

    fuelLoadMax     = scalar, U08, "", 1, 0, 0, 511, 0
    ignLoadMax      = scalar, U08, "", 1, 0, 0, 511, 0
    fuel2LoadMax    = scalar, U08, "", 1, 0, 0, 511, 0
    ign2LoadMax     = scalar, U08, "", 1, 0, 0, 511, 0
    AUXin00Alias    = string, ASCII, 20
    AUXin01Alias    = string, ASCII, 20 
    AUXin02Alias    = string, ASCII, 20 
    AUXin03Alias    = string, ASCII, 20 
    AUXin04Alias    = string, ASCII, 20 
    AUXin05Alias    = string, ASCII, 20 
    AUXin06Alias    = string, ASCII, 20 
    AUXin07Alias    = string, ASCII, 20 
    AUXin08Alias    = string, ASCII, 20 
    AUXin09Alias    = string, ASCII, 20 
    AUXin10Alias    = string, ASCII, 20 
    AUXin11Alias    = string, ASCII, 20 
    AUXin12Alias    = string, ASCII, 20 
    AUXin13Alias    = string, ASCII, 20 
    AUXin14Alias    = string, ASCII, 20 
    AUXin15Alias    = string, ASCII, 20

    prgm_out00Alias  = string, ASCII, 20
    prgm_out01Alias  = string, ASCII, 20 
    prgm_out02Alias  = string, ASCII, 20 
    prgm_out03Alias  = string, ASCII, 20 
    prgm_out04Alias  = string, ASCII, 20 
    prgm_out05Alias  = string, ASCII, 20 
    prgm_out06Alias  = string, ASCII, 20 
    prgm_out07Alias  = string, ASCII, 20 

    ;Define aliases for all the triggers. Naming pattern matches that used in decoders.ino
    #define trigger_missingTooth        = 0
    #define trigger_BasicDistributor    = 1
    #define trigger_DualWheel           = 2
    #define trigger_GM7X                = 3
    #define trigger_4G63                = 4
    #define trigger_24X                 = 5
    #define trigger_Jeep2000            = 6
    #define trigger_Audi135             = 7
    #define trigger_HondaD17            = 8
    #define trigger_Miata9905           = 9
    #define trigger_MazdaAU             = 10
    #define trigger_non360              = 11
    #define trigger_Nissan360           = 12
    #define trigger_Subaru67            = 13
    #define trigger_Daihatsu            = 14
    #define trigger_Harley              = 15
    #define trigger_ThirtySixMinus222   = 16
    #define trigger_ThirtySixMinus21    = 17
    #define trigger_420a                = 18
    #define trigger_Webber              = 19
    #define trigger_FordST170           = 20
    #define trigger_DRZ400              = 21
    #define trigger_NGC                 = 22
    #define trigger_VMAX                = 23
    #define trigger_renix               = 24
    #define trigger_Rover				        = 25
    #define trigger_K6A  				        = 26
    #define trigger_HondaJ32            = 27

[Constants]

   ;----------------------------------------------------------------------------
   ; Constants Definition
   ; --------------------
   ;
   ; Scalar Values
   ; -------------
   ; The scaling and translation values are used as follows:
   ;    msValue   = userValue / scale - translate
   ;    userValue = (msValue + translate) * scale
   ;
   ;
   ; Temperatures are fine, check out the Fielding IAC example (fastIdleT).
   ;
   ; Array Values
   ; ------------
   ; Arrays are specified just like scalars, except that they have a "shape"
   ; entry in the fourth parameter.  The shape allows you to define lists or
   ; tables, for example [8] defines a list with eight values and [2x4] defines
   ; a table with eight values (two rows and four columns).  Tables may be
   ; stored in either "X-" or "Y-order."  X-order means that memory is laid
   ; out like.
   ;
   ;     [x1,y1] [x2,y1]...[xn,y1] [x1,y2]...
   ;
   ; Y-order would be
   ;
   ;     [x1,y1] [x1,y2]...[x1,yn] [x2,y1]...
   ;
   ; To use the TableEditor, you must define two lists and a table, and
   ; the lengths of the lists must correspond to the shape of the table.
   ;
   ; Bit Fields
   ; ----------
   ; Bits are numbered 0-7, the rightmost being bit zero.  The basic
   ; data word that stores bit fields must be unsigned.
   ;
   ; You need NOT supply the correct number of labels matching the
   ; number of bits you've specified (one bit requires 2 values, two
   ; bits requires 4 values and so on).  If you neglect to supply enough
   ; labels, they will be synthesised using the sequence "1", "2" and so
   ; on based upon their position in the sequence (the cltType and matType
   ; will end up with identical lists).
   ;
   ; If you specify a label as "INVALID" (all upper case), then it will
   ; not be displayed in the combo box, so you can leave out values that
   ; make no sense.
   ;
   ;----------------------------------------------------------------------------

    endianness          = little
    nPages              = 16
    pageSize            = 128,   288,     288,    128,     288,    128,    240,     384,    192,    192,    288,    192,    128,    288,    256,   150

    ; New commands
    pageIdentifier      = "\$tsCanId\x01", "\$tsCanId\x02", "\$tsCanId\x03", "\$tsCanId\x04", "\$tsCanId\x05", "\$tsCanId\x06", "\$tsCanId\x07", "\$tsCanId\x08", "\$tsCanId\x09", "\$tsCanId\x0A", "\$tsCanId\x0B", "\$tsCanId\x0C", "\$tsCanId\x0D", "\$tsCanId\x0E", "\$tsCanId\x0F", "\$tsCanId\x10"
    pageReadCommand     = "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c", "p%2i%2o%2c"
    pageValueWrite      = "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v"
    pageChunkWrite      = "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v", "M%2i%2o%2c%v"
    crc32CheckCommand   = "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i", "d%2i"


    burnCommand         = "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i", "b%2i"



    # Teensy 4.1 uses 121 bytes of payload
    blockingFactor = 121

    delayAfterPortOpen=1000
    ;validateArrayBounds = true
    blockReadTimeout = 2000
    tsWriteBlocks = on
    interWriteDelay = 10 ;Ignored when tsWriteBlocks is on
    pageActivationDelay = 10
    restrictSquirtRelationship = false ;This requires TS 3.1 or above

    messageEnvelopeFormat = msEnvelope_1.0 ;New and testing only
    tableCrcCommand     = "k\$tsCanId%2i%2o%2c" ;TS can only use this command in new mode

    readSdCompressed = false


;--------------------------------------------------
;Start Page 1
;Page 1 is all general settings. Note that some of these (algorithm and ignAlgorithm) MUST come before their use in the bitStringValue() calls in the fuel and ignition tables
;--------------------------------------------------
page = 1
      aseTaperTime  = scalar, U08,       0,         "S",        0.1,       0.0,   0.0,    25.5,      1
      aeColdPct     = scalar, U08,       1,         "%",      1.0,       0,   100,    255,       0 ;AE cold adjustment %
#if CELSIUS
      aeColdTaperMin= scalar, U08,       2,       "C", 1.0,       -40,    -40,    215,      0     ;AE cold adjustment, taper start clt (full adjustment)
#else
      aeColdTaperMin= scalar, U08,       2,       "F", 1.8,    -22.23,    -40,    419,      0     ;AE cold adjustment, taper start clt (full adjustment)
#endif
    
      aeMode        = bits,   U08,       3, [0:1],  "TPS", "MAP", "INVALID", "INVALID"
      battVCorMode  = bits,   U08,       3, [2:2],  "Whole PW", "Open Time only"
      SoftLimitMode = bits,   U08,       3, [3:3],  "Fixed", "Relative "
      useTachoSweep = bits,   U08,       3, [4:4],  "Off", "On"
      aeApplyMode   = bits,   U08,       3, [5:5],  "PW Multiplier", "PW Adder"
      multiplyMAP   = bits,   U08,       3, [6:7],  "Off", "Baro", "Fixed", "INVALID"
      wueRates      = array,  U08,       4, [10],   "%",        1.0,       0.0,   0.0,    255,       0
      crankingPct   = scalar, U08,      14,         "%",        1.0,       0.0,   0.0,    255,       0
      pinLayout     = bits,   U08,      15, [0:7],  $pinLayouts
      tachoPin      = bits,   U08,      16, [0:5],  "Board Default", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      tachoDiv      = bits,   U08,      16, [6:7],  "Normal", "Half", "INVALID", "INVALID"
      tachoDuration = scalar, U08,      17,         "ms",       1.0,       0.0,   1.0,    6.0,       0
      maeThresh     = scalar, U08,      18,         "kPa/s",    1.0,       0.0,   0.0,    255,       0 ;MAP threshold for triggering AE
      taeThresh     = scalar, U08,      19,         "%/s",      1.0,       0.0,   0.0,    255,       0 ;TPS threshold for triggering AE
      aeTime        = scalar, U08,      20,         "ms",        10,       0.0,   0.0,    2550,      0
      taeMinChange  = scalar, U08,      21,         "%",        0.5,         0,     0,    5.0,       1
      maeMinChange  = scalar, U08,      22,         "kPa",      1.0,         0,     0,    10.0,      0

      ; Display (Options for what the display is showing)
      displayB1     = bits,   U08,      23, [0:3],  "RPM", "PW", "Advance", "VE", "GammaE", "TPS", "IAT", "CLT"
      displayB2     = bits,   U08,      23, [4:7],  "RPM", "PW", "Advance", "VE", "GammaE", "TPS", "IAT", "CLT"

      reqFuel       = scalar, U08,      24,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      divider       = scalar, U08,      25,        "",          1.0,       0.0
      alternate     = bits,   U08,      26, [0:0], "Simultaneous", "Alternating"
      crkngAddCLTAdv= bits,   U08,      26, [1:1], "No",       "Yes"
      includeAFR    = bits,   U08,      26, [2:2], "No",       "Yes"
      hardCutType   = bits,   U08,      26, [3:3], "Full",      "Rolling"
      ignAlgorithm  = bits,   U08,      26, [4:6], $loadSourceNames
      indInjAng     = bits,   U08,      26, [7:7], "Disabled", "Enabled"
      injOpen       = scalar, U08,      27,        "ms",        0.1,       0.0,   0.1,    25.5,      1
      injAng        = array,  U16,      28, [4],   "deg",       1.0,       0.0,   0.0,    720,       0

      ; Config1
      mapSample     = bits,   U08,      36, [0:1], "Instantaneous", "Cycle Average", "Cycle Minimum", "Event Average"
      twoStroke     = bits,   U08,      36, [2:2], "Four-stroke", "Two-stroke"
      injType       = bits,   U08,      36, [3:3], "Port", "Throttle Body"
      nCylinders    = bits,   U08,      36, [4:7], "INVALID","1","2","3","4","5","6","INVALID","8","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID"

      ; Config2
      algorithm     = bits,   U08,      37, [0:2], $loadSourceNames ;Has to be called algorithm for the req fuel calculator to work :(
      fixAngEnable  = bits,   U08,      37, [3:3], "Off", "On"
      nInjectors    = bits,   U08,      37, [4:7], "INVALID","1","2","3","4","5","6","INVALID","8","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID"

      ; Config3
      engineType    = bits,   U08,      38, [0:0], "Even fire",     "Odd fire"
      flexEnabled   = bits,   U08,      38, [1:1], "Off", "On"
      legacyMAP     = bits,   U08,      38, [2:2], "No", "Yes" ;Whether to use the older legacy MAP reading that had the pullup enabled
      baroCorr      = bits,   U08,      38, [3:3], "Off",           "On"
      injLayout     = bits,   U08,      38, [4:5], "Paired", "Semi-Sequential", "INVALID", "Sequential"
      perToothIgn   = bits,   U08,      38, [6:6], "No", "Yes"
      dfcoEnabled   = bits,   U08,      38, [7:7], "Off",       "On"

#if CELSIUS
      aeColdTaperMax = scalar, U08,       39,       "C", 1.0,       -40,    -40,    215,      0     ;AE cold adjustment, taper start clt (full adjustment)
#else
      aeColdTaperMax = scalar, U08,       39,       "F", 1.8,    -22.23,    -40,    419,      0     ;AE cold adjustment, taper end clt (no adjustment)
#endif

      dutyLim       = scalar, U08,      40,        "%",         1.0,       0.0,   0.0,     95.0,     0
      flexFreqLow   = scalar, U08,      41,        "Hz",        1.0,       0.0,   0.0,     250.0,    0
      flexFreqHigh  = scalar, U08,      42,        "Hz",        1.0,       0.0,   0.0,     250.0,    0

      boostMaxDuty  = scalar, U08,      43,        "%",         1.0,       0.0,   0.0,     100.0,    0
      tpsMin        = scalar, U08,      44,        "ADC",       1.0,       0.0,   0.0,     255.0,    0
      tpsMax        = scalar, U08,      45,        "ADC",       1.0,       0.0,   0.0,     255.0,    0
      mapMin        = scalar, S08,      46,        "kpa",       1.0,       0.0,  -100,     127.0,    0
      mapMax        = scalar, U16,      47,        "kpa",       1.0,       0.0,   0.0,     25500,    0
      fpPrime       = scalar, U08,      49,        "s",         1.0,       0.0,   0.0,     255.0,    0
      stoich        = scalar, U08,      50,        ":1",        0.1,       0.0,   0.0,     25.5,     1
      oddfire2      = scalar, U16,      51,        "deg",       1.0,       0.0,   0.0,     720,      0 ; * (  2 byte)
      oddfire3      = scalar, U16,      53,        "deg",       1.0,       0.0,   0.0,     720,      0 ; * (  2 byte)
      oddfire4      = scalar, U16,      55,        "deg",       1.0,       0.0,   0.0,     720,      0 ; * (  2 byte)

      idleUpPin     = bits,   U08,      57, [0:5], "Board Default", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      idleUpPolarity= bits,   U08,      57, [6:6], "Normal", "Inverted"
      idleUpEnabled = bits,   U08,      57, [7:7], "Off", "On"
      idleUpAdder   = scalar, U08,      58,        "% / Steps",  1.0,       0.0,   0.0,     250.0,    0
      aeTaperMin    = scalar, U08,      59,        "RPM",       100,       0.0,   1000,    10000,    0
      aeTaperMax    = scalar, U08,      60,        "RPM",       100,       0.0,   2000,    10000,    0

      iacCLminValue = scalar, U08,      61,       "% / Steps", {idleRes},   0.0,   0.0, {idleResMax},    0 ; Minimum and maximum duty cycles when using closed loop idle
      iacCLmaxValue = scalar, U08,      62,       "% / Steps", {idleRes},   0.0,   0.0, {idleResMax},    0
      boostMinDuty  = scalar, U08,      63,        "%",         1.0,       0.0,   0.0,     100.0,    0 ; Minimum and maximum duty cycles for boost control

      baroMin       = scalar, S08,      64,        "kpa",       1.0,       0.0,  -100,     127.0,    0
      baroMax       = scalar, U16,      65,        "kpa",       1.0,       0.0,   0.0,     25500,    0
      EMAPMin       = scalar, S08,      67,        "kpa",       1.0,       0.0,  -100,     127.0,    0
      EMAPMax       = scalar, U16,      68,        "kpa",       1.0,       0.0,   0.0,     25500,    0

      fanWhenOff      = bits,   U08,    70, [0:0], "No",        "Yes" 
      fanWhenCranking = bits,   U08,    70, [1:1], "No",        "Yes" 
      useDwellMap     = bits,   U08,    70, [2:2], "No",        "Yes" 
      fanEnable       = bits,   U08,    70, [3:4], "Off",       "On/Off",  "PWM",  "INVALID"
      rtc_mode        = bits,   U08,    70, [5:6], "Off", "On-board", "INVALID", "INVALID"
      incorporateAFR  = bits,   U08,    70, [7:7], "No",        "Yes"

      asePct        = array,  U08,       71, [4],    "%",        1.0,       0.0,     0,    155,       0
      aseCount      = array,  U08,       75, [4],    "s",     1.0,       0.0,     0.0,     255,    0 ; Values for the afterstart enrichment curve
#if CELSIUS
      aseBins       = array,  U08,       79, [4],  "C", 1.0,       -40,    -40,    215,      0
#else
      aseBins       = array,  U08,       79, [4],  "F", 1.8,    -22.23,    -40,    419,      0
#endif
      primePulse    = array,  U08,       83, [4],  "ms",        0.5,       0.0,   0.0,     127.5,     1
#if CELSIUS
      primeBins     = array,  U08,       87, [4],  "C", 1.0,       -40,    -40,    215,      0
#else
      primeBins     = array,  U08,       87, [4],  "F", 1.8,    -22.23,    -40,    419,      0
#endif
      CTPSPin       = bits,  U08,  91, [0:5], "Board Default", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      CTPSPolarity  = bits,  U08,  91, [6:6], "Normal", "Inverted"
      CTPSEnabled   = bits,  U08,  91, [7:7], "Off", "On"
      idleAdvEnabled      = bits,  U08,  92, [0:1], "Off", "Added", "Switched", "INVALID"
      idleAdvAlgorithm    = bits,  U08,  92, [2:2], "TPS", "CTPS"
      ;idleAdvDelay        = bits,  U08,  92, [3:7], "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "INVALID", "INVALID"
      idleAdvDelay        = bits,  U08,  92, [3:7], "0.0", "0.5", "1.0", "1.5", "2.0", "2.5", "3.0", "3.5", "4.0", "4.5", "5.0", "5.5", "6.0", "6.5", "7.0", "7.5", "8.0", "8.5", "9.0", "9.5", "10.0", "10.5", "11.0", "11.5", "12.0", "12.5", "13.0", "13.5", "14.0", "14.5", "INVALID", "INVALID"
      idleAdvRPM   = scalar,  U08,      93,       "rpm",        100,       0.0,   100,   25500,      0
      idleAdvTPS   = scalar,  U08,      94,         "%",        0.5,         0,     0,   100.0,      1

      injAngRPM     = array,  U08,      95, [4],   "RPM",        100,       0.0,   100,    10000,    0
      idleTaperTime = scalar, U08,      99,    "S",         0.1,       0.0,   0.0,    25.5,      1
      dfcoDelay     = scalar, U08,      100,   "S",         0.1,       0.0,   0.0,    25.5,      1 ;Remainder of DFCO settings are in page 4
#if CELSIUS
      dfcoMinCLT    = scalar,  U08,      101,    "C", 1.0,       -40,    -40,    215,      0
#else
      dfcoMinCLT    = scalar,  U08,      101,    "F", 1.8,    -22.23,    -40,    419,      0
#endif

      ;VSS settings
      vssMode       = bits,  U08,         102, [0:1], "Off", "CAN/Serial/Analog", "Pulses per KM", "Pulses per mile"
      ;vssPullup     = bits,  U08,       102, [1:1], "Off", "On"
      vssPin        = bits,  U08,       102, [2:7], "Board Default", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      vssPulsesPerKm= scalar, U16,      103,        "pulses",     1.0,       0.0,   0.0,     25500,    0
      vssSmoothing  = scalar, U08,      105,         "%",        1.0,         0,     0,     255,      0
      vssRatio1     = scalar, U16,      106, "km/h per 1000rpm", 0.1,         0,     0,     99.9,     1
      vssRatio2     = scalar, U16,      108, "km/h per 1000rpm", 0.1,         0,     0,     99.9,     1
      vssRatio3     = scalar, U16,      110, "km/h per 1000rpm", 0.1,         0,     0,     99.9,     1
      vssRatio4     = scalar, U16,      112, "km/h per 1000rpm", 0.1,         0,     0,     99.9,     1
      vssRatio5     = scalar, U16,      114, "km/h per 1000rpm", 0.1,         0,     0,     99.9,     1
      vssRatio6     = scalar, U16,      116, "km/h per 1000rpm", 0.1,         0,     0,     99.9,     1
    
      ;Idle up output (AC Fan) settings
      idleUpOutputEnabled   = bits,   U08,      118, [0:0], "Off", "On"
      idleUpOutputInv       = bits,   U08,      118, [1:1], "No", "Yes"
      idleUpOutputPin       = bits,   U08,      118, [2:7], "Board Default", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      
      tachoSweepMaxRPM  = scalar,   U08,        119,        "RPM", 100,       0.0,   100,    10000,    0
      primingDelay      = scalar,   U08,        120,        "S",   0.1,       0.0,   0.0,     25.5,      1
      
      iacTPSlimit               = scalar, U08,  121,        "%",  0.5,         0,     0,    100.0,     1
      iacRPMlimitHysteresis     = scalar, U08,  122,      "RPM",   10,         0,    10,     2500,     0

      rtc_trim        = scalar,  S08,    123,               "ppm",      1, 0, -127, +127, 0
      idleAdvVss      = scalar, U08,      124,        "km/h",       1,       0.0,   0.0,     255,      0 
      mapSwitchPoint  = scalar, U08,      125,        "RPM",      100,       0.0,   0.0,     16320,    0

      unused0_126               = bits,   U08,  126, [0:2]
      ;These are reserved for future use, in case of more CAN broadcasting features are added
      canWBO                    = bits,   U08,  126, [2:3], "Off", "rusEFI WBO", "AEM", "INVALID"
      vssAuxCh                  = bits,   U08,  126, [4:7], "Aux0", "Aux1", "Aux2", "Aux3", "Aux4", "Aux5", "Aux6", "Aux7", "Aux8", "Aux9", "Aux10", "Aux11", "Aux12", "Aux13", "Aux14", "Aux15"
      decelAmount               = scalar, U08,  127,        "%",  1.0,       0.0,   0.0,     150.0,    0

;Page 2 is the fuel map and axis bins only
page = 2
   ;  name       = bits,   type,    offset, bits
   ;  name       = array,  type,    offset, shape, units,     scale, translate,    lo,      hi, digits
   ;  name       = scalar, type,    offset,        units,     scale, translate,    lo,      hi, digits
      veTable    = array,  U08,       0, [16x16],"%",          1.0,      0.0,   0.0,   255.0,      0
      rpmBins    = array,  U08,     256, [  16], "RPM",      100.0,      0.0,   100.0, 25500.0,      0
      fuelLoadBins = array,  U08,   272, [  16], { bitStringValue(algorithmUnits ,  algorithm) },       {fuelLoadRes},      0.0,   0.0,   {fuelLoadMax},      {fuelDecimalRes}
      ;fuelLoadBins = array,  U08,   272, [  16], { bitStringValue(algorithmUnits ,  algorithm) },        2.0,      0.0,   0.0,   { arrayValue(rpmBins , algorithm) },      0

;--------------------------------------------------
;Start Ignition table (Page 3)
;--------------------------------------------------
page = 3
      advTable1   = array,  U08,     0,[16x16],  "deg",       1.0,       -40,   -40,   70.0,      0
      rpmBins2    = array,  U08,   256,[   16],  "RPM",       100.0,     0.0,   100,   25500,      0
      mapBins1    = array,  U08,   272, [  16], { bitStringValue(algorithmUnits ,  ignAlgorithm) },     {ignLoadRes},      0.0,   0.0,   {ignLoadMax},      {ignDecimalRes} ; This name has to be used in order for the table to show up in MLVs table. I can't find the regexs that make this work :(

;--------------------------------------------------
;Start Page 4
;These are primarily ignition related settings (Previously part of page 2)
;--------------------------------------------------
page = 4
      TrigAng    = scalar, S16,      0,         "Deg",       1,        0,     -360,     360,        0
      FixAng     = scalar, S08,      2,         "Deg",       1,        0,     -64,      64,         0 ; Allow negative values here
      CrankAng   = scalar, S08,      3,         "Deg",       1,        0,     -10,      80,         0
      TrigAngMul = scalar, U08,      4,         "",          1,        0,     0,        88,         0 ; Multiplier for tooth counts that don't evenly divide into 360
      TrigEdge   = bits,   U08,      5,[0:0],    "RISING", "FALLING"
      TrigSpeed  = bits,   U08,      5,[1:1],    "Crank Speed", "Cam Speed"
      IgInv      = bits,   U08,      5,[2:2],    "Going Low",        "Going High"
      TrigPattern= bits,   U08,      5,[3:7],    "Missing Tooth", "Basic Distributor", "Dual Wheel", "GM 7X", "4G63 / Miata / 3000GT", "GM 24X", "Jeep 2000", "Audi 135", "Honda D17", "Miata 99-05", "Mazda AU", "Non-360 Dual", "Nissan 360", "Subaru 6/7", "Daihatsu +1", "Harley EVO", "36-2-2-2", "36-2-1", "DSM 420a", "Weber-Marelli", "Ford ST170", "DRZ400", "Chrysler NGC", "Yamaha Vmax 1990+", "Renix", "Rover MEMS", "K6A", "Honda J32", "INVALID", "INVALID", "INVALID", "INVALID"
      TrigEdgeSec= bits,   U08,      6,[0:0],    "RISING", "FALLING"
      fuelPumpPin= bits  , U08,      6,[1:6],    "Board Default", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      useResync  = bits,   U08,      6,[7:7],    "No",        "Yes"
      sparkDur   = scalar, U08,      7,          "ms",        0.1, 0, 0, 25.5, 1 ; Spark duration
      trigPatternSec = bits,U08,     8,[0:6],    "Single tooth cam", "4-1 cam", "Poll level", "Rover 5-3-2 cam", "Toyota 3 Tooth
      PollLevelPol = bits, U08,      8,[7:7],    "Low", "High",

;Reset Control
      bootloaderCaps  = scalar, U08, 9,        "level",    1, 0, 0, 255, 0
#if resetcontrol_adv
      resetControl =    bits,   U08, 10,[0:1], "Disabled", "Prevent When Running", "Prevent Always", "Serial Command"
#else
      resetControl =    bits,   U08, 10,[0:1], "Disabled", "INVALID", "INVALID", "Serial Command"
#endif
      resetControlPin = bits,   U08, 10,[2:7],  "Board Default", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"

      SkipCycles  = scalar, U08,     11,         "cycles",    1,    0,    0,  255, 0

   ;  name       = array,  type,    offset, shape, units,     scale, translate,    lo,      hi, digits
   ;  name       = scalar, type,    offset,      units,     scale, translate,    lo,      hi, digits
;Dwell control
      boostType     = bits,   U08,     12, [0:0],  "Open Loop",  "Closed Loop"
      useDwellLim   = bits,   U08,     12, [1:1],   "Off",    "On"
      sparkMode     = bits,   U08,     12, [2:4],  "Wasted Spark", "Single Channel",   "Wasted COP", "Sequential", "Rotary", "INVALID", "INVALID", "INVALID"
      TrigFilter    = bits,   U08,     12, [5:6],  "Off", "Weak", "Medium", "Aggressive"
      ignCranklock  = bits,   U08,     12, [7:7],  "Off",  "On"
      dwellcrank    = scalar, U08,     13,         "ms",       0.1,    0,    0, 25, 1
      dwellrun      = scalar, U08,     14,         "ms",       0.1,    0,    0, 8, 1 ;running dwell variable railed to 8 - who needs more than 8ms?
      numTeeth      = scalar, U08,     15,         "teeth",    1.0,    0.0,  0.0,     255,       0
      missingTeeth  = scalar, U08,     16,         "teeth",    1.0,    0.0,  0.0,     255,       0

      crankRPM      = scalar, U08,     17,         "rpm",      10,    0.0,  100, 1000, 0
      tpsflood      = scalar, U08,     18,         "%",        0.5,    0.0,  0.0,   100.0,      1

;Rev Limits
      SoftRevLim    = scalar, U08,  19,         "rpm",      100,    0.0,  100, 25500, 0
      SoftLimRetard = scalar, U08,  20,         "deg",      1.0,    0.0,  0.0,   80,   0
      SoftLimMax    = scalar, U08,  21,         "s",        0.1,    0.0,  0.0,  25.5,   1
      hardRevLim    = scalar, U08,  22,         "rpm",      100,    0.0, 100, 25500,  0

;TPS based acceleration enrichment
      taeBins    = array,  U08,     23, [ 4],   "%/s",      10.0,   0.0,  0.00,   2550.0,      0
      taeRates   = array,  U08,     27, [ 4],   "%",        1.0,    0.0,  0.00,    255.0,      0 ; 4 bytes
;WUE Bins (Needed somewhere to put these
    #if CELSIUS
      wueBins    = array,  U08,     31, [10],   "C",        1.0, -40,  -40,  102.0,      0
    #else
      wueBins    = array,  U08,     31, [10],   "F",        1.8,   -22.23,  -40,  215.0,      0
    #endif
;Dwell config options
      dwellLim   = scalar, U08,     41,         "ms",       1,      0,        0, 32, 0
      dwellRates = array,  U08,     42, [6],    "%",        1.0,    0.0,      0.00,   255.0,      0

;IAT (Inlet air temp) timing retard
    #if CELSIUS
      iatRetBins   = array,  U08,     48, [ 6],   "C",      1.0,    0.0,  0.00,   125.0,      0
    #else
      iatRetBins   = array,  U08,     48, [ 6],   "F",      1.8,    17.77,  32.00,   257.0,      0 ; No -40 degree offset here
    #endif
      iatRetRates  = array,  U08,     54, [ 6],   "deg",    1.0,    0.0,  0.00,   30.0,      0
;Deceleration Fuel Cut Off (DFCO)
      dfcoRPM      = scalar, U08,      60,        "RPM",      10.0,  0.0,   100,     2550,    0
      dfcoHyster   = scalar, U08,      61,        "RPM",      2.0,  0.0,   100,     500.0,    0
      dfcoTPSThresh= scalar, U08,      62,        "%",        0.5,  0.0,     0,     100.0,    1
;Cranking ignition bypass
      ignBypassEnable = bits,   U08,  63, [0:0],      "Off",        "On"
      ignBypassPin    = bits,   U08,  63, [1:6],      "INVALID", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      ignBypassHiLo   = bits,   U08,  63, [7:7],      "LOW",        "HIGH"
;Analog input filter levels (Note max values are 240 so that default values of 255 can be overwritten on bootup)
      ADCFILTER_TPS   = scalar, U08,      64, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_CLT   = scalar, U08,      65, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_IAT   = scalar, U08,      66, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_O2    = scalar, U08,      67, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_BAT   = scalar, U08,      68, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_MAP   = scalar, U08,      69, "%",          1.0,  0.0,   0,     240,    0
      ADCFILTER_BARO  = scalar, U08,      70, "%",          1.0,  0.0,   0,     240,    0

;CLT (Coolant temp) timing Advance/Retard
    #if CELSIUS
      cltAdvBins   = array,  U08,     71, [ 6],   "C",      1.0,    -40,  -40,   102.0,      0
    #else
      cltAdvBins   = array,  U08,     71, [ 6],   "F",      1.8,    -22.23,  -40,   215.0,      0 ; No -40 degree offset here
    #endif
      cltAdvValues    = array,  S08,     77, [ 6],   "deg",    1.0,     -15,  -15,   15,      0

;MAP based acceleration enrichment
      maeBins         = array,  U08,      83, [ 4],   "kpa/s",    10.0,   0.0,  0.00,   2550.0,      0
      maeRates        = array,  U08,      87, [ 4],   "%",        1.0,    0.0,  0.00, 255.0,      0 ; 4 bytes

      batVoltCorrect  = scalar, S08,      91, "v",          0.1,  0.0,    -2,     2,        1 ;Battery reading calibration value. Note: Signed value

;Baro fuel correction
      baroFuelBins    = array,  U08,      92, [8],    "kPa",  1.0,    0,  70, 120,        0 ; Bins for the Baro correction curve
      baroFuelValues  = array,  U08,     100, [8],     "%",   1.0,    0,  0,  255,        0 ; % Values for same

;Idle timing advance
      idleAdvBins     = array,  U08,      108, [6],    "RPM",    10.0,      -50,       -500,     500,         0
      idleAdvValues   = array,  U08,      114, [6],    "deg",     1.0,      -15,        -15,      50,         0

      engineProtectMaxRPM   = scalar, U08,  120,         "rpm",      100,    0.0, 100, 25500,  0

      vvt2CL0DutyAng  = scalar, S16,      121,         "deg",    1.0,   0.0,  -360.0,  360.0,      0 ; * (  2 bytes)
      vvt2PWMdir      = bits,   U08,      123, [0:0],  "Advance", "Retard"
      inj4CylPairing  = bits,   U08,      123, [1:2],  "1+3 & 2+4", "1+4 & 2+3", "INVALID", "INVALID"
      dwellErrCorrect = bits,   U08,      123, [3:3],  "Off", "On"
      CANBroadcastProt= bits,   U08,      123, [4:6],  "Off", "BMW", "VAG", "Haltech", "INVALID", "INVALID", "INVALID", "INVALID"
      unusedBits4_123 = bits,   U08,      123, [7:7]
      ANGLEFILTER_VVT = scalar, U08,      124, "%",          1.0,  0.0,   0,     100,    0
      FILTER_FLEX     = scalar, U08,      125, "%",          1.0,  0.0,   0,     240,    0

      #if CELSIUS
      vvtMinClt       = scalar,  U08,      126, "C",        1.0,    -40,    -40,    215,      0     
      #else
      vvtMinClt       = scalar,  U08,      126, "F",        1.8,    -22.23,    -40,    419,      0
      #endif
      vvtDelay        = scalar,  U08,      127, "S",        5.0,  0.0,   0,     1275,    0

;--------------------------------------------------

;Start AFR page
;--------------------------------------------------
page = 5
      lambdaTable = array,  U08,              0, [16x16], "Lambda",  0.1,   0.0000,  0.00,    2.00,      3
      afrTable    = array,  U08,     lastOffset, [16x16],    "AFR",               0.1,      0.0,     7,    25.5,      1

      rpmBinsAFR  = array,  U08,   256,[   16],    "RPM",   100.0,     0.0,   100,   25500,      0
      loadBinsAFR  = array,  U08,   272,[   16],    { bitStringValue(algorithmUnits ,  algorithm) },   {fuelLoadRes},      0.0,   0.0,   {fuelLoadMax},      {fuelDecimalRes}

;--------------------------------------------------
;Start page 6
; Page 6 is all settings associated with O2/AFR
;--------------------------------------------------
page = 6
      egoAlgorithm            = bits  , U08,       0,      [0:1], "Simple", "INVALID", "PID", "No correction" ; * (  1 byte)
      egoType                 = bits  , U08,       0,      [2:3], "Disabled", "Narrow Band", "Wide Band", "INVALID"                  ; egoOption
      boostEnabled            = bits,   U08,       0,      [4:4], "Off", "On"
      vvtEnabled              = bits,   U08,       0,      [5:5], "Off", "On"
      engineProtectType       = bits,   U08,       0,      [6:7], "Off", "Spark Only", "Fuel Only","Both"

      egoKP                   = scalar, U08,       1,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
      egoKI                   = scalar, U08,       2,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
      egoKD                   = scalar, U08,       3,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
  #if CELSIUS
      egoTemp                 = scalar, U08,        4,             "C",        1.0, -40,  -40,  102.0,      0
  #else
      egoTemp                 = scalar, U08,        4,             "F",       1.8,   -22.23,  -40,  419.0,      0
  #endif
      egoCount                = scalar, U08,       5,             "",         4.0,    0.0,  4.0,  255.0,      0 ; * (  1 byte)
      vvtMode                 = bits,   U08,       6, [0:1],      "On/Off", "Open Loop", "Closed loop", "INVALID"
      vvtLoadSource           = bits,   U08,       6, [2:3],      "MAP", "TPS", "INVALID", "INVALID"
      vvtPWMdir               = bits,   U08,       6, [4:4],      "Advance", "Retard"
      vvtCLUseHold            = bits,   U08,       6, [5:5],      "No", "Yes"
      vvtCLAlterFuelTiming    = bits,   U08,       6, [6:6],      "No", "Yes"
      boostCutEnabled         = bits,   U08,       6, [7:7],      "Off", "On"
      egoLimit                = scalar, U08,       7,             "",         1,      0,    0,    16,         0
      
      ego_min_afr    = scalar, U08,          8,    "AFR",  0.1          , 0,  7          ,  25          , 1
      ego_min_lambda = scalar, U08, lastOffset, "Lambda", 0.1, 0, 7 , 25 , 3
      ego_max_afr    = scalar, U08,          9,    "AFR",  0.1          , 0,  7          ,  25          , 1
      ego_max_lambda = scalar, U08, lastOffset, "Lambda", 0.1, 0, 7, 25, 3

      ego_sdelay  = scalar, U08,      10,             "sec",      1,      0,    0,    120,        0
      egoRPM      = scalar, U08,      11,             "rpm",      100,    0.0,  100,  25500,      0
      egoTPSMax   = scalar, U08,      12,             "%",        0.5,      0,    0,  100.0,      1
      vvt1Pin      = bits  , U08,      13, [0:5],      "Board Default", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      useExtBaro  =   bits, U08,      13, [6:6],      "No", "Yes"
      boostMode   =   bits, U08,      13, [7:7],      "Simple", "Full"
      boostPin    =   bits, U08,      14, [0:5],      "Board Default", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      tachoMode   =   bits, U08,      14, [6:6],      "Fixed Duration", "Match Dwell"
      useEMAP     =   bits, U08,      14, [7:7],      "No", "Yes"
      brvBins     = array,  U08,      15, [6],        "V",        0.1,    0,    6,    24,         1 ; Bins for the battery reference voltage
      injBatRates = array,  U08,      21, [6],        "%",        1,      0,    0,    255,        0 ;Values for injector pulsewidth vs voltage
  #if CELSIUS
      airDenBins  = array,  U08,      27, [9],        "C",        1.0,    -40,  -40,  215,        0 ; Bins for the air density correction curve
  #else
      airDenBins  = array,  U08,      27, [9],        "F",        1.8,    -22.23,  -40,  419,        0 ; Bins for the air density correction curve
  #endif
      airDenRates = array,  U08,      36, [9],        "%",        1.0,    0.0,  0,    255,        0 ; Values for the air density correction curve

; PWM Frequencies
      boostFreq   = scalar, U08,      45,             "Hz",       2.0,    0.0,  10,   511,        0
      vvtFreq     = scalar, U08,      46,             "Hz",       2.0,    0.0,  10,   511,        0
      idleFreq    = scalar, U08,      47,             "Hz",       2.0,    0.0,  10,   511,        0

; Launch Control
      launchPin   = bits  , U08,      48, [0:5],      "Board Default", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      launchEnable= bits,   U08,      48, [6:6],      "No",        "Yes"
      launchHiLo  = bits,   U08,      48, [7:7],    "LOW",        "HIGH"

      lnchSoftLim = scalar, U08,      49,             "rpm",      100,    0.0,    100, 25500, 0
      lnchRetard  = scalar, S08,      50,             "deg",      1.0,    0.0,    -30,   40,   0
      lnchHardLim = scalar, U08,      51,             "rpm",      100,    0.0,    100, 25500,  0
      lnchFuelAdd = scalar, U08,      52,             "%",        1.0,    0.0,    0.0,   80,   0

      idleKP       = scalar, U08,     53,             "%",        0.03125,   0.0,  0.0,  7.96,      2 ; * (  1 byte)
      idleKI       = scalar, U08,     54,             "%",        0.03125,   0.0,  0.0,  7.96,      2 ; * (  1 byte)
      idleKD       = scalar, U08,     55,             "%",        0.00781,   0.0,  0.0,  1.99,      3 ; * (  1 byte)
      boostLimit   = scalar, U08,     56,             "kPa",      2.0,   0.0,  0.0,  511.0,      0
      boostKP      = scalar, U08,     57,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
      boostKI      = scalar, U08,     58,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)
      boostKD      = scalar, U08,     59,             "%",        1.0,   0.0,  0.0,  200.0,      0 ; * (  1 byte)

      lnchPullRes  =   bits, U08,      60,        [0:0],      "Float"  , "Pullup"
      iacPWMrun    =   bits, U08,      60,        [1:1],      "No",        "Yes"
      fuelTrimEnabled= bits, U08,      60,        [2:2],      "No",        "Yes"
      flatSEnable  =   bits, U08,      60,        [3:3],      "No",        "Yes"
; Baro Sensor pin
      baroPin      =   bits, U08,      60,        [4:7],      "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15"

; Flat shift
      flatSSoftWin = scalar, U08,      61,             "rpm",      100,    0.0,  100, 25500,  0
      flatSRetard  = scalar, S08,      62,             "deg",      1.0,    0.0,-30.0,   80,   0
      flatSArm     = scalar, U08,      63,             "rpm",      100,    0.0,  100, 25500,  0

      iacCLValues  = array, U08,       64, [10],        "RPM",    10.0,  0.0,      0,  2550,     0
      iacOLStepVal = array, U08,       74, [10],       "Steps",      3,    0,      0,    765,    0
      iacOLPWMVal  = array, U08,       84, [10],       "Duty %",   1.0,    0,      0,      100,    0
  #if CELSIUS
      iacBins      = array, U08,       94, [10],       "C",        1.0,    -40,    -40,    215,      0
  #else
      iacBins      = array, U08,       94, [10],       "F",        1.8,    -22.23,    -40,    419,      0
  #endif
      iacCrankSteps= array, U08,      104, [4],        "Steps",      3,    0,    0,    765,    0
      iacCrankDuty = array, U08,      108, [4],        "Duty %",   1.0,    0,  0,  100,    0
  #if CELSIUS
      iacCrankBins = array, U08,      112, [4],        "C",        1.0,    -40,    -40,    215,      0
  #else
      iacCrankBins = array, U08,      112, [4],        "F",        1.8,    -22.23,    -40,    419,      0
  #endif

      iacAlgorithm = bits , U08,      116, [0:2],      "None", "On/Off", "PWM Open loop", "PWM Closed loop", "Stepper Open Loop", "Stepper Closed Loop", "PWM Closed+Open loop", "Stepper Closed+Open loop"
      iacStepTime  = bits , U08,      116, [3:5],      "INVALID","1", "2", "3", "4", "5", "6","INVALID"
      iacChannels  = bits,  U08,      116, [6:6],      "1", "2"
      iacPWMdir    = bits , U08,      116, [7:7],      "Normal", "Reverse"

  #if CELSIUS
      iacFastTemp  = scalar, U08,     117,             "C",        1.0,    -40,    -40,    215,      0
  #else
      iacFastTemp  = scalar, U08,     117,             "F",        1.8,    -22.23,    -40,    419,      0
  #endif

      iacStepHome  = scalar, U08,     118,             "Steps",         3,    0,    0, 765,   0
      iacStepHyster= scalar, U08,     119,             "Steps",         1,  0,  1.0,  10,   0

      ; Begin fan control variables
      fanInv       = bits,   U08,     120, [0:0], "No",        "Yes"
      fanUnused    = bits,   U08,     120, [1:1], "Off",       "On/Off"
      fanPin       = bits,   U08,     120, [2:7], "Board Default", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
  #if CELSIUS
      fanSP        = scalar, U08,     121,        "C",        1.0,       -40,     -40,     215.0,    0
      fanHyster    = scalar, U08,     122,        "C",        1.0,       0.0,  0.0,     40,    0
  #else
      fanSP        = scalar, U08,     121,        "F",        1.8,       -22.23,  -40,     419.0,    0
      fanHyster    = scalar, U08,     122,        "F",        1.0,       0.0,  0.0,     40,    0
  #endif
      fanFreq      = scalar, U08 ,    123,        "Hz",        2.0,        0.0,    10,     511,       0
  #if CELSIUS
      fanPWMBins = array, U08,      124, [4],        "C",        1.0,    -40,    -40,    215,      0
  #else
      fanPWMBins = array, U08,      124, [4],        "F",        1.8,    -22.23,    -40,    419,      0
  #endif

;--------------------------------------------------
;Boost and vvt maps (Page 7)
;--------------------------------------------------
page = 7
      boostTable    = array,  U08,    0,[8x8],    { bitStringValue( boostTableLabels, boostType ) },        2.0,        0.0,   0,       {boostTableLimit},      0
      rpmBinsBoost  = array,  U08,    64,[  8],   "RPM",      100.0,      0.0,   100,     25500,      0
      tpsBinsBoost  = array,  U08,    72,[  8],   "TPS",      0.5,        0.0,   0.0,     127.0,      1
      vvtTable      = array,  U08,    80,[8x8],    "%",        0.5,        0.0,   0,       100,      1
      rpmBinsVVT    = array,  U08,    144,[  8],   "RPM",      100.0,      0.0,   100,     25500,      0
      loadBinsVVT   = array,  U08,    152,[  8],   { bitStringValue(algorithmUnits ,  vvtLoadSource) },  {vvtLoadRes},        0.0,   0.0,     {vvtLoadMax},      {vvtDecimalRes}
;Fuel staging Table
      stagingTable  = array,  U08,    160, [8x8], "%",          1.0,      0.0,   0.0,   100.0,      0
      rpmBinsStaging= array,  U08,    224, [  8], "RPM",      100.0,      0.0,   100.0, 25500.0,      0
      loadBinsStaging= array,  U08,    232, [  8], { bitStringValue(algorithmUnits ,  algorithm) },   {fuelLoadRes},      0.0,   0.0,   {fuelLoadMax},      {fuelDecimalRes}

;--------------------------------------------------
;Sequential fuel trim tables (Page 8)
;--------------------------------------------------
page = 8
      fuelTrim1Table      = array,  U08,     0,[6x6],     "%",    1.0,    -128,   -50,    50,        0
      fuelTrim1rpmBins    = array,  U08,    36,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim1loadBins   = array,  U08,    42,[  6],     { bitStringValue(algorithmUnits ,  algorithm) }, {fuelLoadRes},      0.0,   0.0,   {fuelLoadMax},      {fuelDecimalRes}

      fuelTrim2Table      = array,  U08,    48,[6x6],     "%",    1.0,    -128,   -50,    50,         0
      fuelTrim2rpmBins    = array,  U08,    84,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim2loadBins   = array,  U08,    90,[  6],     { bitStringValue(algorithmUnits ,  algorithm) }, {fuelLoadRes},      0.0,   0.0,   {fuelLoadMax},      {fuelDecimalRes}

      fuelTrim3Table      = array,  U08,    96,[6x6],     "%",    1.0,    -128,  -50,     50,         0
      fuelTrim3rpmBins    = array,  U08,   132,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim3loadBins   = array,  U08,   138,[  6],     { bitStringValue(algorithmUnits ,  algorithm) }, {fuelLoadRes},      0.0,   0.0,   {fuelLoadMax},      {fuelDecimalRes}

      fuelTrim4Table      = array,  U08,   144,[6x6],     "%",    1.0,    -128,  -50,     50,         0
      fuelTrim4rpmBins    = array,  U08,   180,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim4loadBins   = array,  U08,   186,[  6],     { bitStringValue(algorithmUnits ,  algorithm) }, {fuelLoadRes},      0.0,   0.0,   {fuelLoadMax},      {fuelDecimalRes}

      fuelTrim5Table      = array,  U08,   192,[6x6],     "%",    1.0,    -128,   -50,    50,        0
      fuelTrim5rpmBins    = array,  U08,   228,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim5loadBins   = array,  U08,   234,[  6],     { bitStringValue(algorithmUnits ,  algorithm) }, {fuelLoadRes},      0.0,   0.0,   {fuelLoadMax},      {fuelDecimalRes}

      fuelTrim6Table      = array,  U08,   240,[6x6],     "%",    1.0,    -128,   -50,    50,         0
      fuelTrim6rpmBins    = array,  U08,   276,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim6loadBins   = array,  U08,   282,[  6],     { bitStringValue(algorithmUnits ,  algorithm) }, {fuelLoadRes},      0.0,   0.0,   {fuelLoadMax},      {fuelDecimalRes}

      fuelTrim7Table      = array,  U08,   288,[6x6],     "%",    1.0,    -128,  -50,     50,         0
      fuelTrim7rpmBins    = array,  U08,   324,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim7loadBins   = array,  U08,   330,[  6],     { bitStringValue(algorithmUnits ,  algorithm) }, {fuelLoadRes},      0.0,   0.0,   {fuelLoadMax},      {fuelDecimalRes}

      fuelTrim8Table      = array,  U08,   336,[6x6],     "%",    1.0,    -128,  -50,     50,         0
      fuelTrim8rpmBins    = array,  U08,   372,[  6],     "RPM",  100.0,  0.0,   0,     25500,      0
      fuelTrim8loadBins   = array,  U08,   378,[  6],     { bitStringValue(algorithmUnits ,  algorithm) }, {fuelLoadRes},      0.0,   0.0,   {fuelLoadMax},      {fuelDecimalRes}

;--------------------------------------------------
;CANBUS control and Axillary IO(Page 9)
;--------------------------------------------------
page = 9
      enable_secondarySerial    = bits,   U08,     0, [0:0], "Disable", "Enable"
      intcan_available          = bits,   U08,     0, [1:1], "Disable", "Enable"
      enable_intcan             = bits,   U08,     0, [2:2], "Disable", "Enable"
      secondarySerialProtocol   = bits,   U08,     0, [3:6], "Generic (Fixed List)". "Generic (ini File)". "CAN", "msDroid", "Real Dash", "Tuner Studio", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    
      caninput_sel0a            = bits,   U08,     1, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel0b            = bits,   U08,     1, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel0extsourcea   = bits,   U08,     1, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel0extsourceb   = bits,   U08,     1, [6:6], "Via Secondary Serial", "Via Internal CAN"        
      caninput_sel0extsourcec   = bits,   U08,     1, [7:7], "INVALID", "Via Internal CAN"

      caninput_sel1a            = bits,   U08,     2, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel1b            = bits,   U08,     2, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel1extsourcea   = bits,   U08,     2, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel1extsourceb   = bits,   U08,     2, [6:6], "Via Secondary Serial", "Via Internal CAN"       
      caninput_sel1extsourcec   = bits,   U08,     2, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel2a            = bits,   U08,     3, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel2b            = bits,   U08,     3, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel2extsourcea   = bits,   U08,     3, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel2extsourceb   = bits,   U08,     3, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel2extsourcec   = bits,   U08,     3, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel3a            = bits,   U08,     4, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel3b            = bits,   U08,     4, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel3extsourcea   = bits,   U08,     4, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel3extsourceb   = bits,   U08,     4, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel3extsourcec   = bits,   U08,     4, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel4a            = bits,   U08,     5, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel4b            = bits,   U08,     5, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel4extsourcea   = bits,   U08,     5, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel4extsourceb   = bits,   U08,     5, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel4extsourcec   = bits,   U08,     5, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel5a            = bits,   U08,     6, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel5b            = bits,   U08,     6, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel5extsourcea   = bits,   U08,     6, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel5extsourceb   = bits,   U08,     6, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel5extsourcec   = bits,   U08,     6, [7:7], "INVALID", "Via Internal CAN"        

      caninput_sel6a            = bits,   U08,     7, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel6b            = bits,   U08,     7, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel6extsourcea   = bits,   U08,     7, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel6extsourceb   = bits,   U08,     7, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel6extsourcec   = bits,   U08,     7, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel7a            = bits,   U08,     8, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel7b            = bits,   U08,     8, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel7extsourcea   = bits,   U08,     8, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel7extsourceb   = bits,   U08,     8, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel7extsourcec   = bits,   U08,     8, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel8a            = bits,   U08,     9, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel8b            = bits,   U08,     9, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel8extsourcea   = bits,   U08,     9, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel8extsourceb   = bits,   U08,     9, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel8extsourcec   = bits,   U08,     9, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel9a            = bits,   U08,     10, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel9b            = bits,   U08,     10, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel9extsourcea   = bits,   U08,     10, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel9extsourceb   = bits,   U08,     10, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel9extsourcec   = bits,   U08,     10, [7:7], "INVALID", "Via Internal CAN"    
  
      caninput_sel10a           = bits,   U08,     11, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel10b           = bits,   U08,     11, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel10extsourcea  = bits,   U08,     11, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel10extsourceb  = bits,   U08,     11, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel10extsourcec  = bits,   U08,     11, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel11a           = bits,   U08,     12, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel11b           = bits,   U08,     12, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel11extsourcea  = bits,   U08,     12, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel11extsourceb  = bits,   U08,     12, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel11extsourcec  = bits,   U08,     12, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel12a           = bits,   U08,     13, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel12b           = bits,   U08,     13, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel12extsourcea  = bits,   U08,     13, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel12extsourceb  = bits,   U08,     13, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel12extsourcec  = bits,   U08,     13, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel13a           = bits,   U08,     14, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel13b           = bits,   U08,     14, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel13extsourcea  = bits,   U08,     14, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel13extsourceb  = bits,   U08,     14, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel13extsourcec  = bits,   U08,     14, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel14a           = bits,   U08,     15, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel14b           = bits,   U08,     15, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel14extsourcea  = bits,   U08,     15, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel14extsourceb  = bits,   U08,     15, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel14extsourcec  = bits,   U08,     15, [7:7], "INVALID", "Via Internal CAN"    

      caninput_sel15a           = bits,   U08,     16, [0:1], "Off", "INVALID", "Analog_local", "Digital_local"
      caninput_sel15b           = bits,   U08,     16, [2:3], "Off", "External Source", "Analog_local", "Digital_local"
      caninput_sel15extsourcea  = bits,   U08,     16, [5:5], "Via Secondary Serial", "INVALID"
      caninput_sel15extsourceb  = bits,   U08,     16, [6:6], "Via Secondary Serial", "Via Internal CAN"
      caninput_sel15extsourcec  = bits,   U08,     16, [7:7], "INVALID", "Via Internal CAN"    
          
      caninput_source_can_address0 = bits,   U16,     17,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address1 = bits,   U16,     19,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address2 = bits,   U16,     21,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address3 = bits,   U16,     23,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address4 = bits,   U16,     25,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address5 = bits,   U16,     27,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address6 = bits,   U16,     29,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address7 = bits,   U16,     31,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address8 = bits,   U16,     33,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address9 = bits,   U16,     35,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address10 = bits,  U16,     37,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address11 = bits,  U16,     39,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address12 = bits,  U16,     41,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address13 = bits,  U16,     43,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address14 = bits,  U16,     45,         [0:15], $CAN_ADDRESS_HEX
      caninput_source_can_address15 = bits,  U16,     47,         [0:15], $CAN_ADDRESS_HEX

      caninput_source_start_byte0 = scalar, U08,     49,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte1 = scalar, U08,     50,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte2 = scalar, U08,     51,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte3 = scalar, U08,     52,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte4 = scalar, U08,     53,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte5 = scalar, U08,     54,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte6 = scalar, U08,     55,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte7 = scalar, U08,     56,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte8 = scalar, U08,     57,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte9 = scalar, U08,     58,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte10 = scalar, U08,     59,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte11 = scalar, U08,     60,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte12 = scalar, U08,     61,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte13 = scalar, U08,     62,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte14 = scalar, U08,     63,  "",       1, 0, 0, 7, 0
      caninput_source_start_byte15 = scalar, U08,     64,  "",       1, 0, 0, 7, 0

      caninput_source_num_bytes0 = bits,    U16,     65, [0:0], "1", "2"
      caninput_source_num_bytes1 = bits,    U16,     65, [1:1], "1", "2"
      caninput_source_num_bytes2 = bits,    U16,     65, [2:2], "1", "2"
      caninput_source_num_bytes3 = bits,    U16,     65, [3:3], "1", "2"
      caninput_source_num_bytes4 = bits,    U16,     65, [4:4], "1", "2"
      caninput_source_num_bytes5 = bits,    U16,     65, [5:5], "1", "2"
      caninput_source_num_bytes6 = bits,    U16,     65, [6:6], "1", "2"
      caninput_source_num_bytes7 = bits,    U16,     65, [7:7], "1", "2"
      caninput_source_num_bytes8 = bits,    U16,     65, [8:8], "1", "2"
      caninput_source_num_bytes9 = bits,    U16,     65, [9:9], "1", "2"
      caninput_source_num_bytes10 = bits,   U16,     65, [10:10], "1", "2"
      caninput_source_num_bytes11 = bits,   U16,     65, [11:11], "1", "2"
      caninput_source_num_bytes12 = bits,   U16,     65, [12:12], "1", "2"
      caninput_source_num_bytes13 = bits,   U16,     65, [13:13], "1", "2"
      caninput_source_num_bytes14 = bits,   U16,     65, [14:14], "1", "2"
      caninput_source_num_bytes15 = bits,   U16,     65, [15:15], "1", "2"      
      caninputEndianess           = bits,   U08,     67, [0:0], "Big-Endian", "Little-Endian"      
     
      unused10_68         = scalar, U08,     68,        "",       1, 0, 0, 255, 0
  
      enable_intcandata_out  = bits,   U08,     69, [0:0], "Off", "On"
      canoutput_sel0       = bits,   U08,    70, [0:0], "Off", "On"
      canoutput_sel1       = bits,   U08,    71, [0:0], "Off", "On"
      canoutput_sel2       = bits,   U08,    72, [0:0], "Off", "On"
      canoutput_sel3       = bits,   U08,    73, [0:0], "Off", "On"
      canoutput_sel4       = bits,   U08,    74, [0:0], "Off", "On"
      canoutput_sel5       = bits,   U08,    75, [0:0], "Off", "On"
      canoutput_sel6       = bits,   U08,    76, [0:0], "Off", "On"
      canoutput_sel7       = bits,   U08,    77, [0:0], "Off", "On"
      canoutput_param_group  = array ,  U16,   78,      [  8],  "",    1, 0, 0, 65535, 0
      canoutput_param_start_byte0 = bits,   U08,     94, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte1 = bits,   U08,     95, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte2 = bits,   U08,     96, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte3 = bits,   U08,     97, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte4 = bits,   U08,     98, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte5 = bits,   U08,     99, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte6 = bits,   U08,     100, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_start_byte7 = bits,   U08,     101, [0:2], "0", "1", "2", "3", "4", "5", "6", "7"
      canoutput_param_num_bytes0 = bits,   U08,     102, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes1 = bits,   U08,     103, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes2 = bits,   U08,     104, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes3 = bits,   U08,     105, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes4 = bits,   U08,     106, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes5 = bits,   U08,     107, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes6 = bits,   U08,     108, [0:1], "INVALID", "1", "2", "INVALID"
      canoutput_param_num_bytes7 = bits,   U08,     109, [0:1], "INVALID", "1", "2", "INVALID"
      
      unused10_110         = scalar, U08,     110,        "",       1, 0, 0, 255, 0 
      unused10_111         = scalar, U08,     111,        "",       1, 0, 0, 255, 0
      egoMAPMax = scalar, U08, 112, "kPa", 2.0, 0.0, 2.0, 511.0, 0
      egoMAPMin = scalar, U08, 113, "kPa", 2.0, 0.0, 2.0, 511.0, 0

      speeduino_tsCanId     = bits,   U08,    114,     [0:3],  $tsCanId_list
      true_address           = bits,   U16,     115,     [0:15], $CAN_ADDRESS_HEX
      realtime_base_address  = bits,   U16,     117,     [0:15], $CAN_ADDRESS_HEX
      obd_address            = bits,   U16,     119,       [0:15], $CAN_ADDRESS_HEX

#if mcu_teensy
      Auxin0pina        = bits,   U08,    121,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin1pina        = bits,   U08,    122,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin2pina        = bits,   U08,    123,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin3pina        = bits,   U08,    124,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin4pina        = bits,   U08,    125,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin5pina        = bits,   U08,    126,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin6pina        = bits,   U08,    127,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin7pina        = bits,   U08,    128,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin8pina        = bits,   U08,    129,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin9pina        = bits,   U08,    130,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin10pina       = bits,   U08,    131,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin11pina       = bits,   U08,    132,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin12pina       = bits,   U08,    133,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin13pina       = bits,   U08,    134,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin14pina       = bits,   U08,    135,     [0:5],  $ANALOG_PIN_TEENSY
      Auxin15pina       = bits,   U08,    136,     [0:5],  $ANALOG_PIN_TEENSY

      Auxin0pinb        = bits,   U08,    137,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin1pinb        = bits,   U08,    138,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin2pinb        = bits,   U08,    139,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin3pinb        = bits,   U08,    140,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin4pinb        = bits,   U08,    141,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin5pinb        = bits,   U08,    142,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin6pinb        = bits,   U08,    143,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin7pinb        = bits,   U08,    144,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin8pinb        = bits,   U08,    145,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin9pinb        = bits,   U08,    146,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin10pinb       = bits,   U08,    147,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin11pinb       = bits,   U08,    148,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin12pinb       = bits,   U08,    149,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin13pinb       = bits,   U08,    150,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin14pinb       = bits,   U08,    151,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
      Auxin15pinb       = bits,   U08,    152,     [0:5],  $DIGITAL_AUX_PIN_TEENSY
#elif mcu_stm32
      Auxin0pina        = bits,   U08,    121,     [0:5],  $ANALOG_PIN_STM32
      Auxin1pina        = bits,   U08,    122,     [0:5],  $ANALOG_PIN_STM32
      Auxin2pina        = bits,   U08,    123,     [0:5],  $ANALOG_PIN_STM32
      Auxin3pina        = bits,   U08,    124,     [0:5],  $ANALOG_PIN_STM32
      Auxin4pina        = bits,   U08,    125,     [0:5],  $ANALOG_PIN_STM32
      Auxin5pina        = bits,   U08,    126,     [0:5],  $ANALOG_PIN_STM32
      Auxin6pina        = bits,   U08,    127,     [0:5],  $ANALOG_PIN_STM32
      Auxin7pina        = bits,   U08,    128,     [0:5],  $ANALOG_PIN_STM32
      Auxin8pina        = bits,   U08,    129,     [0:5],  $ANALOG_PIN_STM32
      Auxin9pina        = bits,   U08,    130,     [0:5],  $ANALOG_PIN_STM32
      Auxin10pina       = bits,   U08,    131,     [0:5],  $ANALOG_PIN_STM32
      Auxin11pina       = bits,   U08,    132,     [0:5],  $ANALOG_PIN_STM32
      Auxin12pina       = bits,   U08,    133,     [0:5],  $ANALOG_PIN_STM32
      Auxin13pina       = bits,   U08,    134,     [0:5],  $ANALOG_PIN_STM32
      Auxin14pina       = bits,   U08,    135,     [0:5],  $ANALOG_PIN_STM32
      Auxin15pina       = bits,   U08,    136,     [0:5],  $ANALOG_PIN_STM32

      Auxin0pinb        = bits,   U08,    137,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin1pinb        = bits,   U08,    138,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin2pinb        = bits,   U08,    139,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin3pinb        = bits,   U08,    140,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin4pinb        = bits,   U08,    141,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin5pinb        = bits,   U08,    142,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin6pinb        = bits,   U08,    143,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin7pinb        = bits,   U08,    144,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin8pinb        = bits,   U08,    145,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin9pinb        = bits,   U08,    146,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin10pinb       = bits,   U08,    147,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin11pinb       = bits,   U08,    148,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin12pinb       = bits,   U08,    149,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin13pinb       = bits,   U08,    150,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin14pinb       = bits,   U08,    151,     [0:5],  $DIGITAL_AUX_PIN_STM32
      Auxin15pinb       = bits,   U08,    152,     [0:5],  $DIGITAL_AUX_PIN_STM32
#else
      Auxin0pina        = bits,   U08,    121,     [0:5],  $ANALOG_PIN_MEGA
      Auxin1pina        = bits,   U08,    122,     [0:5],  $ANALOG_PIN_MEGA
      Auxin2pina        = bits,   U08,    123,     [0:5],  $ANALOG_PIN_MEGA
      Auxin3pina        = bits,   U08,    124,     [0:5],  $ANALOG_PIN_MEGA
      Auxin4pina        = bits,   U08,    125,     [0:5],  $ANALOG_PIN_MEGA
      Auxin5pina        = bits,   U08,    126,     [0:5],  $ANALOG_PIN_MEGA
      Auxin6pina        = bits,   U08,    127,     [0:5],  $ANALOG_PIN_MEGA
      Auxin7pina        = bits,   U08,    128,     [0:5],  $ANALOG_PIN_MEGA
      Auxin8pina        = bits,   U08,    129,     [0:5],  $ANALOG_PIN_MEGA
      Auxin9pina        = bits,   U08,    130,     [0:5],  $ANALOG_PIN_MEGA
      Auxin10pina       = bits,   U08,    131,     [0:5],  $ANALOG_PIN_MEGA
      Auxin11pina       = bits,   U08,    132,     [0:5],  $ANALOG_PIN_MEGA
      Auxin12pina       = bits,   U08,    133,     [0:5],  $ANALOG_PIN_MEGA
      Auxin13pina       = bits,   U08,    134,     [0:5],  $ANALOG_PIN_MEGA
      Auxin14pina       = bits,   U08,    135,     [0:5],  $ANALOG_PIN_MEGA
      Auxin15pina       = bits,   U08,    136,     [0:5],  $ANALOG_PIN_MEGA

      Auxin0pinb        = bits,   U08,    137,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin1pinb        = bits,   U08,    138,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin2pinb        = bits,   U08,    139,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin3pinb        = bits,   U08,    140,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin4pinb        = bits,   U08,    141,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin5pinb        = bits,   U08,    142,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin6pinb        = bits,   U08,    143,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin7pinb        = bits,   U08,    144,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin8pinb        = bits,   U08,    145,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin9pinb        = bits,   U08,    146,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin10pinb       = bits,   U08,    147,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin11pinb       = bits,   U08,    148,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin12pinb       = bits,   U08,    149,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin13pinb       = bits,   U08,    150,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin14pinb       = bits,   U08,    151,     [0:5],  $DIGITAL_AUX_PIN_MEGA
      Auxin15pinb       = bits,   U08,    152,     [0:5],  $DIGITAL_AUX_PIN_MEGA
#endif

      iacStepperInv       = bits,   U08,   153, [0:0], "No",        "Yes"
      iacCoolTime         = bits,   U08,   153, [1:3], "0", "1", "2", "3", "4", "5", "6","INVALID"

      boostByGearEnabled  = bits,   U08,   153, [4:5],      "Off", "Multiplied %", "Constant limit", "INVALID"

      blankfield          = bits,   U08,   153, [6:6], "",""
      iacStepperPower     = bits,   U08,   153, [7:7], "When Active", "Always"
      
      iacMaxSteps         = scalar, U08,     154,     "Steps",     3,    0,  0,  {iacStepHome-3},    0
      idleAdvStartDelay   = scalar, U08,     155,         "S",   0.1,  0.0,   0.0,    25.5,          1

      boostByGear1               = scalar, U08,     156, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0
      boostByGear2               = scalar, U08,     157, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0
      boostByGear3               = scalar, U08,     158, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0
      boostByGear4               = scalar, U08,     159, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0
      boostByGear5               = scalar, U08,     160, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0
      boostByGear6               = scalar, U08,     161, { bitStringValue(boostByGearLabels ,  boostByGearEnabled) },   2.0,   0.0,  0.0,  {boostTableLimit},      0

      PWMFanDuty                 = array,  U08,     162, [4],       "%", 0.5,    0,    0,    100,      1

      hardRevMode       = bits,   U08,     166, [0:1], "Off", "Fixed", "Coolant based", "INVALID"      
      coolantProtRPM    = array,  U08,     167, [6], "RPM",     100.0,       0.0,   100.0, 25500,    0           
      #if CELSIUS
      coolantProtTemp   = array,  U08,      173, [6],    "C",    1.0,    -40,    -40,    215,      0
      #else
      coolantProtTemp   = array,  U08,      173, [6],    "F",    1.8, -22.23,    -40,    419,      0
      #endif

      unused10_179               = scalar, U08, 179,        "",       1, 0, 0, 255, 0 

      dfcoTaperTime              = scalar, U08, 180, "S",      0.1,  0.0,  0.0,  25.5,   1
      dfcoTaperFuel              = scalar, U08, 181, "%",      1.0,  0.0,    0,   255,   0
      dfcoTaperAdvance           = scalar, U08, 182, "deg",    1.0,  0.0,    0,    40,   0
      dfcoTaperEnable            = bits,   U08, 183, [0:0],   "Off", "On"
      unused10_182               = bits,   U08, 183, [1:7],     ""

      unused10_184               = scalar, U08, 184,        "",       1, 0, 0, 255, 0 

      ; AFR engine protection
      afrProtectEnabled         = bits, U08, 185, [0:1], "Off", "Fixed mode", "Table mode", "INVALID"
      afrProtectMAP             = scalar, U08, 186, "kPa", 2.0, 0.0, 0.0, 511.0, 0      ; 8 bit value, 1 byte
      afrProtectRPM             = scalar, U08, 187, "RPM", 100, 0.0, 100, 25500, 0      ; 8 bit value, 1 byte
      afrProtectTPS             = scalar, U08, 188, "%", 0.5, 0.0, 0.0, 100.0, 1     ; 8 bit value, 1 byte
      afrProtectDeviationLambda = scalar, U08, 189, "Lambda", 0.1, 0.0, 0.00, 25.5, 3    ; 8 bit value, 1 byte
      afrProtectDeviation       = scalar, U08, lastOffset, "AFR", 0.1, 0.0, 0.0, 25.5, 1       ; 8 bit value, 1 byte
      afrProtectCutTime         = scalar, U08, 190, "seconds", 0.1, 0.0, 0.0, 2.5, 1        ; 8 bit value, 1 byte
      afrProtectReactivationTPS = scalar, U08, 191, "%", 0.5, 0.0, 0.0, 100.0, 1     ; 8 bit value, 1 byte
    
page = 10
#if CELSIUS
      crankingEnrichBins  = array,  U08,       0, [4],  "C",        1.0,    -40,    -40,    215,      0
#else
      crankingEnrichBins  = array,  U08,       0, [4],  "F",        1.8,    -22.23,    -40,    419,      0
#endif
      crankingEnrichValues= array,  U08,       4, [4],  "%",        5.0,    0.0,  0,    1275,        0 ; Values for the cranking enrichment curve

      rotaryType          = bits ,  U08,       8, [0:1],           "FC", "FD", "RX8", "INVALID"
      stagingEnabled      = bits ,  U08,       8, [2:2],           "Off","On"
      stagingMode         = bits ,  U08,       8, [3:3],           "Table","Automatic"
      EMAPPin             = bits,   U08,       8, [4:7],      "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15"

      rotarySplitValues   = array,  U08,       9, [8],   "degrees", 1.0,    0.0,   0.0,     40,         0
      rotarySplitBins     = array,  U08,      17, [8],     { bitStringValue(algorithmUnits ,  ignAlgorithm) },     {ignLoadRes},      0.0,   0.0,   {ignLoadMax},      {ignDecimalRes}

      boostIntv           = scalar, U08,      25,      "ms",     1, 0,  0,  250, 0
      boostSens           = scalar, U16,      26,      "",       1, 0, 0, 5000, 0
      stagedInjSizePri    = scalar, U16,      28,      "cc/min",       1, 0, 0, 1500, 0
      stagedInjSizeSec    = scalar, U16,      30,      "cc/min",       1, 0, 0, 1500, 0
      

      ; START TRANSMISSION MOD
      ;flexBoostBins       = array,  U08,      32, [6], "%",    1.0,       0.0,   0.0,     250.0,    0
      ; The boost range is obviously arbitrary since int16_t has ~32k in both directions
      ;flexBoostAdj        = array,  S16,      38, [6], "kPa",  1.0,       0.0,   -500.0,  500.0,    0
      ;flexFuelBins        = array,  U08,      50, [6], "%",    1.0,       0.0,   0.0,     250.0,    0
      ;flexFuelAdj         = array,  U08,      56, [6], "%",    1.0,       0.0,   0.0,     250.0,    0
      ;flexAdvBins         = array,  U08,      62, [6], "%",    1.0,       0.0,   0.0,     250.0,    0
      ;flexAdvAdj          = array,  U08,      68, [6], "Deg",  1.0,       -40,   -40,     215.0,    0


      ; THESE ARE USED FOR GEARST 2/3
      flexBoostBins = array,  U08,      32, [6], "%",  1.0,       0.0,   0.0,     100.0,    0
      ;flexBoostAdj  = array,  U08,     38, [6], "km/h",      1.0,    0.0,   0,     100,      0
      flexBoostAdj        = array,  S16,      38, [6], "kPa",  1.0,       0.0,   -500.0,  500.0,    0
      flexFuelBins    = array,  U08,     50, [6], "km/h",      1.0,    0.0,   0,       100,      0 

      ; THESE ARE USED FOR GEARS 3/4
      flexFuelAdj = array,  U08,      56, [6], "%",  1.0,       0.0,   0.0,     100.0,    0
      flexAdvBins  = array,  U08,     62, [6], "km/h",      1.0,    0.0,   0,     100,      0
      flexAdvAdj    = array,  U08,     68, [6], "km/h",      1.0,    0.0,   0,       100,      0 




      ; END TRANSMISSION MOD

      lnchCtrlTPS         = scalar, U08,      74,      "%TPS",       0.5, 0, 0, 100.0, 1
      n2o_enable          = bits ,  U08,      75, [0:1],           "Off","1 Stage","2 stage", "INVALID"
      n2o_arming_pin      = bits ,  U08,      75, [2:7],           $IO_Pins_no_def
#if CELSIUS
      n2o_minCLT          = scalar, U08,      76,      "C",        1.0,    -40,    -40,    215,      0
#else
      n2o_minCLT          = scalar, U08,      76,      "F",        1.8,    -22.23,    -40,    419,      0
#endif
      n2o_maxMAP          = scalar, U08,      77,      "kPa",      2.0,   0.0,  0.0,  511.0,      0
      n2o_minTPS          = scalar, U08,      78,      "%TPS",     0.5,   0.0,  0.0,  100.0,      1

      n2o_maxAFR          = scalar, U08,         79,    "AFR",     0.1          , 0, 0,  25.5          , 1
      n2o_maxLambda       = scalar, U08, lastOffset, "Lambda",    0.1, 0, 0, 25.5, 3

      n2o_stage1_pin      = bits ,  U08,      80, [0:5],           $IO_Pins_no_def
      n2o_pin_polarity    = bits ,  U08,      80, [6:6],           "HIGH", "LOW"
      n2o_unused          = bits ,  U08,      80, [7:7],           "No", "Yes"
      n2o_stage1_minRPM   = scalar, U08,      81,      "RPM",       100,       0.0,   1000,    10000,    0
      n2o_stage1_maxRPM   = scalar, U08,      82,      "RPM",       100,       0.0,   1000,    10000,    0
      n2o_stage1_adderMin = scalar, U08,      83,      "ms",        0.1,       0,        0,     25.5,    1
      n2o_stage1_adderMax = scalar, U08,      84,      "ms",        0.1,       0,        0,     25.5,    1
      n2o_stage1_retard   = scalar, U08,      85,      "Deg",       1.0,       0.0,   0.0,     40.0,    0

      n2o_stage2_pin      = bits ,  U08,      86, [0:5],           $IO_Pins_no_def
      n2o_stage2_unused   = bits ,  U08,      86, [6:7],           "No", "Yes", "INVALID", "INVALID"
      n2o_stage2_minRPM   = scalar, U08,      87,      "RPM",       100,       0.0,   1000,    10000,    0
      n2o_stage2_maxRPM   = scalar, U08,      88,      "RPM",       100,       0.0,   1000,    10000,    0
      n2o_stage2_adderMin = scalar, U08,      89,      "ms",        0.1,       0,        0,       32,    1
      n2o_stage2_adderMax = scalar, U08,      90,      "ms",        0.1,       0,        0,       32,    1
      n2o_stage2_retard   = scalar, U08,      91,      "Deg",       1.0,       0.0,   0.0,     40.0,    0
      
      ; Knock settings
      knock_mode          = bits ,  U08,      92, [0:1],           "Off","Digital","Analog", "INVALID"
      knock_pin           = bits ,  U08,      92, [2:7],           "INVALID", "INVALID", "2", "3", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "18", "19", "20", "21", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"

      knock_trigger       = bits ,  U08,      93, [0:0],           "HIGH", "LOW"
      knock_pullup        = bits ,  U08,      93, [1:1],           "Off", "Internal pullup"
      knock_unused1       = bits ,  U08,      93, [2:2],           "No", "Yes"
      knock_unused2       = bits ,  U08,      93, [3:4],           "INVALID", "1", "2", "3"

      ;Knock detection / filters
      knock_count         = bits ,  U08,      93, [5:7],           "INVALID", "1", "2", "3", "4", "5", "6", "7"
      knock_threshold     = scalar, U08,      94,      "Volts",    0.0196,    0.0,  0.0,  4.99,      2 ;The multiplier here translates 0-5v into 0 to 255
      knock_maxMAP        = scalar, U08,      95,      "kPa",      2.0,    0.0,  0.0,  511.0,        0
      knock_maxRPM        = scalar, U08,      96,      "RPM",      100.0,  0.0,   0,     10000,      0
      
      ; START TRANSMISSION MOD
      ; Changed RPMs to kPA for shift
      ; Change angle and duration to kPH for speed
      ; variable = parameter, type, offset, units, shape, scale, translate, min, max, digits
      ; SPEED = scalar, U08,      191,      "KPh",         1, 0, 0, 255, 0
      ;knock_window_rpms   = array,  U08,      97, [6], "RPM",      100.0,  0.0,   0,     10000,      0
      ;knock_window_angle  = array,  U08,     103, [6], "deg",      1.0,    -50,   -50,     100,      0
      ;knock_window_dur    = array,  U08,     109, [6], "deg",      1.0,    0.0,   0,       100,      0 ;Knock window duration
      ; THESE ARE USED FOR GEARS 1/2
      knock_window_rpms = array,  U08,      97, [6], "%",  1.0,       0.0,   0.0,     100.0,    0
      knock_window_angle  = array,  U08,     103, [6], "km/h",      1.0,    0.0,   0,     100,      0
      knock_window_dur    = array,  U08,     109, [6], "km/h",      1.0,    0.0,   0,       100,      0 
      ; END TRANSMISSION MOD

      ;Retard and recovery
      knock_maxRetard     = scalar, U08,     115,      "Deg",      1.0,       0.0,   0.0,     50,    0
      knock_firstStep     = scalar, U08,     116,      "Deg",      1.0,       0.0,   0.0,     50,    0
      knock_stepSize      = scalar, U08,     117,      "Deg",      1.0,       0.0,   0.0,     50,    0
      knock_stepTime      = scalar, U08,     118,      "ms",       1.0,       0.0,   0.0,     255,   0
      
      knock_duration      = scalar, U08,     119,      "Sec",      0.1,       0.0,   0.1,     2.5,   1 ;//Time after knock retard starts that it should start recovering
      knock_recoveryStepTime  = scalar, U08, 120,      "Sec",      0.1,       0.0,   0.1,     2.5,   1
      knock_recoveryStep  = scalar, U08,     121,      "Deg",      1.0,       0.0,   1.0,     50,    0

      ;Things for the 2nd fuel table
      fuel2Algorithm      = bits,   U08,     122, [0:2], $loadSourceNames
      fuel2Mode           = bits,   U08,     122, [3:5], "Off", "Multiplied %", "Added", "Switched - Conditional", "Switched - Input based","INVALID","INVALID","INVALID"
      fuel2SwitchVariable = bits,   U08,     122, [6:7], "RPM", "MAP", "TPS", "ETH%"
      fuel2SwitchValue    = scalar, U16,     123, { bitStringValue(fuel2SwitchUnits,  fuel2SwitchVariable) },    {(fuel2SwitchVariable == 2) ? 0.5 : 1.0},       0.0,   0.0,     9000,    {(fuel2SwitchVariable == 2) ? 1 : 0}
      fuel2InputPin       = bits ,  U08,     125, [0:5],           $IO_Pins_no_def
      fuel2InputPolarity  = bits ,  U08,     125, [6:6],           "LOW", "HIGH"
      fuel2InputPullup    = bits ,  U08,     125, [7:7],           "No", "Yes"

      ;All related to the closed loop VVT control
      vvtCLholdDuty       = scalar, U08,     126,      "%",        0.5,     0.0,    0.0,  100.0,      1
      vvtCLKP             = scalar, U08,     127,      "%",        0.03125, 0.0,    0.0,   7.96,      2 ; * (  1 byte)
      vvtCLKI             = scalar, U08,     128,      "%",        0.03125, 0.0,    0.0,   7.96,      2 ; * (  1 byte)
      vvtCLKD             = scalar, U08,     129,      "%",        0.00781, 0.0,    0.0,   1.99,      3 ; * (  1 byte)
      vvtCL0DutyAng       = scalar, S16,     130,    "deg",        1.0,     0.0, -360.0,  360.0,      0 ; * (  2 bytes)
      vvtCLMinAng         = scalar, U08,     132,    "deg",        0.5,     0.0,    0.0,  100.0,      0 ; * (  1 byte)
      vvtCLMaxAng         = scalar, U08,     133,    "deg",        0.5,     0.0,    0.0,  100.0,      0 ; * (  1 byte)

      crankingEnrichTaper = scalar,  U08,    134,  "s",  0.1,      0.0,  0.0,     25.5,    1

      ;Pressure transducers
      fuelPressureEnable  = bits,   U08,     135, [0:0], "Off", "On"
      oilPressureEnable   = bits,   U08,     135, [1:1], "Off", "On"
      oilPressureProtEnbl = bits,   U08,     135, [2:2], "Off", "On"
      oilPressurePin      = bits,   U08,     135, [3:7], "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "A16", "A17", "A18", "A19", "A20", "A21", "A22", INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID
      fuelPressurePin     = bits,   U08,     136, [0:4], "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "A16", "A17", "A18", "A19", "A20", "A21", "A22", INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID
      
    #if pressure_bar
      fuelPressureMin     = scalar, S08,     137,        "BAR",       0.0698,    0.0,  -7.0,     8.9,    2 ;Note signed int
      fuelPressureMax     = scalar, U08,     138,        "BAR",       0.0698,    0.0,   0.0,     17.8,   2
      oilPressureMin      = scalar, S08,     139,        "BAR",       0.0698,    0.0,  -7.0,     8.9,    2 ;Note signed int
      oilPressureMax      = scalar, U08,     140,        "BAR",       0.0698,    0.0,   0.0,     17.8,   2
      oilPressureProtMins = array,  U08,     145, [  4], "BAR",       0.0698,    0.0,   0.0,     17.8,   2
    #else
      fuelPressureMin     = scalar, S08,     137,        "psi",       1.0,       0.0,  -100,     127,    0 ;Note signed int
      fuelPressureMax     = scalar, U08,     138,        "psi",       1.0,       0.0,   0.0,     255,    0
      oilPressureMin      = scalar, S08,     139,        "psi",       1.0,       0.0,  -100,     127,    0 ;Note signed int
      oilPressureMax      = scalar, U08,     140,        "psi",       1.0,       0.0,   0.0,     255,    0
      oilPressureProtMins = array,  U08,     145, [  4], "psi",       1.0,       0.0,   0.0,     255,    0
    #endif
      oilPressureProtRPM  = array,  U08,     141, [  4], "RPM",     100.0,       0.0,   100.0, 25500,    0
      
      wmiEnabled          = bits,   U08,     149, [0:0], "Off", "On"
      wmiMode             = bits,   U08,     149, [1:2], "Simple", "Proportional", "Openloop", "Closedloop"

      wmiAdvEnabled   = bits,   U08,     149, [7:7], "Off", "On" 

      wmiTPS              = scalar, U08,     150,        "%TPS",     0.5,    0.0,    0.0,   100.0,  1
      wmiRPM              = scalar, U08,     151,        "RPM",      100.0,  0.0,    0,     10000,  0
      wmiMAP              = scalar, U08,     152,        "kPa",      2.0,    0.0,    0.0,   511.0,  0
      wmiMAP2             = scalar, U08,     153,        "kPa",      2.0,    0.0,    0.0,   511.0,  0
#if CELSIUS
      wmiIAT              = scalar, U08,     154,        "C",        1.0,    -40,    -40,   215,    0
#else
      wmiIAT              = scalar, U08,     154,        "F",        1.8,    -22.23, -40,   419,    0
#endif
      wmiOffset           = scalar, S08,     155,        "ms",      1.0,    0.0,    -12.7,  12.7,    0 ;Note signed int

      wmiIndicatorEnabled  = bits,   U08,     156, [0:0], "Off", "On" 
      wmiIndicatorPin      = bits,   U08,     156, [1:6], "Board Default", $DIGITAL_PIN
      wmiIndicatorPolarity = bits ,  U08,     156, [7:7], "Normal", "Inverted"

      wmiEmptyEnabled  = bits,   U08,     157, [0:0], "Off", "On" 
      wmiEmptyPin      = bits,   U08,     157, [1:6], "Board Default", $DIGITAL_PIN
      wmiEmptyPolarity = bits ,  U08,     157, [7:7], "Normal", "Inverted"

      wmiEnabledPin   = bits,   U08,     158, [0:5], "Board Default", $DIGITAL_PIN

      wmiAdvBins      = array,  U08,      159, [6], "kPa",  2.0,       0.0,   0.0,     511.0,    0
      wmiAdvAdj       = array,  U08,      165, [6], "Deg",  1.0,       -40,   -40,     40.0,    0

      vvtCLminDuty        = scalar, U08,     171,        "%",        0.5,       0.0,   0.0,     100.0,    1 ; Minimum and maximum duty cycles when using closed loop
      vvtCLmaxDuty        = scalar, U08,     172,        "%",        0.5,       0.0,   0.0,     100.0,    1

      vvt2Pin             = bits  , U08,     173, [0:5], "Board Default", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
      vvt2Enabled         = bits,   U08,     173, [6:6], "Off", "On"
      TrigEdgeThrd        = bits,   U08,     173, [7:7], "RISING", "FALLING"

      ;Fuel temperature correction
      #if CELSIUS
      fuelTempBins        = array,  U08,      174, [6],    "C",    1.0,    -40,    -40,    215,      0
      #else
      fuelTempBins        = array,  U08,      174, [6],    "F",    1.8, -22.23,    -40,    419,      0
      #endif
      ;fuelTempValues      = array,  U08,      180, [6],    "%",    1.0,    0.0,      0,    255,      0
      ; TRANSMISSION MOD TESTING START  
      fuelTempValues = array,  U08,     180, [6], "km/h",      1.0,    0.0,   0,     100,      0
      ; TRANSMISSION MOD TESTING END  

      ;Things for the 2nd spark table
      spark2Algorithm      = bits,   U08,     186, [0:2], $loadSourceNames
      spark2Mode           = bits,   U08,     186, [3:5], "Off", "Multiplied %", "Added", "Switched - Conditional", "Switched - Input based","INVALID","INVALID","INVALID"
      spark2SwitchVariable = bits,   U08,     186, [6:7], "RPM", "MAP", "TPS", "ETH%"
      spark2SwitchValue    = scalar, U16,     187, { bitStringValue(fuel2SwitchUnits,  spark2SwitchVariable) },  {(spark2SwitchVariable == 2) ? 0.5 : 1.0},       0.0,   0.0,     9000,    {(spark2SwitchVariable == 2) ? 1 : 0}
      spark2InputPin       = bits ,  U08,     189, [0:5],           $IO_Pins_no_def
      spark2InputPolarity  = bits ,  U08,     189, [6:6],           "LOW", "HIGH"
      spark2InputPullup    = bits ,  U08,     189, [7:7],           "No", "Yes"

      oilPressureProtTime   = scalar, U08,    190, "seconds", 0.1, 0.0, 0.0, 25, 1

      lnchCtrlVss         = scalar, U08,      191,      "KPh",         1, 0, 0, 255, 0

;Page 11 is the fuel map and axis bins only
page = 11
  ;  name       = bits,   type,    offset, bits
  ;  name       = array,  type,    offset, shape, units,     scale, translate,    lo,      hi, digits
  ;  name       = scalar, type,    offset,        units,     scale, translate,    lo,      hi, digits
      veTable2      = array,  U08,       0, [16x16],"%",          1.0,      0.0,   0.0,   255.0,      0
      fuelRPM2Bins  = array,  U08,     256, [  16], "RPM",      100.0,      0.0,   0.0, 25500.0,      0
      fuelLoad2Bins = array,  U08,     272, [  16], { bitStringValue(algorithmUnits ,  fuel2Algorithm) }, {fuel2LoadRes},      0.0,   0.0,   { fuel2LoadMax },      {fuel2DecimalRes}


;--------------------------------------------------
;Water methanol injection and vvt2 maps (Page 12)
;--------------------------------------------------
page = 12
      wmiTable      = array,  U08,      0,[8x8],    "%",{wmiLoadRes},      0.0,   0.0,  {wmiLoadMax},   1
      rpmBinsWMI    = array,  U08,     64,[  8],   "RPM",      100.0,      0.0,   100,      25500,      0
      mapBinsWMI    = array,  U08,     72,[  8],   "kPa",        2.0,      0.0,   0.0,      511.0,      0
      vvt2Table     = array,  U08,     80,[8x8],     "%",        0.5,      0.0,     0,        100,      1
      rpmBinsVVT2   = array,  U08,    144,[  8],   "RPM",      100.0,      0.0,   100,      25500,      0
      loadBinsVVT2  = array,  U08,    152,[  8],   { bitStringValue(algorithmUnits ,  vvtLoadSource) }, {vvtLoadRes},        0.0,   0.0,     {vvtLoadMax},      {vvtDecimalRes}
      dwellTable    = array,  U08,    160,[4x4],    "ms",        0.1,      0.0,   0.1,        8.0,      1
      rpmBinsDwell  = array,  U08,    176,[  4],   "RPM",      100.0,      0.0,   100,      25500,      0
      loadBinsDwell  = array,  U08,    180,[  4],   { bitStringValue(algorithmUnits ,  ignAlgorithm) },     {ignLoadRes},      0.0,   0.0,   {ignLoadMax},      {ignDecimalRes}

;Page 13 is the programmable outputs
page = 13
      outputInverted0 = bits,     U08,    0,  [0:0],  "Active high",  "Active low"
      outputInverted1 = bits,     U08,    0,  [1:1],  "Active high",  "Active low"
      outputInverted2 = bits,     U08,    0,  [2:2],  "Active high",  "Active low"
      outputInverted3 = bits,     U08,    0,  [3:3],  "Active high",  "Active low"
      outputInverted4 = bits,     U08,    0,  [4:4],  "Active high",  "Active low"
      outputInverted5 = bits,     U08,    0,  [5:5],  "Active high",  "Active low"
      outputInverted6 = bits,     U08,    0,  [6:6],  "Active high",  "Active low"
      outputInverted7 = bits,     U08,    0,  [7:7],  "Active high",  "Active low"
      kindOfLimiting0 = bits,     U08,    1,  [0:0],  "Minimum",  "Maximum"
      kindOfLimiting1 = bits,     U08,    1,  [1:1],  "Minimum",  "Maximum"
      kindOfLimiting2 = bits,     U08,    1,  [2:2],  "Minimum",  "Maximum"
      kindOfLimiting3 = bits,     U08,    1,  [3:3],  "Minimum",  "Maximum"
      kindOfLimiting4 = bits,     U08,    1,  [4:4],  "Minimum",  "Maximum"
      kindOfLimiting5 = bits,     U08,    1,  [5:5],  "Minimum",  "Maximum"
      kindOfLimiting6 = bits,     U08,    1,  [6:6],  "Minimum",  "Maximum"
      kindOfLimiting7 = bits,     U08,    1,  [7:7],  "Minimum",  "Maximum"
      outputPin       = array,    U08,    2,  [  8], "",        1.0,     0.0,   0.0,    255.0,      0
          outputPin0  = bits,     U08,    2,  [0:7],  $comp_IO_Pins
          outputPin1  = bits,     U08,    3,  [0:7],  $comp_IO_Pins
          outputPin2  = bits,     U08,    4,  [0:7],  $comp_IO_Pins
          outputPin3  = bits,     U08,    5,  [0:7],  $comp_IO_Pins
          outputPin4  = bits,     U08,    6,  [0:7],  $comp_IO_Pins
          outputPin5  = bits,     U08,    7,  [0:7],  $comp_IO_Pins
          outputPin6  = bits,     U08,    8,  [0:7],  $comp_IO_Pins
          outputPin7  = bits,     U08,    9,  [0:7],  $comp_IO_Pins
      outputDelay     = array,    U08,   10,  [  8], "S",       0.1,     0.0,   0.0,     25.5,      1
      firstDataIn     = array,    U08,   18,  [  8], "",        1.0,     0.0,   0.0,     255.0,      0
          firstDataIn0= bits,     U08,   18,  [0:7], $fullStatus_def
          firstDataIn1= bits,     U08,   19,  [0:7], $fullStatus_def
          firstDataIn2= bits,     U08,   20,  [0:7], $fullStatus_def
          firstDataIn3= bits,     U08,   21,  [0:7], $fullStatus_def
          firstDataIn4= bits,     U08,   22,  [0:7], $fullStatus_def
          firstDataIn5= bits,     U08,   23,  [0:7], $fullStatus_def
          firstDataIn6= bits,     U08,   24,  [0:7], $fullStatus_def
          firstDataIn7= bits,     U08,   25,  [0:7], $fullStatus_def
      secondDataIn    = array,    U08,   26,  [  8], "",        1.0,     0.0,   0.0,      255.0,      0
          secondDataIn0= bits,     U08,   26,  [0:7], $fullStatus_def
          secondDataIn1= bits,     U08,   27,  [0:7], $fullStatus_def
          secondDataIn2= bits,     U08,   28,  [0:7], $fullStatus_def
          secondDataIn3= bits,     U08,   29,  [0:7], $fullStatus_def
          secondDataIn4= bits,     U08,   30,  [0:7], $fullStatus_def
          secondDataIn5= bits,     U08,   31,  [0:7], $fullStatus_def
          secondDataIn6= bits,     U08,   32,  [0:7], $fullStatus_def
          secondDataIn7= bits,     U08,   33,  [0:7], $fullStatus_def
      outputTimeLimit = array,    U08,   34,  [  8], "S",       0.1,     0.0,   0.0,     25.5,      1
      unused13_35_49  = array,    U08,   42,  [  8], "%",        1.0,     0.0,   0.0,     100.0,     0
      firstTarget     = array,    S16,   50,  [  8], "",        1.0,     0.0, -32768.0,  32768.0,      0
      secondTarget    = array,    S16,   66,  [  8], "",        1.0,     0.0, -32768.0,  32768.0,      0
      firstCompType0  = bits,     U08,   82,  [0:2],  $comparator_def
      secondCompType0 = bits,     U08,   82,  [3:5],  $comparator_def
      bitwise0        = bits,     U08,   82,  [6:7],  $bitwise_def
      firstCompType1  = bits,     U08,   83,  [0:2],  $comparator_def
      secondCompType1 = bits,     U08,   83,  [3:5],  $comparator_def
      bitwise1        = bits,     U08,   83,  [6:7],  $bitwise_def
      firstCompType2  = bits,     U08,   84,  [0:2],  $comparator_def
      secondCompType2 = bits,     U08,   84,  [3:5],  $comparator_def
      bitwise2        = bits,     U08,   84,  [6:7],  $bitwise_def
      firstCompType3  = bits,     U08,   85,  [0:2],  $comparator_def
      secondCompType3 = bits,     U08,   85,  [3:5],  $comparator_def
      bitwise3        = bits,     U08,   85,  [6:7],  $bitwise_def
      firstCompType4  = bits,     U08,   86,  [0:2],  $comparator_def
      secondCompType4 = bits,     U08,   86,  [3:5],  $comparator_def
      bitwise4        = bits,     U08,   86,  [6:7],  $bitwise_def
      firstCompType5  = bits,     U08,   87,  [0:2],  $comparator_def
      secondCompType5 = bits,     U08,   87,  [3:5],  $comparator_def
      bitwise5        = bits,     U08,   87,  [6:7],  $bitwise_def
      firstCompType6  = bits,     U08,   88,  [0:2],  $comparator_def
      secondCompType6 = bits,     U08,   88,  [3:5],  $comparator_def
      bitwise6        = bits,     U08,   88,  [6:7],  $bitwise_def
      firstCompType7  = bits,     U08,   89,  [0:2],  $comparator_def
      secondCompType7 = bits,     U08,   89,  [3:5],  $comparator_def
      bitwise7        = bits,     U08,   89,  [6:7],  $bitwise_def
      candID          = array,    U16,   90,  [  8], "",         1.0,     0.0,   0.0,    255.0,      0
      unused12_106_115= array,    U08,  106,  [ 10],  "%",       1.0,     0.0,   0.0,      255,      0

      ;RTC and onboard logging stuff
      onboard_log_csv_separator = bits,     U08,  116, [0:1], ";", ",", "tab", "space" 
      onboard_log_file_style    = bits,     U08,  116, [2:3], "Disabled", "CSV", "INVALID", "INVALID" ;Future maybe more file types.
      onboard_log_file_rate     = bits,     U08,  116, [4:5], "1Hz", "4Hz", "10Hz", "30Hz" 
      onboard_log_filenaming    = bits,     U08,  116, [6:7], "Overwrite", "Date-time", "Sequential", "INVALID" 
      onboard_log_storage       = bits,     U08,  117, [0:1], "sd-card", "INVALID", "INVALID", "INVALID" ;In the future maybe an onboard spi flash can be used, or switch between SDIO vs SPI sd card interfaces.
      onboard_log_trigger_boot  = bits,     U08,  117, [2:2], "Disabled", "On boot"
      onboard_log_trigger_RPM   = bits,     U08,  117, [3:3], "Disabled", "Enabled"
      onboard_log_trigger_prot  = bits,     U08,  117, [4:4], "Disabled", "Enabled"
      onboard_log_trigger_Vbat  = bits,     U08,  117, [5:5], "Disabled", "Enabled"
      onboard_log_trigger_Epin  = bits,     U08,  117, [6:7], "Disabled", "Enabled", "INVALID", "INVALID" ;In future add momentary on/off option
      onboard_log_tr1_duration  = scalar,   U16,  118,        "s",        1.000,  0.0,    0,     65000,  0
      onboard_log_tr2_thr_on    = scalar,   U08,  120,        "RPM",      100.0,  0.0,    0,     10000,  0
      onboard_log_tr2_thr_off   = scalar,   U08,  121,        "RPM",      100.0,  0.0,    0,     10000,  0
      onboard_log_tr3_thr_RPM   = bits,     U08,  122, [0:0], "Disabled", "Enabled"
      onboard_log_tr3_thr_MAP   = bits,     U08,  122, [1:1], "Disabled", "Enabled"
      onboard_log_tr3_thr_Oil   = bits,     U08,  122, [2:2], "Disabled", "Enabled"
      onboard_log_tr3_thr_AFR   = bits,     U08,  122, [3:3], "Disabled", "Enabled"     
      onboard_log_tr4_thr_on    = scalar,   U08,  123,        "V",        0.1,   0.0,  0.0,  15.90,      2 ; * (  1 byte)    
      onboard_log_tr4_thr_off   = scalar,   U08,  124,        "V",        0.1,   0.0,  0.0,  14.90,      2 ; * (  1 byte)   
      onboard_log_tr5_Epin_pin  = bits ,    U08,  125, [0:5],           $IO_Pins_no_def
      unused13_125_2            = bits ,    U08,  125, [6:7], ";", ",", "tab", "space" 

      hwTestIgnDuration         = scalar,   U08,  126,        "ms",      1.0,     0.0,   0.0,      10,      0
      hwTestInjDuration         = scalar,   U08,  127,        "ms",      1.0,     0.0,   0.0,      20,      0

;--------------------------------------------------
;Second ignition map (Page 14)
;--------------------------------------------------
page = 14
      advTable2  = array,  U08,     0,[16x16],  "deg",       1.0,       -40,  { ign2ValuesMin },   { ign2ValuesMax },      0
      rpmBins3   = array,  U08,   256,[   16],  "RPM",       100.0,     0.0,   100,   25500,      0
      mapBins2   = array,  U08,   272, [  16], { bitStringValue(algorithmUnits ,  spark2Algorithm) }, {ign2LoadRes},      0.0,   0.0,   { ign2LoadMax },      {ign2DecimalRes} ; This name has to be used in order for the table to show up in MLVs table. I can't find the regexs that make this work :(

;-------------------------------------------------------------------------------

;--------------------------------------------------
;boost Duty lookup map (Page 15)
;--------------------------------------------------
page = 15
;boost Duty lookup table
      boostTableDutyLookup          = array,  U08,    0,    [8x8],  "Duty Cycle %",   0.5,        0.0,    0,      100,            0
      ; TRANSMISSION MOD TESTING START 
      ;rpmBinsDutyLookup             = array,  U08,    64,   [  8],  "RPM",            100.0,      0.0,    100,    25500,          0
      ;loadBinsDutyLookup            = array,  U08,    72,   [  8],  "kpa",            2.0,        0.0,    0.0,    {fuelLoadMax},  0
      ; Analog Shift Selecteor Input
      ;name       =                   array, type,  offset,         units,           scale,   translate,  lo,     hi,         digits
      ; this is the input from the shift selector
      rpmBinsDutyLookup             = array,  U08,    64,   [  8],  "RPM",            1.0,        0.0,    0.0,    255,          0
      ; this is the gear selected
      loadBinsDutyLookup            = array,  U08,    72,   [  8],  "",            1.0,        0.0,    0.0,    8,          0

      ; TRANSMISSION MOD TESTING END 
;add variables for improved closedloop boost control
      boostControlEnable            = bits,   U08,    80,   [0:0],  "Baro",  "Fixed"
      unused15_1_1                  = bits,   U08,    80,   [1:3],  "False", "INVALID","INVALID", "INVALID","INVALID", "INVALID","INVALID", "INVALID"
      unused15_1_2                  = bits,   U08,    80,   [4:6],  "False", "INVALID","INVALID", "INVALID","INVALID", "INVALID","INVALID", "INVALID"
      unused15_1_3                  = bits,   U08,    80,   [7:7],  "False", "INVALID"
      boostDCWhenDisabled           = scalar, U08,    81,           "%",              1,          0,      0,      100,            0
      boostControlEnableThreshold   = scalar, U08,    82,           "kpa",            1,          0.0,    0.0,    255,            0 
      

; Air conditioning control
      airConEnable                  = bits,    U08,   83,  [0:0], "Off", "On"
      airConCompPol                 = bits,    U08,   83,  [1:1], "Normal", "Inverted"
      airConReqPol                  = bits,    U08,   83,  [2:2], "Normal", "Inverted"
      airConTurnsFanOn              = bits,    U08,   83,  [3:3], "No", "Yes"
      airConFanEnabled              = bits,    U08,   83,  [4:4], "Disabled", "Enabled"
      airConFanPol                  = bits,    U08,   83,  [5:5], "Normal", "Inverted"
      airConUnused1                 = bits,    U08,   83,  [6:7], "0", "1", "2", "3"
      airConCompPin                 = bits,    U08,   84,  [0:5], "Unused", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      airConUnused2                 = bits,    U08,   84,  [6:7], "0", "1", "2", "3"
      airConReqPin                  = bits,    U08,   85,  [0:5], "Unused", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      airConUnused3                 = bits,    U08,   85,  [6:7], "0", "1", "2", "3"
      airConTPSCut                  = scalar,  U08,   86,  "%",      0.5,        0.0,     0.0,    100.0,    1
      airConMinRPM                  = scalar,  U08,   87,  "RPM",     10,        0.0,     0.0,     2550,    0
      airConMaxRPM                  = scalar,  U08,   88,  "RPM",    100,        0.0,     0.0,    25500,    0
#if CELSIUS
      airConClTempCut               = scalar,  U08,   89,    "C",    1.0,        -40,     -40,      215,    0
#else
      airConClTempCut               = scalar,  U08,   89,    "F",    1.8,     -22.23,     -40,      419,    0
#endif
      airConIdleSteps               = scalar,  U08,   90, "%/Steps", 1.0,        0.0,     0.0,      255,    0
      airConTPSCutTime              = scalar,  U08,   91,    "s",    0.1,        0.0,     0.0,     25.5,    1
      airConCompOnDelay             = scalar,  U08,   92,    "s",    0.1,        0.0,     0.0,     25.5,    1
      airConAfterStartDelay         = scalar,  U08,   93,    "s",    0.1,        0.0,     0.0,     25.5,    1
      airConRPMCutTime              = scalar,  U08,   94,    "s",    0.1,        0.0,     0.0,     25.5,    1
      airConFanPin                  = bits,    U08,   95,  [0:5], "Unused", "INVALID", "INVALID", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "INVALID", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "INVALID"
      airConUnused4                 = bits,    U08,   95,  [6:7], "0", "1", "2", "3"
      airConIdleUpRPMAdder          = scalar,  U08,   96,  "Added Target RPM", 10.0, 0.0, 0.0,    250.0,    0
      airConPwmFanMinDuty           = scalar,  U08,   97,  "%",      0.5,        0.0,     0.0,    100.0,    1

      rollingProtRPMDelta           = array,   S08,   98,    [4], "RPM",     10.0,    0,   -1000,   0,    0           
      rollingProtCutPercent         = array,   U08,   102,   [4],    "%",    1.0,    0,   0,    100,      0
      Unused15_106_255              = array,   U08,   106,   [134],   "%", 1.0,   0.0,     0.0,      255,    0
  
page = 16
    ;  name       = bits,   type,    offset, bits
    ;  name       = array,  type,    offset, shape, units,     scale,    translate,   lo,     hi,    digits
    ;  name       = scalar, type,    offset,        units,     scale,    translate,   lo,     hi,    digits
    
    shift1_2_tps =      array,  U08,    0,    [  6],  "RPM",    1.0,        0.0,      0.0,    255,      0
    shift1_2_up_vss =   array,  U08,    6,    [  6],  "",       1.0,        0.0,      0.0,    8,        0
    shift1_2_down_vss = array,  U08,    12,   [  6],  "",       1.0,        0.0,      0.0,    8,        0
    shift2_3_tps =      array,  U08,    18,   [  6],  "RPM",    1.0,        0.0,      0.0,    255,      0
    shift2_3_up_vss =   array,  U08,    24,   [  6],  "",       1.0,        0.0,      0.0,    8,        0
    shift2_3_down_vss = array,  U08,    30,   [  6],  "",       1.0,        0.0,      0.0,    8,        0
    shift3_4_tps =      array,  U08,    36,   [  6],  "RPM",    1.0,        0.0,      0.0,    255,      0
    shift3_4_up_vss =   array,  U08,    42,   [  6],  "",       1.0,        0.0,      0.0,    8,        0
    shift3_4_down_vss = array,  U08,    48,   [  6],  "",       1.0,        0.0,      0.0,    8,        0
    
    shiftSelector_adc_pin = scalar, U08,   54,           "",            1.0,         0,     0,     255,         0
    shiftSelector_adc =     array,  U08,   55,   [  8],  "",            1.0,        0.0,    0.0,    8,          0
    shiftSelector_gear =    array,  U08,   63,   [  8],  "",            1.0,        0.0,    0.0,    8,          0  

    trans_temp_sensor_pullup_ohms = scalar, U16,      71,         "",        1.0,         0,     0,     65535,      0
    trans_temp_sensor_pin = scalar, U08,      73,         "",        1.0,         0,     0,     255, 0      
    trans_temp_sensor_calibration_resistance = array, U16,    74,   [  2],  "",            1.0,        0.0,    0,    65535,          0
    trans_temp_sensor_calibration_temp = array, S16,    78,   [  2],  "",            1.0,        0.0,    -50.0,    300,          0

    trans_line_pressure_pin = scalar, U08,      82,         "",        1.0,         0,     0,     255,      
    trans_line_pressure_tps = array, U08,      83,   [  6],  "",            1.0,        0.0,    0.0,    255,          0
    trans_line_pressure_pwm = array, U08,      89,   [  6],  "",            1.0,        0.0,    0.0,    255,          0

    lockup_pin = scalar, U08,      95,         "",        1.0,         0,     0,     255,      
    lockup_vss = scalar, U08,      96,         "",        1.0,         0,     0,     255,      
    overrun_pin = scalar, U08,      97,         "",        1.0,         0,     0,     255,      
    overrun_duration = scalar, U08,      98,         "",        1.0,         0,     0,     255,      

    shift_solenoid_1_pin = scalar, U08,      99,         "",        1.0,         0,     0,     255,      
    shift_solenoid_2_pin = scalar, U08,      100,         "",        1.0,         0,     0,     255,      
    shift_solenoid_1_gear_pwm = array, U08,      101,   [  8],  "",            1.0,        0.0,    0.0,    255,          0
    shift_solenoid_2_gear_pwm = array, U08,      109,   [  8],  "",            1.0,        0.0,    0.0,    255,          0

    can_baud_rate = bits,   U08,    117,   [0:0],  "500000",  "250000"
    can_baseAddress = scalar, U08,      118,         "",        1.0,         0,     0,     255,      0
    can_id_tps = scalar, U16,      119,         "",        1.0,         0,     0,     65535,      0
    can_offset_tps = scalar, U08,      121,         "",        1.0,         0,     0,     8,     0 
    can_endianness_tps = bits,   U08,    122,   [0:0],  "Big Endian",  "Little Endian"
    can_bytes_tps = scalar, U08,      123,         "",        1.0,         0,     0,     2,     0
    can_id_rpm = scalar, U16,      124,         "",        1.0,         0,     0,     65535,      0
    can_offset_rpm = scalar, U08,      126,         "",        1.0,         0,     0,     8,     0
    can_endianness_rpm = bits,   U08,    127,   [0:0],  "Big Endian",  "Little Endian"
    can_bytes_rpm = scalar, U08,      128,         "",        1.0,         0,     0,     2,     0

    Unused15_106_255              = array,   U08,   129,   [21],   "%", 1.0,   0.0,     0.0,      255,    0




    ;byte trans_line_pressure_pin;                             // 1 byte - ADC pin number
  ;byte trans_line_pressure_tps[6];                      // 6 bytes - TPS values
  ;byte trans_line_pressure_pwm[6];                      // 6 bytes - Solenoid PWM values (0-255)

  ;// Lockup solenoid pin, x-asis and y-asis calibration points
  ;byte lockup_pin; // Pin number for the lockup solenoid
  ;byte lockup_vss; // Speed in km/h when lockup should be engaged
  ;byte overrun_pin; // Pin number for the overrun solenoid
  ;byte overrun_duration; // Duration of the overrun in milliseconds

  ;byte shift_solenoid_1_gear_pwm[8]; // PWM values for shift solenoid 1 for each gear
  ;byte shift_solenoid_2_gear_pwm[8]; // PWM values for shift solenoid 2 for each gear



    

    ; example of bits vvt2Enabled         = bits,   U08,     173, [6:6], "Off", "On"

    

;-------------------------------------------------------------------------------

[EventTriggers]
      triggeredPageRefresh = 1, { vssRefresh > 0 }

[ConstantsExtensions]
    requiresPowerCycle = nCylinders
    requiresPowerCycle = pinLayout
    requiresPowerCycle = injLayout
    requiresPowerCycle = inj4CylPairing
    requiresPowerCycle = twoStroke
    requiresPowerCycle = engineType
    requiresPowerCycle = alternate
    requiresPowerCycle = fanPin
    requiresPowerCycle = reqFuel
    requiresPowerCycle = TrigEdge
    requiresPowerCycle = TrigEdgeSec
    requiresPowerCycle = numTeeth
    requiresPowerCycle = missingTeeth
    requiresPowerCycle = trigPatternSec
    requiresPowerCycle = injOpen
    requiresPowerCycle = IgInv
    requiresPowerCycle = ignBypassEnable
    requiresPowerCycle = fanInv
    requiresPowerCycle = boostEnabled
    requiresPowerCycle = vvtEnabled
;  requiresPowerCycle = vvtChannels
    requiresPowerCycle = boostFreq
    requiresPowerCycle = vvtFreq
    requiresPowerCycle = idleFreq
    requiresPowerCycle = sparkMode
    requiresPowerCycle = launchPin
    requiresPowerCycle = launchEnable
    requiresPowerCycle = launchHiLo
    requiresPowerCycle = flexEnabled
    requiresPowerCycle = vssMode
    requiresPowerCycle = vssPin
    requiresPowerCycle = oddfire2
    requiresPowerCycle = oddfire3
    requiresPowerCycle = oddfire4
    requiresPowerCycle = iacCLminValue
    requiresPowerCycle = iacCLmaxValue
    requiresPowerCycle = useExtBaro
    requiresPowerCycle = useEMAP
    requiresPowerCycle = baroPin
    requiresPowerCycle = rotaryType
    requiresPowerCycle = stagedInjSizePri
    requiresPowerCycle = stagedInjSizeSec
    requiresPowerCycle = stagingEnabled
    requiresPowerCycle = resetControl
    requiresPowerCycle = resetControlPin
    requiresPowerCycle = n2o_enable
    requiresPowerCycle = n2o_arming_pin
    requiresPowerCycle = n2o_pin_polarity
    requiresPowerCycle = knock_mode
    requiresPowerCycle = knock_pin
    requiresPowerCycle = knock_trigger
    requiresPowerCycle = knock_pullup
    requiresPowerCycle = idleUpEnabled
    requiresPowerCycle = idleUpOutputEnabled
    requiresPowerCycle = CTPSEnabled
    requiresPowerCycle = CTPSPin
    requiresPowerCycle = CTPSPolarity
    requiresPowerCycle = legacyMAP
    requiresPowerCycle = fuel2InputPin
    requiresPowerCycle = fuel2InputPolarity
    requiresPowerCycle = wmiEnabled
    requiresPowerCycle = wmiEmptyEnabled
    requiresPowerCycle = wmiEmptyPin
    requiresPowerCycle = wmiEmptyPolarity
    requiresPowerCycle = wmiIndicatorEnabled
    requiresPowerCycle = wmiIndicatorPin
    requiresPowerCycle = wmiIndicatorPolarity
    requiresPowerCycle = vvtCLminDuty
    requiresPowerCycle = vvtCLmaxDuty

    requiresPowerCycle = caninput_sel0a
    requiresPowerCycle = caninput_sel0b
    requiresPowerCycle = caninput_sel1a
    requiresPowerCycle = caninput_sel1b
    requiresPowerCycle = caninput_sel2a
    requiresPowerCycle = caninput_sel2b
    requiresPowerCycle = caninput_sel3a
    requiresPowerCycle = caninput_sel3b
    requiresPowerCycle = caninput_sel4a
    requiresPowerCycle = caninput_sel4b
    requiresPowerCycle = caninput_sel5a
    requiresPowerCycle = caninput_sel5b
    requiresPowerCycle = caninput_sel6a
    requiresPowerCycle = caninput_sel6b
    requiresPowerCycle = caninput_sel7a
    requiresPowerCycle = caninput_sel7b
    requiresPowerCycle = caninput_sel8a
    requiresPowerCycle = caninput_sel8b
    requiresPowerCycle = caninput_sel9a
    requiresPowerCycle = caninput_sel9b
    requiresPowerCycle = caninput_sel10a
    requiresPowerCycle = caninput_sel10b
    requiresPowerCycle = caninput_sel11a
    requiresPowerCycle = caninput_sel11b
    requiresPowerCycle = caninput_sel12a
    requiresPowerCycle = caninput_sel12b
    requiresPowerCycle = caninput_sel13a
    requiresPowerCycle = caninput_sel13b
    requiresPowerCycle = caninput_sel14a
    requiresPowerCycle = caninput_sel14b
    requiresPowerCycle = caninput_sel15a
    requiresPowerCycle = caninput_sel15b
    requiresPowerCycle = outputPin

    requiresPowerCycle = airConEnable
    requiresPowerCycle = airConCompPin
    requiresPowerCycle = airConReqPin
    requiresPowerCycle = airConFanPin
    requiresPowerCycle = airConReqPol
    requiresPowerCycle = airConCompPol
    requiresPowerCycle = airConFanPol
    requiresPowerCycle = airConFanEnabled

    requiresPowerCycle = fuelPressureEnable
    requiresPowerCycle = oilPressureEnable
    requiresPowerCycle = fuelPressurePin
    requiresPowerCycle = oilPressurePin

    requiresPowerCycle = onboard_log_file_style

    defaultValue = pinLayout,   55
    defaultValue = TrigPattern, 0
    defaultValue = useResync,   1
    defaultValue = trigPatternSec,  0
    defaultValue = sparkMode,   0
    defaultValue = injAng,      355 355 355 355
    defaultValue = injAngRPM,   500 2000 4500 6500
    defaultValue = nInjectors,  4
    defaultValue = dutyLim,     80
    defaultValue = mapMin,      10
    defaultValue = mapMax,      260
    defaultValue = baroMin,     10
    defaultValue = baroMax,     260
    defaultValue = useEMAP,     0
    defaultValue = EMAPMin,     10
    defaultValue = EMAPMax,     260
    defaultValue = mapSwitchPoint,  0
    defaultValue = fpPrime,     3
    defaultValue = TrigFilter,  0
    defaultValue = ignCranklock,0
    defaultValue = multiplyMAP, 0
    defaultValue = includeAFR,  0
    defaultValue = incorporateAFR,  0
    defaultValue = stoich,      14.7
    defaultValue = flexEnabled, 0
    defaultValue = oddfire2,    0
    defaultValue = oddfire3,    0
    defaultValue = oddfire4,    0
    defaultValue = flexFreqLow, 50
    defaultValue = flexFreqHigh,150
    defaultValue = fuelPumpPin, 0
    defaultValue = fanPin,      0
    defaultValue = iacFastTemp, 0
    defaultValue = idleFreq, 160
    defaultValue = iacStepHome, 99
    defaultValue = iacStepHyster, 3
    defaultValue = iacMaxSteps, 96
    defaultValue = iacCLminValue,0
    defaultValue = iacCLmaxValue,100
    defaultValue = iacTPSlimit, 5
    defaultValue = iacRPMlimitHysteresis, 200
    defaultValue = boostMinDuty,0
    defaultValue = boostMaxDuty,100
    defaultValue = boostSens,   2000
    defaultValue = boostIntv,   30
    defaultValue = sparkDur,    1.0
    defaultValue = fixAngEnable,0
    defaultValue = n2o_enable,  0
    defaultValue = speeduino_tsCanId, 0
    defaultValue = true_address, 256
    defaultValue = realtime_base_address, 336
    defaultValue = stagingEnabled, 0
    defaultValue = lnchCtrlTPS, 0
    defaultValue = lnchCtrlVss, 255
    defaultValue = resetControl, 0
    defaultValue = bootloaderCaps, 0
    defaultValue = aeTaperMin, 1000
    defaultValue = aeTaperMax, 5000
    defaultValue = taeMinChange, 2
    defaultValue = maeMinChange, 2
    defaultValue = aeColdPct, 100
    defaultValue = aeColdTaperMin, 0
    defaultValue = aeColdTaperMax, 60
    defaultValue = decelAmount, 100
    defaultValue = aeMode, 0 ;Set aeMode to TPS
    defaultValue = batVoltCorrect, 0
    defaultValue = aeApplyMode, 0
    defaultValue = legacyMAP, 0
    defaultValue = battVCorMode, 1
    defaultValue = idleAdvEnabled, 0 ;Idle advance control turned off
    defaultValue = aseTaperTime, 0.0
    defaultValue = idleTaperTime, 1.0
    defaultValue = dfcoDelay, 0.1
    defaultValue = dfcoRPM, 1500
    defaultValue = dfcoHyster, 200
    defaultValue = crankingEnrichTaper, 0.1
    defaultValue = boostCutEnabled,     1
    defaultValue = primingDelay, 0.5
    defaultValue = vvtCLminDuty, 0
    defaultValue = vvtCLmaxDuty, 80 ;80% is a completely arbitrary amount for the max duty cycle, but seems inline with most VVT documentation
    defaultValue = vvtCL0DutyAng, 0
    defaultValue = vvt2CL0DutyAng, 0
    defaultValue = ANGLEFILTER_VVT, 0
    defaultValue = idleAdvStartDelay, 0.2 ;0.2S for a quick gear change without change the table advance
    defaultValue = boostByGearEnabled, 0
    defaultValue = airConIdleUpRPMAdder, 100
    defaultValue = airConPwmFanMinDuty, 80
    #if CELSIUS
    defaultValue = vvtMinClt, 70
    defaultValue = fuelTempBins, 0 15 30 45 60 75
    defaultValue = dfcoMinCLT, 70
    #else
    defaultValue = vvtMinClt, 160
    defaultValue = fuelTempBins, 32 59 86 113 140 157
    defaultValue = dfcoMinCLT, 158
    #endif
    defaultValue = vvtDelay, 60
    defaultValue = fuelTempValues, 100 100 100 100 100 100

    ; AFR protection default values
    defaultValue = afrProtectEnabled, 0
    defaultValue = afrProtectMAP, 180
    defaultValue = afrProtectRPM, 4000
    defaultValue = afrProtectTPS, 80
    defaultValue = afrProtectDeviationLambda, 0.10
    defaultValue = afrProtectDeviation, 1.47
    defaultValue = afrProtectCutTime, 0.8
    defaultValue = afrProtectReactivationTPS, 20

    ;Default pins
    defaultValue = fanPin,      0
    defaultValue = vvt1Pin,      0
    defaultValue = vvt2Pin,      0
    defaultValue = launchPin,   0
    defaultValue = boostPin,    0
    defaultValue = fuelPumpPin, 0
    defaultValue = tachoPin,    0
    defaultValue = tachoDuration, 2
    defaultValue = useTachoSweep, 0
    defaultValue = tachoSweepMaxRPM,  6000
    defaultValue = perToothIgn, 0
    defaultValue = dwellErrCorrect, 0
    defaultValue = resetControlPin, 0

    ;Default ADC filter values
    defaultValue = ADCFILTER_TPS,  50
    defaultValue = ADCFILTER_CLT, 180
    defaultValue = ADCFILTER_IAT, 180
    defaultValue = ADCFILTER_O2,  100
    defaultValue = ADCFILTER_BAT, 128
    defaultValue = ADCFILTER_MAP,  20 ;This is only used on Instantaneous MAP readings and is intentionally very weak to allow for faster response
    defaultValue = ADCFILTER_BARO, 64
    defaultValue = FILTER_FLEX,    75

    ; AirCon Default Values
    defaultValue = airConEnable, 0
    defaultValue = airConCompPol, 0
    defaultValue = airConReqPol, 0
    defaultValue = airConTurnsFanOn, 1
    defaultValue = airConCompPin, 0
    defaultValue = airConReqPin, 0
    defaultValue = airConFanPin, 0
    defaultValue = airConFanPol, 0
    defaultValue = airConFanEnabled, 0
    defaultValue = airConTPSCut, 65
    defaultValue = airConMinRPM, 500
    defaultValue = airConMaxRPM, 4700
    defaultValue = airConClTempCut, 120
    defaultValue = airConIdleSteps, 0
    defaultValue = airConTPSCutTime, 5.00
    defaultValue = airConCompOnDelay, 0.4
    defaultValue = airConAfterStartDelay, 5.00
    defaultValue = airConRPMCutTime, 5.00
    
    ;VSS Ratios and calibration need controller priority so they can be set with the command buttons
    controllerPriority = vssPulsesPerKm
    controllerPriority = vssRatio1
    controllerPriority = vssRatio2
    controllerPriority = vssRatio3
    controllerPriority = vssRatio4
    controllerPriority = vssRatio5
    controllerPriority = vssRatio6 

    ;These are the limits for each of the load algorithms (Refer to the PC Variables section)
    ;Order is:                        MAP   TPS   IMAP/EMAP ITB UNUSED  UNUSED  UNUSED  UNUSED
    defaultValue = algorithmLimits,   511   100   511       511 100     100     100     100
    defaultValue = fuelLoadMax, 511
    defaultValue = ignLoadMax, 511
    defaultValue = fuel2LoadMax, 511
    defaultValue = ign2LoadMax, 511

    ;SD / RTC related
    defaultValue = rtc_mode, 0       
    defaultValue = onboard_log_file_rate, 4      
    defaultValue = onboard_log_filenaming, 0   
    defaultValue = onboard_log_storage,   0    
    defaultValue = onboard_log_trigger_boot, 0    
    defaultValue = onboard_log_trigger_RPM, 0   
    defaultValue = onboard_log_trigger_prot, 0   
    defaultValue = onboard_log_trigger_Vbat, 0   
    defaultValue = onboard_log_trigger_Epin, 0
    defaultValue = onboard_log_tr1_duration, 60
    defaultValue = onboard_log_tr2_thr_on, 600  
    defaultValue = onboard_log_tr2_thr_off,400  
    defaultValue = onboard_log_tr3_thr_RPM, 0
    defaultValue = onboard_log_tr3_thr_MAP, 0
    defaultValue = onboard_log_tr3_thr_Oil, 0
    defaultValue = onboard_log_tr3_thr_AFR, 0
    defaultValue = onboard_log_tr4_thr_on, 12.5  
    defaultValue = onboard_log_tr4_thr_off, 7.0  
    defaultValue = onboard_log_tr5_Epin_pin, 0  
    defaultValue = onboard_log_csv_separator, 0

    ;VSS related settings
    defaultValue = vssRatio1, 10.0
    defaultValue = vssRatio2, 16.0
    defaultValue = vssRatio3, 22.0
    defaultValue = vssRatio4, 28.0
    defaultValue = vssRatio5, 34.0
    defaultValue = vssRatio6, 40.0
    defaultValue = vssPulsesPerKm, 3000
    defaultValue = vssSmoothing, 50

    ;pinLayout     = bits,   U08,      15, [0:7],  "Speeduino v0.1", "Speeduino v0.2", "Speeduino v0.3", "Speeduino v0.4", "INVALID", "INVALID", "01-05 MX5 PNP", "INVALID", "96-97 MX5 PNP", "NA6 MX5 PNP", "Turtana PCB", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "Plazomat I/O 0.1", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "Daz V6 Shield 0.1", "BMW PnP", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "NO2C", "UA4C", "INVALID", "INVALID", "INVALID", "DIY-EFI CORE4 v1.0", "INVALID", "INVALID", "INVALID", "INVALID", "dvjcodec Teensy RevA", "dvjcodec Teensy RevB", "INVALID", "INVALID", "INVALID", "DropBear", "INVALID", "INVALID", "INVALID", "INVALID", "Black STM32F407VET6 V0.1", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID", "INVALID"
    defaultValue = boardFuelOutputs
    defaultValue = boardIgnOutputs
    defaultValue = boardHas

    controllerPriority = bootloaderCaps

    defaultValue = AUXin00Alias, canTPM
    defaultValue = AUXin01Alias, canMAP
    defaultValue = AUXin02Alias, canTPS
    defaultValue = AUXin03Alias, canCoolantTemp
    defaultValue = AUXin04Alias, Aux4
    defaultValue = AUXin05Alias, Aux5
    defaultValue = AUXin06Alias, Aux6
    defaultValue = AUXin07Alias, Aux7
    defaultValue = AUXin08Alias, Aux8
    defaultValue = AUXin09Alias, Aux9
    defaultValue = AUXin10Alias, Aux10
    defaultValue = AUXin11Alias, Aux11
    defaultValue = AUXin12Alias, Aux12
    defaultValue = AUXin13Alias, Aux13
    defaultValue = AUXin14Alias, Aux14
    defaultValue = AUXin15Alias, Aux15

    defaultValue = prgm_out00Alias, PrgmOut0
    defaultValue = prgm_out01Alias, PrgmOut1
    defaultValue = prgm_out02Alias, PrgmOut2
    defaultValue = prgm_out03Alias, PrgmOut3
    defaultValue = prgm_out04Alias, PrgmOut4
    defaultValue = prgm_out05Alias, PrgmOut5
    defaultValue = prgm_out06Alias, PrgmOut6
    defaultValue = prgm_out07Alias, PrgmOut7

    defaultValue = hwTestInjDuration, 8
    defaultValue = hwTestIgnDuration, 4

    defaultValue = rpmwarn, 3000
    defaultValue = rpmdang, 5000
    defaultValue = rpmhigh, 8000

    defaultValue = mapwarn, 200
    defaultValue = mapdang, 245
    defaultValue = maphigh, 255

    defaultValue = batlow,  11.8
    defaultValue = bathigh, 15

    defaultValue = rollingProtRPMDelta,      -300 -200  -100  -50
    defaultValue = rollingProtCutPercent,    50   65    80    95

    defaultValue = egoMAPMax, 100
    defaultValue = egoMAPMin, 26

    ;Knock variables
    defaultValue = knock_mode, 0
    defaultValue = knock_pin, 20
    defaultValue = knock_trigger, 0
    defaultValue = knock_pullup, 1
    defaultValue = knock_count, 3
    defaultValue = knock_threshold, 4.0
    defaultValue = knock_maxMAP, 150
    defaultValue = knock_maxRPM, 5000
    defaultValue = knock_maxRetard, 20
    defaultValue = knock_firstStep, 10
    defaultValue = knock_stepSize, 1
    defaultValue = knock_stepTime, 5 
    defaultValue = knock_duration, 2.5
    defaultValue = knock_recoveryStepTime, 1.0
    defaultValue = knock_recoveryStep, 1

    ; START TRANSMISSION MOD
    ; Transmission default values - these override other values because we're overloading variables so we don't have to create new ones
    ;    defaultValue = shiftup23 , 20 30 40 50 60 70
    ;defaultValue = shift23load , 5 12 20 30 60 90
    ;defaultValue = shiftdown23 , 15 25 35 45 55 65

    defaultValue = knock_window_angle, 20 30 40 50 60 70; This is the shift up value
    defaultValue = knock_window_rpms, 0 20 40 60 80 100   ; 
    defaultValue = knock_window_dur, 15 25 35 45 55 65 ; This is the shift down value

    defaultValue = flexBoostBins, 30 40 50 60 70 80; This is the shift up value
    defaultValue = fuelTempValues, 0 20 40 60 80 100   ; 
    defaultValue = flexFuelBins, 25 35 45 55 65 75 ; This is the shift down value

    defaultValue = flexFuelAdj, 40 50 60 70 80 90; This is the shift up value
    defaultValue = flexAdvBins, 0 20 40 60 80 100   ; 
    defaultValue = flexAdvAdj, 35 45 55 65 75 85 ; This is the shift down value

    defaultValue = rpmBinsDutyLookup, 0 36 73 109 146 182  219  255   ; 
    defaultValue = loadBinsDutyLookup, 0 1 2 3 4 5 6 7  ; 


    defaultValue = egoKP, 90
    defaultValue = egoKI, 75

    defaultValue = can_baud_rate, 0
    defaultValue = can_baseAddress, 102
    defaultValue = can_id_tps, 360
    defaultValue = can_offset_tps, 4
    defaultValue = can_endianness_tps, 0
    defaultValue = can_bytes_tps, 2
    defaultValue = can_id_rpm, 360
    defaultValue = can_offset_rpm, 0
    defaultValue = can_endianness_rpm, 0
    defaultValue =  can_bytes_rpm, 2




    ; END TRANSMISSION MOD

  #if LAMBDA
      ;defaultValue = wueAFR, -0.136 -0.102 -0.082 -0.068 -0.054 -0.041 -0.027 -0.014 -0.007 0.000
  #else
      ;defaultValue = wueAFR, -2.0 -1.5 -1.2 -1.0 -0.8 -0.6 -0.4 -0.2 -0.1 0.0
  #endif

[Menu]

   ;----------------------------------------------------------------------------
   ;  There are five pre-defined values that may be used to define your menus.
   ;  The first four allow access to the "standard" dialog boxes, the last one
   ;  merely draws a separator (horizontal line) in the menu.
   ;
   ;     std_constants
   ;     std_enrichments
   ;     std_realtime
   ;     std_warmup
   ;
   ;     std_separator
   ;
   ;  If you use any of the std_constants, std_enrichments or std_warmup
   ;  editors, they may be optionally suffixed with a page number (only
   ;  useful for multi-page code variants), which causes them to edit the
   ;  specified page.  If you leave off the page specifier, they edit logical
   ;  page one as specified in the Constants section.
   ;
   ;  There are four special menu names, which when used append to the standard
   ;  menus of the same name instead of creating a new one.  The menu names
   ;  are "File", "Communications", "Tools" and "Help".
   ;
   ;----------------------------------------------------------------------------

  ; Set the menu dialog to the Main Menu
  menuDialog = main
    ; Add a menu item for Sensors and Inputs includding CANBUS
    menu = "Sensors and Inputs"
      subMenu = transmission_setup, "Transmission Setup"
      subMenu = shift_selector_dialog, "Gear Selector"
      subMenu = transmission_temp_sensor_dialog, "Transmission Temperature Sensor"
      subMenu = trans_can_setup_dialog, "CAN Bus Setup (TPS, RPM)"
      ;subMenu = engine_coolant_temp_input_dialog, "Engine Coolant Temperature Sensor (CAN bus)"

    menu = "Shifting Curves"
      subMenu = shift_curve_1_2_dialog, "Shift Curves 1/2"
      subMenu = shift_curve_2_3_dialog, "Shift Curves 2/3"
      subMenu = shift_curve_3_4_dialog, "Shift Curves 3/4"

    menu = "Outputs"
      subMenu = shift_solenoid_output_dialog, "Shift Solenoids"
      subMenu = torque_converter_output_dialog, "Torque Converter"
      subMenu = overrun_clutch_output_dialog, "Overrun Clutch"
      subMenu = trans_line_pressure_output_dialog, "Transmission Line Pressure"
      subMenu = can_bus_output_dialog, "CAN Bus Output"

  ;   menu = "Settings"
  ;     subMenu = engine_constants,   "Engine Constants"
  ;     subMenu = injChars,           "Injector Characteristics"
  ;     subMenu = triggerSettings,    "Trigger Setup"
  ;     ;subMenu = OLED,               "OLED Setup"
  ;     subMenu = airdensity_curve,   "IAT Density"
  ;     subMenu = baroFuel_curve,     "Barometric Correction"
  ;     subMenu = reset_control,      "Reset Control"

  ;     subMenu = std_separator
  ;     subMenu = gaugeLimits, "Gauge Limits"

  ;     subMenu = std_separator
  ;     subMenu = io_summary, "I/O Summary"
  ;     subMenu = std_separator
  ;     subMenu = prgm_out_config,  "Programmable outputs"

  ;  menu = "&Tuning"
  ;     subMenu = std_realtime,       "Realtime Display"
  ;     subMenu = accelEnrichments,   "Acceleration Enrichment"
  ;     subMenu = egoControl,         "AFR/O2", 3
  ;     groupMenu = "Engine Protection"
  ;       groupChildMenu = engineProtection,          "Common Engine Protection"
  ;       groupChildMenu = revLimiterDialog,          "Rev Limiters",             { engineProtectType }
  ;       groupChildMenu = boostCut,                  "Boost Cut",                { engineProtectType }
  ;       groupChildMenu = oilPressureProtection,     "Oil Pressure",             { engineProtectType }
  ;       groupChildMenu = afrProtect,                "AFR Protection",           { engineProtectType }
  ;     subMenu = flexFuel,           "Flex Fuel",        2
  ;     subMenu = veTableDialog,      "VE Table",       0
  ;     subMenu = sparkTbl,           "Spark Table",    2
  ;     subMenu = afrTable1Tbl,       "AFR Target Table",       5
  ;     subMenu = lambdaTable1Tbl,    "Lambda Target Table",    5
  ;     subMenu = std_separator
  ;     subMenu = fuelTable2Dialog,   "Second fuel Table", 11
  ;     subMenu = sparkTable2Dialog,  "Second spark Table", 14
  ;     subMenu = std_separator
  ;     subMenu = inj_trimad,         "Sequential fuel trim (1-4)", 9
  ;     subMenu = inj_trimad_B,       "Sequential fuel trim (5-8)", 9, { nFuelChannels >= 5 }
  ;     subMenu = std_separator
  ;     subMenu = stagingTableDialog, "Staged Injection", 10, { nCylinders <= 4 || injType == 1 } ; Can't do staging on more than 4 cylinder engines unless TBI is used
  ;     subMenu = std_separator
  ;     subMenu = fuelTemp_curve,     "Fuel Temp Correction", { flexEnabled }

  ;  menu = "&Spark"
  ;     subMenu = sparkSettings,          "Spark Settings"
  ;     subMenu = sparkTbl,               "Spark Table", 2
  ;     subMenu = dwellSettings,          "Dwell settings"
  ;     subMenu = dwell_correction_curve, "Dwell Compensation"
  ;     subMenu = dwell_map,              "Dwell Map",  { useDwellMap }
  ;     subMenu = iat_retard_curve,       "IAT Retard"
  ;     subMenu = clt_advance_curve,      "Cold Advance"
  ;     subMenu = knockSettings,          "Knock Settings"
  ;     subMenu = rotary_ignition,        "Rotary Ignition",    { sparkMode == 4 }

  ;  menu = "&Startup/Idle"
  ;       subMenu = crankPW,              "Cranking Settings"
  ;       subMenu = primePW,              "Priming Pulsewidth"
  ;       subMenu = warmup,               "Warmup Enrichment"
  ;       subMenu = ASE,                  "Afterstart Enrichment (ASE)"
  ;       subMenu = std_separator
  ;       subMenu = idleSettings,         "Idle Control"
  ;       subMenu = iacClosedLoop_curve,  "Idle - RPM targets", 7, { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 || idleAdvEnabled >= 1 }
  ;       subMenu = iacPwm_curve,         "Idle - PWM Duty Cycle", 7, { iacAlgorithm == 2 || iacAlgorithm == 6}
  ;       subMenu = iacPwmCrank_curve,    "Idle - PWM Cranking Duty Cycle", 7, { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6}
  ;       subMenu = iacStep_curve,        "Idle - Stepper Motor", 7, { iacAlgorithm == 4 || iacAlgorithm == 7 }
  ;       subMenu = iacStepCrank_curve,   "Idle - Stepper Motor Cranking", 7, { iacAlgorithm == 4 || iacAlgorithm == 5 || iacAlgorithm == 7 }
  ;       subMenu = std_separator
  ;       subMenu = idleUpSettings,       "Idle Up Settings", { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 4 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 }
  ;       subMenu = std_separator
  ;       subMenu = idleAdvanceSettings,  "Idle Advance Settings"

    ; menu = "&Accessories"
    ;     subMenu = fanSettings,          "Thermo Fan"
    ;     subMenu = pwmFan,               "PWM Fan Curve", { fanEnable == 2 }
    ;     subMenu = LaunchControl,        "Launch Control / Flat Shift"
    ;     subMenu = fuelpump,             "Fuel Pump"
    ;     subMenu = NitrousControl,       "Nitrous"
    ;     subMenu = vssSettings,          "VSS and Gear detection"
    ;     subMenu = airCon,               "Air Conditioning Control"
    ;     subMenu = pressureSensors,      "Fuel/Oil pressure"
    ;     subMenu = std_separator
    ;     subMenu = boostSettings,        "Boost Control"
    ;     subMenu = boostLoad,             "Boost Targets/Duty", 8,  { boostEnabled }
    ;     subMenu = std_separator
    ;     subMenu = vvtSettings,          "VVT Control"
    ;     subMenu = vvtTbl,               "VVT Target/Duty", 8,  { vvtEnabled }
    ;     subMenu = vvt2Tbl,              "VVT2 Target/Duty", 8,  { vvtEnabled && vvt2Enabled }
    ;     subMenu = std_separator
    ;     subMenu = wmiSettings,          "WMI Control", { !vvt2Enabled }
    ;     subMenu = wmiTbl,               "WMI duty cycle", 8,  { !vvt2Enabled && wmiEnabled && wmiMode > 1 }  
    ;     subMenu = std_separator
    ;     subMenu = tacho,                "Tacho Output"

    ;     subMenu = std_separator

    ;     subMenu = can_serial3IO,        "Canbus/Secondary Serial IO Interface"
    ;     subMenu = CanBcast,             "CAN Broadcasting menu", { CANisAvailable }
    ;     subMenu = std_separator
    ;     subMenu = Canin_config,         "External Auxillary Input Channel Configuration", {enable_secondarySerial || CANisAvailable }
    ;     subMenu = Auxin_config,         "Local Auxillary Input Channel Configuration"
        ;subMenu = std_separator
        ;subMenu = Canout_config, "Canbus Output Configuration"
        

  ;menuDialog = main
  ;  menu = "Tools"
  ;       subMenu = mapCal,           "Calibrate Pressure Sensors"
  ;       subMenu = batCal,           "Calibrate Voltage Reading"
  ;       subMenu = std_ms2gentherm,  "Calibrate Temperature Sensors", 0
  ;       subMenu = std_ms2geno2,     "Calibrate AFR Sensor", { egoType > 0 }
  ;       subMenu = sensorFilters,    "Set analog sensor filters"

    menu = "Data Logging"
      #if mcu_teensy
        subMenu = rtc_settings,       "Setup realtime clock"
        subMenu = onboard_log_setup,  "Setup onboard logger / SD"
        subMenu = std_ms3SdConsole,   "Browse / Import SD Card", { onboard_log_file_style }
      #else
        subMenu = rtc_settings,       "Setup realtime clock",   { arrayValue( array.boardHasRTC, pinLayout ) > 0 }
        subMenu = onboard_log_setup,  "Setup onboard logger / SD",   { arrayValue( array.boardHasRTC, pinLayout ) > 0 }
        subMenu = std_ms3SdConsole,   "Browse / Import SD Card",  { arrayValue( array.boardHasRTC, pinLayout ) > 0 && onboard_log_file_style }
      #endif


  ;  menuDialog = main
  ;     menu = "3D &Tuning Maps"
  ;       subMenu = veTable1Map,    "Fuel Table"
  ;       subMenu = sparkMap,       "Spark Table", 3
  ;       subMenu = afrTable1Map,   "AFR Target Table"
  ;       subMenu = lambdaTable1Map,"Lambda Target Table"    
  ;       subMenu = fuel2Map,       "Fuel Table 2", { fuel2Mode }
  ;       subMenu = spark2Map,      "Spark Table 2", { spark2Mode }
  ;       subMenu = dwell_tblMap    "Dwell Map", { useDwellMap }
  ;       subMenu = stagingMap      "Fuel Staging", { stagingMode == 0 }
  ;       subMenu = boostMap,       "Boost Duty / Target", { boostEnabled }
  ;       subMenu = boostDutyLookup "Boost Base Duty Closed Loop", { boostType == 1 }
  ;       subMenu = vvtMap          "VVT Control", { vvtEnabled }
  ;       subMenu = vvt2Map         "VVT 2 Control", { vvtEnabled && vvt2Enabled }
  ;       subMenu = wmiMapMap       "WMI Control", { !vvtEnabled && wmiEnabled && wmiMode > 1 }
        

   menuDialog = main
    menu = "Hardware Testing"
        subMenu = outputtest1, "Test Output Hardware"
        subMenu = stm32cmd,    "STM32 Commands"


    menu = "Help"
        subMenu = helpGeneral,     "Backslider Transmission Help"
    

    
    ; START TRANSMISSION MOD
    ; Adding transmission main menu
    ; menuDialog = main 
    ;   menu = "Transmission"
    ;       subMenu = transmission_setup, "Transmission Setup"
    ;       subMenu = std_separator
    ;       ; need to add shift curves for each gear 1 through 4
    ;       subMenu = shift_selector_dialog, "Gear Selector"
    ;       subMenu = shift_curve_1_2_dialog, "Shift Curves 1/2"
    ;       subMenu = shift_curve_2_3_dialog, "Shift Curves 2/3"
    ;       subMenu = shift_curve_3_4_dialog, "Shift Curves 3/4"

    ;       subMenu = std_separator

          

    ; END TRANSMISSION MOD

;-------------------------------------------------------------------------------

[SettingContextHelp]
; constantName = "Help Text"
; These provide the context help in the dialog when these variables are used
  ;nCylinders        = "Cylinder count"
  

[UserDefined]

; Enhanced TunerStudio dialogs can be defined here
; MegaTune will over look this section
; These dialogs will over-ride those in the UserDefined Section
; User defined ar loaded first, then if one by the same name is defined here,
; it will replace the MegaTune definition

; dialog = name,   Title, Layout
;
; valid options for layout are xAxis, yAxis, border
; for an xAxis, each field added will be added from right to left
; A yAxis layout will add fields from top to bottom
; A border layout will expect an additional constraint to determine placement
; valid border constraints are north, South, East, West, Center
; all 5 do not need to be filled.

; The field name can be either a constant reference, or a reference to another
; dialog which will be added.
; dialogs can be nested and can be mixed with fields

    ; dialog = engine_constants_southwest, "Speeduino Board"
    ;     field = "!This is a critical setting!"
    ;     field = "Outputs WILL NOT work if incorrect board is selected"
    ;     field = "Board Layout",             pinLayout
    ;     field = "Stoichiometric ratio",     stoich
    ;     field = "Injector Layout",          injLayout
    ;     field = "Injector Pairing",         inj4CylPairing, {}, { injLayout != 0 && nCylinders == 4 }
    ;     field = "MAP Sample method",        mapSample
    ;     field = "MAP Sample switch point",  mapSwitchPoint,      { mapSample >= 1 }

;     dialog = engine_constants_west, ""
;         panel = std_injection, North
;         panel = engine_constants_southwest

;     dialog = engine_constants_northeast, "Oddfire Angles"
;         field = "Channel 2 angle", oddfire2,                { engineType == 1 }
;         field = "Channel 3 angle", oddfire3,                { engineType == 1 && nCylinders >= 3 }
;         field = "Channel 4 angle", oddfire4,                { engineType == 1 && nCylinders >= 4 }

;     dialog = engine_constants_east, ""
;         panel = engine_constants_northeast, North
;         field = ""

;     dialog = engine_constants_warning, ""
;         field = "!Warning: The board you have selected may not have enough channels for sequential fuel!", {}, {}, { injLayout == 3 && !sequentialFuelAvailable }

;     dialog = engine_constants, "", border
;         topicHelp = "http://wiki.speeduino.com/en/configuration/Engine_Constants"
;         panel = engine_constants_warning, North
;         panel = engine_constants_west, West
;         panel = engine_constants_east, East

; ; Flex fuel stuff
;     dialog = flexFuelSettings, "", yAxis
;         field = "Flex Fuel Sensor ", flexEnabled
;         field = "Low (E0) ",         flexFreqLow,  { flexEnabled }
;         field = "High (E100) ",      flexFreqHigh, { flexEnabled }
;         slider = "Flex sensor filter", FILTER_FLEX, horizontal, { flexEnabled }

;     dialog = flexFuelWest, ""
;         panel = flex_fuel_curve,     { flexEnabled }
;         panel = flex_adv_curve,      { flexEnabled }

;     dialog = flexFuelEast, ""
;         panel = flex_boost_curve,    { flexEnabled && boostEnabled }

;     ;dialog = flexCurves, "", indexCard
;     dialog = flexCurves, "", xAxis
;         panel = flexFuelWest, West
;         panel = flexFuelEast, East

;     dialog = flexFuel, "Fuel Sensor Settings", border
;         topicHelp = "http://wiki.speeduino.com/en/configuration/Flex_Fuel"
;         ;panel = flexFuelWest, West
;         panel = flexFuelSettings, North
;         panel = flexCurves,   South

; ; Knock control settings
;     dialog = knock_windows, "Knock Windows", xAxis
;         panel = knock_window_angle_curve, West, { knock_mode }
;         panel = knock_window_duration_curve, East, { knock_mode }

;     dialog = knock_settings_west, "Settings", yAxis
;         field = "Knock Mode",               knock_mode
;         field = "Knock Pin",                knock_pin,          { knock_mode }
;         field = "Knock active when pin is", knock_trigger,      { knock_mode == 1 }
;         field = "Use pullup",               knock_pullup,       { knock_mode == 1 }

;     dialog = knock_settings_east, "Detection and Response"
;         field = "#Detection"
;         field = "Knock count required",     knock_count,        { knock_mode == 1}
;         field = "Knock threshold required", knock_threshold,    { knock_mode == 2}
;         field = "Maximum MAP",              knock_maxMAP,       { knock_mode }
;         field = "Maximum RPM",              knock_maxRPM,       { knock_mode }
;         field = "Min. Time between events", knock_stepTime,     { knock_mode }
        
;         ;Retard and recovery
;         field = "#Retard"
;         field = "Max Total retard",         knock_maxRetard,    { knock_mode }
;         field = "First step size",          knock_firstStep,    { knock_mode }
;         field = "Additional step size",     knock_stepSize,     { knock_mode }
;         field = "Time before recovery",     knock_duration,     { knock_mode } ;Time before retard starts ending
        
;         field = "#Timing Recovery"
;         field = "Recovery step time",       knock_recoveryStepTime,     { knock_mode } ;Time between each recovery step
;         field = "Recovery step size",       knock_recoveryStep, { knock_mode }

;     dialog = knock_settings_top, "", xAxis
;         panel = knock_settings_west, West
;         panel = knock_settings_east, East

;     dialog = knockSettings, "", border
;         topicHelp = "http://wiki.speeduino.com/en/configuration/Knock"
;         panel = knock_settings_top, North
;         ;panel = knock_windows, South

    ; dialog = vss_gear_1, "", xAxis
    ;     field = "Speed ratio 1",            vssRatio1
    ;     commandButton = "Set Gear 1",       cmdVSSratio1, { vssMode > 0 }
    ; dialog = vss_gear_2, "", xAxis
    ;     field = "Speed ratio 2",            vssRatio2
    ;     commandButton = "Set Gear 2",       cmdVSSratio2, { vssMode > 0 }
    ; dialog = vss_gear_3, "", xAxis
    ;     field = "Speed ratio 3",            vssRatio3
    ;     commandButton = "Set Gear 3",       cmdVSSratio3, { vssMode > 0 }
    ; dialog = vss_gear_4, "", xAxis
    ;     field = "Speed ratio 4",            vssRatio4
    ;     commandButton = "Set Gear 4",       cmdVSSratio4, { vssMode > 0 }
    ; dialog = vss_gear_5, "", xAxis
    ;     field = "Speed ratio 5",            vssRatio5
    ;     commandButton = "Set Gear 5",       cmdVSSratio5, { vssMode > 0 }
    ; dialog = vss_gear_6, "", xAxis
    ;     field = "Speed ratio 6",            vssRatio6
    ;     commandButton = "Set Gear 6",       cmdVSSratio6, { vssMode > 0 }

    ; dialog = vss_gear_detection, "Gear Detection", yAxis
    ;     field = "After setting 'Pulses per km/mile' above"
    ;     field = "Drive in each gear (any speed) and press appropriate button"
    ;     panel = vss_gear_1
    ;     panel = vss_gear_2
    ;     panel = vss_gear_3
    ;     panel = vss_gear_4
    ;     panel = vss_gear_5
    ;     panel = vss_gear_6

    dialog = vss_calibration, "VSS Calibration"
        field = "Pulses Per KM/VSS ratio",          vssPulsesPerKm, { vssMode > 0 }
        ;commandButton = "60km/h auto-calibrate",       cmdVSS60kmh, { vssMode > 0 }
        field = "Smoothing Factor",           vssSmoothing, { vssMode > 0 }
        
    dialog = vssSettings, "", yAxis
        topicHelp = "http://wiki.speeduino.com/en/configuration/VSS"
        field = "VSS Input Mode",           vssMode
        field = "VSS Pin",                  vssPin,         { vssMode > 1 }
        ;field = "Use Pullup",               vssPullup,      { vssMode > 1 }
        ;field = "VSS Aux in Channel",       vssAuxCh,       { vssMode == 1 }
        
        panel = vss_calibration
        ;panel = vss_gear_detection

  ;   dialog = tacho, "Tacho"
  ;       field = "Output pin",               tachoPin
  ;       field = "Tacho pulse mode",         tachoMode
  ;       field = "Output speed",             tachoDiv,         { tachoMode == 0 }
  ;       field = "Pulse duration",           tachoDuration,    { tachoMode == 0 }
  ;       field = "Tacho sweep on boot",      useTachoSweep
  ;       field = "Tacho sweep Max RPM",      tachoSweepMaxRPM, { useTachoSweep }

  ;   dialog = accelEnrichments_aeSettings, ""
  ;       field = "Enrichment mode",      aeMode
  ;       field = "Enrichment method",    aeApplyMode
  ;       field = "TPSdot Threshold",     taeThresh,      { aeMode == 0 }
  ;       field = "Min. TPS change",      taeMinChange,   { aeMode == 0 }
  ;       field = "MAPdot Threshold",     maeThresh,      { aeMode == 1 }
  ;       field = "Min. MAP change",      maeMinChange,   { aeMode == 1 }
  ;       field = "Accel Time",           aeTime
  ;       field = "Taper Start RPM",      aeTaperMin
  ;       field = "Taper End RPM",        aeTaperMax

  ;   dialog = decelEnleanment, "Deceleration Enleanment"
  ;       field = "Fuel Amount",         decelAmount

  ; dialog = accelEnrichments_coldAdj, "Acceleration Enrichment cold adjustment"
  ;       field = "Cold adjustment",      aeColdPct
  ;       field = "Cold adjustment taper start temperature",  aeColdTaperMin
  ;       field = "Cold adjustment taper end temperature",  aeColdTaperMax

  ;   dialog = accelEnrichments_south, "Deceleration Fuel Cutoff (DFCO)"
  ;     field = "Enabled", dfcoEnabled
  ;     field = "TPS Threshold", dfcoTPSThresh,           { dfcoEnabled }
  ;     field = "Minimum engine temperature", dfcoMinCLT, { dfcoEnabled }
  ;     field = "Cutoff delay", dfcoDelay,                { dfcoEnabled }
  ;     field = "Cutoff RPM", dfcoRPM,                    { dfcoEnabled }
  ;     field = "RPM Hysteresis", dfcoHyster,             { dfcoEnabled }
  ;     field = "Enable cutoff taper", dfcoTaperEnable,   { dfcoEnabled }
  ;     field = "Cutoff taper time", dfcoTaperTime,       { dfcoEnabled && dfcoTaperEnable }
  ;     field = "Taper end fuel amount", dfcoTaperFuel,   { dfcoEnabled && dfcoTaperEnable }
  ;     field = "Taper advance remove", dfcoTaperAdvance, { dfcoEnabled && dfcoTaperEnable }

  ;   dialog = accelEnrichments_north_south, ""
  ;     liveGraph = pump_ae_Graph, "AE Graph"
  ; #if LAMBDA
  ;           graphLine = lambda
  ; #else
  ;           graphLine = afr
  ; #endif
  ;           graphLine = TPSdot, "%", -2000, 2000, auto, auto
  ;           graphLine = MAPdot, "%", -2000, 2000, auto, auto

  ;   dialog = accelEnrichments_north, "", xAxis
  ;       panel = time_accel_tpsdot_curve,  { aeMode == 0 }
  ;       panel = time_accel_mapdot_curve,  { aeMode == 1 }

  ;   dialog = accelEnrichments_center, "Acceleration Enrichment", xAxis
  ;       panel = accelEnrichments_aeSettings
  ;       panel = accelEnrichments_coldAdj

  ;   dialog = accelEnrichments, "Acceleration Enrichment"
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Acceleration_Wizard"
  ;       panel = accelEnrichments_north, North
  ;       panel = accelEnrichments_north_south, Center
  ;       panel = accelEnrichments_center, Center
  ;       panel = decelEnleanment
  ;       panel = accelEnrichments_south, South

  ;   dialog = veTableDialog_north, ""
  ;       panel = veTable1Tbl, North

  ;   dialog = veTableLegacy, "Legacy Options"
  ;       field = "!The below options are for compatibility and legacy use only."
  ;       field = "They should only be enabled if you have a specific requirement and understand their function"
  ;       field = "Multiply by ratio of AFR to Target AFR", includeAFR,         { egoType == 2 && !incorporateAFR  || (incorporateAFR==includeAFR) }
  ;       field = "Multiply by ratio of stoich AFR/target AFR (incorporate AFR)", incorporateAFR,  { !includeAFR || (incorporateAFR==includeAFR) }

  ;   dialog = veTableDialog_south, ""
  ;       field = "Multiply VE value by MAP ratio", multiplyMAP
  ;       panel = veTableLegacy, Center

  ;   dialog = veTableDialog, "VE Table"
  ;       panel = veTableDialog_north, North
  ;       panel = veTableDialog_south, South

  ;   dialog = fuelTable2Dialog_switch, "Switch Conditions", xAxis 
  ;       field = "Use secondary table when:",     fuel2SwitchVariable
  ;       field = "is greater than:",              fuel2SwitchValue

  ;   dialog = fuelTable2Dialog_input, "Input Options", yAxis 
  ;       field = "Use secondary table when pin",     fuel2InputPin
  ;       field = "Is",                               fuel2InputPolarity
  ;       field = "Use internal pullup on pin",       fuel2InputPullup, { fuel2InputPolarity == 0 }

  ;   dialog = fuelTable2Dialog_north, ""
  ;       field = "Secondary fuel table mode",    fuel2Mode
  ;       field = "Load source",                  fuel2Algorithm,     { fuel2Mode }
  ;       panel = fuelTable2Dialog_switch,        { fuel2Mode == 3 }
  ;       panel = fuelTable2Dialog_input,        { fuel2Mode == 4 }

  ;   dialog = fuelTable2Dialog_south, ""
  ;       panel = fuelTable2Tbl

  ;   dialog = fuelTable2Dialog, "Fuel Table 2"
  ;       panel = fuelTable2Dialog_north, North
  ;       panel = fuelTable2Dialog_south, South,  { fuel2Mode }

  ;   dialog = sparkTable2Dialog_switch, "Switch Conditions", xAxis 
  ;       field = "Use secondary table when:",     spark2SwitchVariable
  ;       field = "is greater than:",              spark2SwitchValue

  ;   dialog = sparkTable2Dialog_input, "Input Options", yAxis 
  ;       field = "Use secondary table when pin",     spark2InputPin
  ;       field = "Is",                               spark2InputPolarity
  ;       field = "Use internal pullup on pin",       spark2InputPullup, { spark2InputPolarity == 0 }

  ;   dialog = sparkTable2Dialog_north, ""
  ;     field = "Secondary advance table mode",       spark2Mode
  ;     field = "Load source",                        spark2Algorithm,     { spark2Mode }
  ;     panel = sparkTable2Dialog_switch,             { spark2Mode == 3 }
  ;     panel = sparkTable2Dialog_input,              { spark2Mode == 4 }

  ;   dialog = sparkTable2Dialog_south, ""
  ;       panel = spark2Tbl

  ;   dialog = sparkTable2Dialog, "Spark Table 2"
  ;     panel = sparkTable2Dialog_north, North
  ;     panel = sparkTable2Dialog_south, South,  { spark2Mode }

  ;   dialog = injAngleDialog, "Injector close angles"
  ;     panel = injector_timing_curve

  ;   dialog = injOpenTimeDialog, "Injector opening time"
  ;     field = "Injector Open Time",               injOpen
  ;     field = "Battery Voltage Correction Mode",  battVCorMode
  ;     panel = injector_voltage_curve

  ;   dialog = injChars, "Injector Characteristics"
  ;     topicHelp = "http://wiki.speeduino.com/en/configuration/Injector_Characteristics"
  ;     field = "Injector Duty Limit",        dutyLim
  ;     panel = injOpenTimeDialog
  ;     panel = injAngleDialog

  ;   dialog = egoControl, ""
  ;     topicHelp = "http://wiki.speeduino.com/en/configuration/O2"
  ;     field = "Sensor Type",                egoType
  ;     field = "WBO over CAN",               canWBO, {}, { CANisAvailable && (egoType == 2) }
  ;     field = "#Please ensure you calibrate your O2 sensor in the Tools menu", {}, {}, { egoType && (canWBO == 0) }
  ;     field = "Algorithm",                  egoAlgorithm,       { egoType }
  ;     field = "Ignition Events per Step",   egoCount,           { egoType && (egoAlgorithm < 3) }
  ;     field = "Controller Auth +/-",        egoLimit,           { egoType && (egoAlgorithm < 3) }

  ;     field = "Only correct above ",        ego_min_afr,        { egoType && (egoAlgorithm < 3) }
  ;     field = "and correct below ",         ego_max_afr,        { egoType && (egoAlgorithm < 3) }
  ;     field = "Only correct above ",        ego_min_lambda,     { egoType && (egoAlgorithm < 3) }
  ;     field = "and correct below ",         ego_max_lambda,     { egoType && (egoAlgorithm < 3) }

  ;     field = "Active Above Coolant",       egoTemp,            { egoType && (egoAlgorithm < 3) }
  ;     field = "Active Above RPM",           egoRPM,             { egoType && (egoAlgorithm < 3) }
  ;     field = "Active Below TPS",           egoTPSMax,          { egoType && (egoAlgorithm < 3) }
  ;     field = "Active Below MAP",           egoMAPMax,          { egoType && (egoAlgorithm < 3) }
  ;     field = "Active Above MAP",           egoMAPMin,          { egoType && (egoAlgorithm < 3) }
  ;     field = "EGO delay after start",      ego_sdelay,         { (egoAlgorithm < 3) }
  ;     field = "PID Proportional Gain",      egoKP,              { egoType && (egoAlgorithm == 2) }
  ;     field = "PID Integral",               egoKI,              { egoType && (egoAlgorithm == 2) }
  ;     field = "PID Derivative",             egoKD,              { egoType && (egoAlgorithm == 2) }

  ;   dialog = fanSettings,"Fan Settings",7
  ;     topicHelp = "http://wiki.speeduino.com/en/configuration/Thermo_fan"
  ;     displayOnlyField = !"No PWM Fan available on MCU", blankfield, {intcan_available == 0 && fanEnable == 2},{intcan_available == 0 && fanEnable == 2}    
  ;     field = "Fan Mode",                   fanEnable
  ;     field = "Allow fan when off",         fanWhenOff,         { fanEnable }
  ;     field = "Allow fan when cranking",    fanWhenCranking,    { fanEnable }
  ;     field = "Fan output pin",             fanPin,             { fanEnable }
  ;     field = "Fan Output Inverted",        fanInv,             { fanEnable }
  ;     field = "Fan switching temperature",  fanSP, { fanEnable == 1 }
  ;     field = "Fan hysteresis",             fanHyster, { fanEnable == 1 }
  ;     field = "PWM fan frequency",          fanFreq, { intcan_available && fanEnable == 2 }

  ; dialog = pwmFan, "PWM Fan Curve",
  ;       panel = pwm_fan_curve,

  ;   dialog = airConIdleUp, "Idle Up When A/C Compressor On"
  ;     field = "Idle-Up Amount",                   airConIdleSteps,        { airConEnable }
  ;     field = "Idle-Up RPM Adder",                airConIdleUpRPMAdder,   { airConEnable }

  ;   dialog = airConRPMLimit,"RPM Limiting"
  ;     field = "Min. RPM for A/C Operation",       airConMinRPM,           { airConEnable }
  ;     field = "Max. RPM for A/C Operation",       airConMaxRPM,           { airConEnable }
  ;     field = "Lockout time after high/low RPM",  airConRPMCutTime,       { airConEnable }

  ;   dialog = airConTPSLimit,"TPS Limiting"
  ;     field = "Cut A/C at TPS Position",          airConTPSCut,           { airConEnable }
  ;     field = "Lockout time after high TPS",      airConTPSCutTime,       { airConEnable }

  ;   dialog = airConCoolantTempLimit,"Coolant Temp. Limiting"
  ;     field = "Coolant A/C Cutout Temp.",         airConClTempCut,        { airConEnable }

  ;   dialog = airConFanSettings
  ;     field = "Run Engine Cooling Fan with A/C",  airConTurnsFanOn,       { airConEnable }
  ;     field = "Min. Duty for PWM Cooling Fan",    airConPwmFanMinDuty,    { airConEnable }
  ;     field = "Stand-Alone A/C Fan",              airConFanEnabled,       { airConEnable }
  ;     field = "Stand-Alone A/C Fan Output Pin",   airConFanPin,           { airConEnable && airConFanEnabled }
  ;     field = "Stand-Alone A/C Fan Output Polarity", airConFanPol,        {airConEnable && airConFanEnabled }

  ;   dialog = airCon,"Air Conditioning"
  ;     field = "Air Conditioning Enable",          airConEnable
  ;     field = "A/C Request Input Pin",            airConReqPin,           { airConEnable }
  ;     field = "A/C Compressor Output Pin",        airConCompPin,          { airConEnable }
  ;     field = "A/C Request Input Polarity",       airConReqPol,           { airConEnable }
  ;     field = "A/C Comp. Output Polarity",        airConCompPol,          { airConEnable }
  ;     field = "A/C Comp. On Delay (During Operation)", airConCompOnDelay, { airConEnable }
  ;     field = "A/C Initial Delay After Cranking", airConAfterStartDelay,  { airConEnable }
  ;     panel = airConRPMLimit
  ;     panel = airConTPSLimit
  ;     panel = airConCoolantTempLimit
  ;     panel = airConFanSettings
  ;     panel = airConIdleUp

  ;   dialog = stepper_idle, "Stepper Idle"
  ;     field = "Step time (ms)",       iacStepTime,              { iacAlgorithm == 4 || iacAlgorithm == 5 || iacAlgorithm == 7 }
  ;     field = "Cool time (ms)",       iacCoolTime,              { iacAlgorithm == 4 || iacAlgorithm == 5 || iacAlgorithm == 7 }
  ;     field = "Home steps",           iacStepHome,              { iacAlgorithm == 4 || iacAlgorithm == 5 || iacAlgorithm == 7 }
  ;     field = "Step Hysteresis",      iacStepHyster,            { iacAlgorithm == 4 || iacAlgorithm == 5 || iacAlgorithm == 7 }
  ;     field = "Don't exceed",         iacMaxSteps,              { iacAlgorithm == 4 || iacAlgorithm == 5 || iacAlgorithm == 7 }
  ;     field = "Stepper Inverted",     iacStepperInv,            { iacAlgorithm == 4 || iacAlgorithm == 5 || iacAlgorithm == 7 }
  ;     field = "Stepper Power",        iacStepperPower,          { iacAlgorithm == 4 || iacAlgorithm == 5 || iacAlgorithm == 7 }

  ;   dialog = pwm_idle, "PWM Idle"
  ;     field = "Number of outputs",    iacChannels,              { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 }
  ;     field = "Idle valve frequency", idleFreq,                 { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 }
  ;     field = "Idle valve direction", iacPWMdir,                { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 }
  ;     field = "Run before start",     iacPWMrun,                { iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 }

  ;   dialog = closedloop_idle, "Closed loop Idle"
  ;     displayOnlyField = "#                      !!! Please note that 1.0 means 100% !!!"
  ;     field = "P",                    idleKP,                   { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 }
  ;     field = "I",                    idleKI,                   { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 }
  ;     field = "D",                    idleKD,                   { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 }
  ;     field = "Minimum valve value",  iacCLminValue,             { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 }
  ;     field = "Maximum valve value",  iacCLmaxValue,             { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 }
  ;     field = "Integral reset above TPS",     iacTPSlimit,     { iacAlgorithm == 6 || iacAlgorithm == 7 }
  ;     field = "Integral reset RPM Hysteresis", iacRPMlimitHysteresis, { iacAlgorithm == 6 || iacAlgorithm == 7 }

  ;   dialog = idleSettings, "Idle Settings"
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Idle"
  ;       field = "Idle control type",    iacAlgorithm
  ;       field = "Crank to run taper", idleTaperTime,            { iacAlgorithm == 2 || iacAlgorithm == 4 || iacAlgorithm == 5 || iacAlgorithm == 7 }
  ;       field = "#Fast Idle"
  ;       field = "Fast idle temp",     iacFastTemp,              { iacAlgorithm == 1 }
  ;       panel = pwm_idle
  ;       panel = stepper_idle
  ;       panel = closedloop_idle

  ;   dialog = idleUpInputSettingsPanel, "Idle Up Input Settings", yAxis
  ;       field = "Idle Up Enabled",      	idleUpEnabled
  ;       field = "Idle Up Pin",          	idleUpPin,              { idleUpEnabled }
  ;       field = "Idle Up Pin Polarity", 	idleUpPolarity,         { idleUpEnabled }
  ;       field = "Idle Up Amount",       	idleUpAdder,            { idleUpEnabled }

  ;   dialog = idleUpOutputSettingsPanel, "Idle Up Output Settings", yAxis
  ;       field = "Idle Up Output Enabled", 	idleUpOutputEnabled,    { idleUpEnabled }
  ;       field = "Idle Up Output Inverted",  idleUpOutputInv,        { idleUpEnabled && idleUpOutputEnabled }
  ;       field = "Idle Up Output Pin",       idleUpOutputPin,        { idleUpEnabled && idleUpOutputEnabled }

  ;   dialog = idleUpSettings, "Idle Up Settings"
  ;       panel = idleUpInputSettingsPanel
  ;       panel = idleUpOutputSettingsPanel

  ;   dialog = fuelpump, "Fuel pump"
  ;       field = "Fuel pump pin",                    fuelPumpPin
  ;       field = "Fuel pump prime duration",         fpPrime

  ;   dialog = crankingEnrichDialog, "Cranking Enrichment", yAxis
  ;       panel = cranking_enrich_curve
  ;       field = "#Note"
  ;       field = "Values are specified as modifiers to the normal fuelling. Eg 100% = No change."

  ;   dialog = crankingIgnOptions, "Cranking Timing", yAxis
  ;       field = "Cranking advance Angle",       CrankAng,       { ignCranklock == 0 }
  ;       field = "Add cold advance",    crkngAddCLTAdv,          { ignCranklock == 0 }
  ;       field = "Cranking bypass", ignBypassEnable
  ;       field = "Bypass output pin", ignBypassPin               { ignBypassEnable }
  ;       field = "Fix cranking timing with trigger", ignCranklock,   { TrigPattern == 1 || TrigPattern == 4 || TrigPattern == 10 || TrigPattern == 9 }

  ;   dialog = crankingOptions, "", yAxis
  ;       field = "Cranking RPM (Max)", crankRPM
  ;       field = "Flood Clear level", tpsflood
  ;       field = "Fuel pump prime duration", fpPrime
  ;       field = "Injectors priming delay", primingDelay
  ;       field = "Cranking enrichment taper time", crankingEnrichTaper

  ;   dialog = primePW, "Priming Pulsewidth"
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Priming"
  ;       panel = priming_pw_curve

  ;   dialog = crankPW, "Cranking Settings", yAxis
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Cranking"
  ;       panel = crankingOptions, North
  ;       panel = crankingEnrichDialog, Center
  ;       panel = crankingIgnOptions, South

  ;   dialog = ASE_amount, "Enrichment amount (%)", yAxis
  ;       field = "Defines the fuel enrichment percentage after start."
  ;       field = "This is needed to keep engine running after start"
  ;       field = "Common values are 5% when engine is hot to 50% when engine is cold."
  ;       panel = afterstart_enrichment_curve

  ;   dialog = ASE_time, "Duration (s)", yAxis
  ;       field = "How long time the After Start Enrichment is applied in seconds."
  ;       field = "Usually this is varies from 1-2s when engine is hot up to 20s on a cold engine."
  ;       field = "Transition time to disable", aseTaperTime
  ;       panel = afterstart_enrichment_time

  ;   dialog = ASE, "Afterstart Enrichment(ASE)", yAxis
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/ASE"
  ;       field = "#Time and duration curves share common coolant values"
  ;       panel = ASE_amount
  ;       panel = ASE_time

  ;   dialog = triggerSettings,"Trigger Settings",4
  ;       topicHelp = "http://wiki.speeduino.com/en/decoders"
  ;       field = "Trigger Pattern",                TrigPattern
  ;       field = "Primary base teeth",             numTeeth,       { TrigPattern == 0 || TrigPattern == 2 || TrigPattern == 11 || TrigPattern == 18 || TrigPattern == 19  || TrigPattern == 21 }
  ;       field = "Primary trigger speed",          TrigSpeed,      { TrigPattern == 0 || TrigPattern == 2 }
  ;       field = "Missing teeth",                  missingTeeth,   { TrigPattern == 0 }
  ;       field = "Trigger angle multiplier",       TrigAngMul,     { TrigPattern == 11 }
  ;       field = "Trigger Angle ",                 TrigAng
  ;       field = "This number represents the angle ATDC when "
  ;       field = "tooth #1 passes the primary sensor."
  ;       field = ""
  ;       field = "Skip Revolutions",              SkipCycles
  ;       field = "Note: This is the number of revolutions that will be skipped during"
  ;       field = "cranking before the injectors and coils are fired"
  ;       field = "Trigger edge",                   TrigEdge      { TrigPattern != 4 && TrigPattern != 22 } ;4G63 uses both edges ;NGC uses both edges
  ;       field = "Secondary trigger edge",         TrigEdgeSec,  { (TrigPattern == 0 && TrigSpeed == 0 && trigPatternSec != 2) || TrigPattern == 2 || TrigPattern == 9 || TrigPattern == 12 || TrigPattern == 18 || TrigPattern == 19 || TrigPattern == 20 || TrigPattern == 21 || TrigPattern == 24 || TrigPattern == 25 } ;Missing tooth, dual wheel and Miata 9905, weber-marelli, ST170, DRZ400 Renix, Rover MEMS, K6A
  ;       field = "Level for 1st phase",             PollLevelPol,   { (TrigPattern == 0 && TrigSpeed == 0 && trigPatternSec == 2) }
  ;       field = "Missing Tooth Secondary type",   trigPatternSec,   { (TrigPattern == 0&& TrigSpeed == 0) || TrigPattern == 25 }
  ;       field = "Trigger Filter",                 TrigFilter,   { TrigPattern != 13 }
  ;       field = "Re-sync every cycle",            useResync,    { TrigPattern == 2 || TrigPattern == 4 || TrigPattern == 7 || TrigPattern == 12 || TrigPattern == 9 || TrigPattern == 13 || TrigPattern == 18 || TrigPattern == 19  || TrigPattern == 21 } ;Dual wheel, 4G63, Audi 135, Nissan 360, Miata 99-05, weber-marelli. DRZ400

  ;   dialog = lockSparkSettings, "Locked timing"
  ;       field = "Enabled Fixed/Locked timing",  fixAngEnable
  ;       field = "Fixed Angle",                  FixAng,         { fixAngEnable }
  ;       field = "#Note: During cranking the fixed/locked timing angle is overridden by the Cranking advance angle value above"

  ;   dialog = newIgnitionMode, "Per tooth ignition events"
  ;     field = "This option is will generally improve accuracy on most compatible triggers"
  ;     field = "However if timing issues are encountered, please disable this"
  ;     field = "Enable per tooth timing",        perToothIgn
  ;     field = "Dwell error correction",         dwellErrCorrect,{ perToothIgn }
      

  ;   dialog = sparkSettings,"Spark Settings",4
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Spark_Settings"
  ;       field = "!Warning: The board you have selected may not have enough channels for sequential ignition!", {}, {}, { sparkMode == 3 && !sequentialIgnitionAvailable }
  ;       field = "Ignition load source",         ignAlgorithm
  ;       field = "Spark output mode",            sparkMode
  ;       field = "Cranking advance Angle",       CrankAng
  ;       field = "Spark Outputs triggers",        IgInv
  ;       panel = lockSparkSettings
  ;       panel = newIgnitionMode, { 1 }, {TrigPattern == 0 || TrigPattern == 1 || TrigPattern == 2 || TrigPattern == 3 || TrigPattern == 4 || TrigPattern == 9 || TrigPattern == 12 || TrigPattern == 13 || TrigPattern == 16 || TrigPattern == 18 || TrigPattern == 19 || TrigPattern == 22 || TrigPattern == 24 || TrigPattern == 25 || TrigPattern == 26 } ;Only works for missing tooth, distributor, dual wheel, GM 7X, 4g63, Miata 99-05, nissan 360, Subaru 6/7, 420a, weber-marelli, NGC Renix, K6A
        
  ;   dialog = dwellSettings,                 "Dwell Settings",   4
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Dwell"
  ;       field = "  Cranking dwell",           dwellcrank
  ;       field = "  Use dwell map",            useDwellMap
  ;       field = "  Running dwell",            dwellrun, { useDwellMap == 0 }
  ;       field = "  Spark duration",           sparkDur
  ;       ;field = "  Dwell scale for repeated spark",           ignRptScale,  { crankIgnOutRpt }
  ;       field = ""
  ;       field = "#Note"
  ;       field = "The above times are for 12V. Voltage correction"
  ;       field = "is applied. At higher voltages the time is reduced"
  ;       field = "and when low it is increased"
  ;       field = ""
  ;       field = "Overdwell protection"
  ;       field = "Use Overdwell protection",  useDwellLim
  ;       field = "Max dwell time",             dwellLim,  { useDwellLim }
  ;       field = "Note: Set the maximum dwell time at least 3ms above"
  ;       field = "your desired dwell time (Including cranking)"
    
  ;   dialog = idleAdvanceSettings_east
  ;       field = "Idle advance mode",                   idleAdvEnabled
  ;       field = "Idle detect mode",                    idleAdvAlgorithm,     { idleAdvEnabled >= 1 }
  ;       field = "Delay before idle control starts (s)",idleAdvDelay,         { idleAdvEnabled >= 1 }
  ;       field = "Active Below RPM",                    idleAdvRPM,           { idleAdvEnabled >= 1 }
  ;       field = "Active Below TPS",                    idleAdvTPS,           { idleAdvEnabled >= 1 && idleAdvAlgorithm == 0 }
  ;       field = "Active Below VSS",                    idleAdvVss,           { idleAdvEnabled >= 1 && vssMode > 0 }
  ;       field = "Activate after",                      idleAdvStartDelay,    { idleAdvEnabled >= 1 }
  ;       field = "Closed Throttle Sensor Enabled",      CTPSEnabled,          { idleAdvEnabled >= 1 && idleAdvAlgorithm == 1 }
  ;       field = "Closed Throttle Sensor Pin",          CTPSPin,              { idleAdvEnabled >= 1 && idleAdvAlgorithm == 1 && CTPSEnabled == 1 }
  ;       field = "Closed Throttle Sensor Pin Polarity", CTPSPolarity,         { idleAdvEnabled >= 1 && idleAdvAlgorithm == 1 && CTPSEnabled == 1 }

  ;   dialog = idleAdvanceSettings,"Idle Advance Settings", xAxis
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/IdleAdvance"
  ;       panel = idleAdvanceSettings_east
  ;       panel = idle_advance_curve,         { idleAdvEnabled >= 1 }
  ;       panel = iacClosedLoop_curve,        { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7|| idleAdvEnabled >= 1 }
        

  ;   dialog = rotary_ignition,               "Rotary Ignition",  4
  ;       field = "Ignition Configuration",   rotaryType
  ;       panel = rotaryTrailing_curve

  ;   dialog = boostCut, "Boost Cut", 
  ;       field = "Enable Boost limit",       boostCutEnabled
  ;       field = "Boost Limit",              boostLimit,     { boostCutEnabled }
    
  ;   dialog = boostByGear, "Boost by Gear"
  ;       field = "Enable Boost by Gear",      boostByGearEnabled
  ;       field = "Gear 1 ",                   boostByGear1,          { boostByGearEnabled }
  ;       field = "Gear 2 ",                   boostByGear2,          { boostByGearEnabled }
  ;       field = "Gear 3 ",                   boostByGear3,          { boostByGearEnabled }
  ;       field = "Gear 4 ",                   boostByGear4,          { boostByGearEnabled }
  ;       field = "Gear 5 ",                   boostByGear5,          { boostByGearEnabled }
  ;       field = "Gear 6 ",                   boostByGear6,          { boostByGearEnabled }

  ;   dialog = boostBaseDC, "Closed loop initial duty"
  ;       field = "Base duty cycle to be used for a given boost target", {}, { boostType == 2 }
  ;       panel = boostDCLupTbl,              { boostEnabled && boostType == 1  }
    
  ;   dialog = boostDCTarget, "Primary Boost table"
  ;       field = "In open loop mode, the values in this table are duty cycle %", {}, {}, { boostType == 0 }
  ;       field = "In closed loop mode, the values in this table are boost targets in kPa", {}, {}, { boostType == 1 }
  ;       panel = boostTbl

  ;   dialog = boostLoad, ""
  ;       field = "Mode",                     boostType
  ;       panel = boostDCTarget
  ;       panel = boostBaseDC, { boostType == 1 }

  ;     dialog = coolantProtection, "Coolant Based Rev Limit"
  ;       panel = coolant_prot_curve, { hardRevMode == 2 }

  ;   dialog = revLimiterDialog, "Rev Limiter"
  ;       field = "Rev Limiter"
  ;       field = "!Soft limiter only available with ignition cut", {}, {}, { engineProtectType == 2 }
  ;       field = "Soft rev limit",             SoftRevLim,     { engineProtectType == 1 || engineProtectType == 3 } ;Only available for the protection modes that include ignition. 
  ;       field = "Soft limiter mode",          SoftLimitMode,  { engineProtectType == 1 || engineProtectType == 3 } ;Only available for the protection modes that include ignition. 
  ;       field = "Soft limit timing",          SoftLimRetard,  { engineProtectType == 1 || engineProtectType == 3 } ;Only available for the protection modes that include ignition. 
  ;       field = "Soft limit max time",        SoftLimMax,     { engineProtectType == 1 || engineProtectType == 3 } ;Only available for the protection modes that include ignition. 
  ;       field = "Hard limiter mode",          hardRevMode
  ;       field = "Fixed Rev limit",            hardRevLim,     { hardRevMode == 1 }
  ;       panel = coolantProtection,                            { hardRevMode == 2 }
        
  ;   dialog = oilPressureProtection, "Oil Pressure"
  ;       field = "Oil Pressure Protection",  oilPressureProtEnbl, { oilPressureEnable }
  ;       field = "Oil Pressure cut delay",   oilPressureProtTime, { oilPressureEnable && oilPressureProtEnbl }
  ;       panel = oil_pressure_prot_curve, { oilPressureEnable && oilPressureProtEnbl }

  ;   ; AFR engine protection dialog
  ;   dialog = afrProtect, "AFR Protection", yAxis
  ;       field = "AFR protection is used to prevent engine from running lean"
  ;       field = "#Note: This function requires wideband sensor and proper AFR table"
  ;       field = ""
  ;       field = "Enable AFR protection ", afrProtectEnabled, {egoType == 2}
  ;       field = "Minimum manifold air pressure ", afrProtectMAP, {afrProtectEnabled}
  ;       field = "Minimum engine RPM ", afrProtectRPM, {afrProtectEnabled}
  ;       field = "Minimum throttle position ", afrProtectTPS, {afrProtectEnabled}
  ;       field = "Maximum lambda ", afrProtectDeviationLambda, {afrProtectEnabled}, {afrProtectEnabled == 0 || afrProtectEnabled == 1}
  ;       field = "Maximum lambda deviation ", afrProtectDeviationLambda, {afrProtectEnabled}, {afrProtectEnabled == 2}
  ;       field = "Maximum AFR ", afrProtectDeviation, {afrProtectEnabled}, {afrProtectEnabled == 0 || afrProtectEnabled == 1}
  ;       field = "Maximum AFR deviation ", afrProtectDeviation, {afrProtectEnabled}, {afrProtectEnabled == 2}
  ;       field = "Time before cut ", afrProtectCutTime, {afrProtectEnabled}
  ;       field = ""
  ;       field = "Reactivate below throttle ", afrProtectReactivationTPS, {afrProtectEnabled}

  ;   indicatorPanel = protectIndicatorPanel, 1, { 1 } 
  ;       indicator = { engineProtectStatus}, "Engine Protect OFF",   "Engine Protect ON",   green, black, red,      black
  ;       indicator = { engineProtectRPM   }, "Rev Limiter Off",      "Rev Limiter ON",      green, black, red,      black
  ;       indicator = { engineProtectMAP   }, "Boost Limit OFF",      "Boost Limit ON",      green, black, red,      black
  ;       indicator = { engineProtectOil   }, "Oil Pres. Protect OFF","Oil Pres. Protect ON",green, black, red,      black
  ;       indicator = { engineProtectAFR   }, "AFR Protect OFF",      "AFR Protect ON",      green, black, red,      black
  ;       indicator = { engineProtectCoolant }, "Coolant Protect OFF", "Coolant Protect ON", green, black, red,      black

  ;   dialog = engineProtectionWest, "Engine Protection"
  ;       field = "Protection RPM Limit ('Limp Home')",   engineProtectMaxRPM, { engineProtectType }
  ;       panel = protectIndicatorPanel,                              { engineProtectType }

  ;   dialog = engineProtection,                   "Hard Limit Configuration",      yAxis
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Rev_Limits"
  ;       field = "Protection Cut",              engineProtectType
  ;       ;field = "!It is recommended to use Spark Cut on non-sequential fuel configurations", {}, {}, { engineProtectType > 1 && injLayout != 3 }
  ;       field = "Cut method",                  hardCutType,         { engineProtectType > 0 } ;Only available for the protection modes that include ignition. 
  ;       panel = rolling_prot_curve, { hardCutType == 1 }
  ;       panel = engineProtectionWest

  ;   dialog = clutchInput,                   "Clutch input"
  ;       field = "Clutch Input Pin",             launchPin,      { launchEnable || flatSEnable }
  ;       field = "Clutch enabled when signal is",launchHiLo,     { launchEnable || flatSEnable }
  ;       field = "Clutch Pullup Resistor",       lnchPullRes,    { launchEnable || flatSEnable }
  ;       field = "Launch / Flat Shift switch RPM",flatSArm,      { launchEnable || flatSEnable }

  ;   dialog = LaunchControl,                   "Launch Control / Flat shift",      6
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Launch_Flatshift"
  ;       panel = clutchInput
  ;       ; Launch control
  ;       field = "Launch Control"
  ;       field = "Enable Launch",                launchEnable
  ;       field = "TPS threshold",                lnchCtrlTPS,    { launchEnable }
  ;       field = "Vss threshold",                lnchCtrlVss,    { launchEnable && vssMode}
  ;       field = "Soft rev limit",               lnchSoftLim,    { launchEnable }
  ;       field = "Soft limit absolute timing",   lnchRetard,     { launchEnable }
  ;       field = "Hard rev limit",               lnchHardLim,    { launchEnable }
  ;       field = "Fuel adder during launch",     lnchFuelAdd,    { launchEnable }

  ;       ; Flat shift
  ;       field = "Flat Shift"
  ;       field = "Enable flat shift",            flatSEnable
  ;       field = "Soft rev window",              flatSSoftWin,   { flatSEnable }
  ;       field = "Soft limit absolute timing",   flatSRetard,    { flatSEnable }

  ;   dialog = NitrousStage1,                 "Stage 1"
  ;       field = "Nitrous Output Pin",           n2o_stage1_pin
  ;       field = "Minimum Engage RPM",           n2o_stage1_minRPM
  ;       field = "Maximum Engage RPM",           n2o_stage1_maxRPM
  ;       field = "Fuel adder @ Min RPM",         n2o_stage1_adderMin
  ;       field = "Fuel adder @ Max RPM",         n2o_stage1_adderMax
  ;       field = "Ignition retard when active",  n2o_stage1_retard

  ;   dialog = NitrousStage2,                 "Stage 2"
  ;       field = "Nitrous Output Pin",           n2o_stage2_pin
  ;       field = "Minimum Engage RPM",           n2o_stage2_minRPM
  ;       field = "Maximum Engage RPM",           n2o_stage2_maxRPM
  ;       field = "Fuel adder @ Min RPM",         n2o_stage2_adderMin
  ;       field = "Fuel adder @ Max RPM",         n2o_stage2_adderMax
  ;       field = "Ignition retard when active",  n2o_stage2_retard

  ;   dialog = NitrousMain,                   "Settings"
  ;       field = "Nitrous Mode",                 n2o_enable
  ;       field = "Arming Pin",                   n2o_arming_pin, { n2o_enable > 0 }
  ;       field = "Nitrous is armed when pin is", n2o_pin_polarity,{ n2o_enable > 0 }
  ;       field = "Minimum CLT",                  n2o_minCLT,     { n2o_enable > 0 }
  ;       field = "Minimum TPS",                  n2o_minTPS,     { n2o_enable > 0 }
  ;       field = "Maximum MAP",                  n2o_maxMAP,     { n2o_enable > 0 }
  ;       field = "Leanest AFR",                  n2o_maxAFR,     { n2o_enable > 0 }
  ;       field = "Leanest Lambda",               n2o_maxLambda,  { n2o_enable > 0 }

  ;   dialog = NitrousControl,                "Nitrous"
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Nitrous_Control"
  ;       panel = NitrousMain,                North
  ;       panel = NitrousStage1,              West,   { n2o_enable > 0 }
  ;       panel = NitrousStage2,              East,   { n2o_enable > 1 }

  ;   dialog = batCal, "Calibrate voltage reading"
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Sensor_Calibration"
  ;       slider = "Battery Voltage reading offset",  batVoltCorrect, horizontal

  ;   dialog = mapCal, "Calibrate MAP"
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Sensor_Calibration"
  ;       field = "#MAP Sensor"
  ;       settingSelector = "Common Pressure Sensors"
  ;           settingOption = "MPX4115/MPXxx6115A/KP234",  mapMin=10,   mapMax=121 ; https://www.nxp.com/docs/en/data-sheet/MPX4115.pdf Vout = VCC * (0.009*P - 0.095)
  ;           settingOption = "MPX4250A/MPXA4250A",  mapMin=10,   mapMax=260 ; https://www.nxp.com/docs/en/data-sheet/MPX4250A.pdf Vout = VCC x (P x 0.004 – 0.04)
  ;           settingOption = "GM 1-BAR", mapMin=10,   mapMax=105 ; https://speeduino.com/wiki/index.php/File:GM_Table.gif
  ;           settingOption = "GM 2-BAR", mapMin=9,  mapMax=208 ; https://speeduino.com/wiki/index.php/File:GM_Table.gif
  ;           settingOption = "GM 3-BAR", mapMin=1,  mapMax=315 ; VOUT = VS*(.00318*P-.00353)
  ;           settingOption = "MPXH6300A", mapMin=1,  mapMax=315 ; https://www.nxp.com/docs/en/data-sheet/MPXH6300A.pdf VOUT = VS*(.00318*P-.00353)
  ;           settingOption = "MPX5700A", mapMin=-31,  mapMax=746 ; https://www.nxp.com/docs/en/data-sheet/MPX5700.pdf Vout = VS*(0.0012858*P+0.04)
  ;           settingOption = "MPXH6400A", mapMin=3,  mapMax=416 ; https://www.nxp.com/docs/en/data-sheet/MPXH6400A.pdf VOUT = VS x (0.002421xP–0.00842)
  ;           settingOption = "Denso 079800", mapMin=0,  mapMax=173 ; http://speeduino.com/forum/viewtopic.php?f=18&t=510&p=7023#p7021
  ;           settingOption = "VW/Audi/Porsche 250kPa", mapMin=26,  mapMax=250 ; http://speeduino.com/forum/viewtopic.php?p=17502#p17502
  ;           settingOption = "Bosch 3 Bar TMAP", mapMin=-6,  mapMax=323
  ;           settingOption = "MPX4100A",  mapMin=14, mapMax=109 ; https://www.nxp.com/docs/en/data-sheet/MPX4100A.pdf Vout = VS (P x 0.01059 - 0.1518)

  ;       field =    "kPa At 0.0 Volts",   mapMin
  ;       field =    "kPa At 5.0 Volts",   mapMax
  ;       field = "Use legacy MAP reading",legacyMAP

  ;       field = "#Baro Sensor"
  ;       field = "Use external Baro sensor", useExtBaro
  ;       field = "Analog pin to use for ext. Baro sensor", baroPin,  { useExtBaro }

  ;       settingSelector = "Common Pressure Sensors",  { useExtBaro }
  ;           settingOption = "MPX4115/MPXxx6115A/KP234",  baroMin=10,   baroMax=121 ; https://www.nxp.com/docs/en/data-sheet/MPX4115.pdf Vout = VCC * (0.009*P - 0.095)
  ;           settingOption = "MPX4250A/MPXA4250A",  baroMin=10,   baroMax=260 ; https://www.nxp.com/docs/en/data-sheet/MPX4250A.pdf Vout = VCC x (P x 0.004 – 0.04)
  ;           settingOption = "GM 1-BAR", baroMin=10,   baroMax=105 ; https://speeduino.com/wiki/index.php/File:GM_Table.gif
  ;           settingOption = "GM 2-BAR", baroMin=9,  baroMax=208 ; https://speeduino.com/wiki/index.php/File:GM_Table.gif
  ;           settingOption = "GM 3-BAR", baroMin=1,  baroMax=315 ; VOUT = VS*(.00318*P-.00353)
  ;           settingOption = "MPXH6300A", baroMin=1,  baroMax=315 ; https://www.nxp.com/docs/en/data-sheet/MPXH6300A.pdf VOUT = VS*(.00318*P-.00353)
  ;           settingOption = "MPX5700A", baroMin=-31,  baroMax=746 ; https://www.nxp.com/docs/en/data-sheet/MPX5700.pdf Vout = VS*(0.0012858*P+0.04)
  ;           settingOption = "MPXH6400A", baroMin=3,  baroMax=416 ; https://www.nxp.com/docs/en/data-sheet/MPXH6400A.pdf VOUT = VS x (0.002421xP–0.00842)
  ;           settingOption = "Denso 079800", baroMin=0,  baroMax=173 ; http://speeduino.com/forum/viewtopic.php?f=18&t=510&p=7023#p7021
  ;           settingOption = "VW/Audi/Porsche 250kPa", baroMin=26,  baroMax=250 ; http://speeduino.com/forum/viewtopic.php?p=17502#p17502
  ;           settingOption = "Bosch 3 Bar TMAP", baroMin=-6,  baroMax=323
  ;           settingOption = "MPX4100A",  baroMin=14, baroMax=109 ; https://www.nxp.com/docs/en/data-sheet/MPX4100A.pdf Vout = VS (P x 0.01059 - 0.1518)

  ;       field =    "kPa At 0.0 Volts",   baroMin,  { useExtBaro }
  ;       field =    "kPa At 5.0 Volts",   baroMax,  { useExtBaro }

  ;       field = "#EMAP Sensor"
  ;       field = "Use EMAP sensor", useEMAP
  ;       field = "Analog pin to use", EMAPPin,  { useEMAP }

  ;       settingSelector = "Common Pressure Sensors",  { useEMAP }
  ;           settingOption = "MPX4115/MPXxx6115A/KP234",  EMAPMin=10,   EMAPMax=118 ; https://www.nxp.com/docs/en/data-sheet/MPX4115.pdf
  ;           settingOption = "MPX4250A/MPXA4250A",  EMAPMin=10,   EMAPMax=260 ; https://www.nxp.com/docs/en/data-sheet/MPX4250A.pdf Vout = VCC x (P x 0.004 – 0.04)
  ;           settingOption = "GM 1-BAR", EMAPMin=10,   EMAPMax=105 ; https://speeduino.com/wiki/index.php/File:GM_Table.gif
  ;           settingOption = "GM 2-BAR", EMAPMin=9,  EMAPMax=208 ; https://speeduino.com/wiki/index.php/File:GM_Table.gif
  ;           settingOption = "GM 3-BAR", EMAPMin=1,  EMAPMax=315 ; VOUT = VS*(.00318*P-.00353)
  ;           settingOption = "MPXH6300A", EMAPMin=1,  EMAPMax=315 ; https://www.nxp.com/docs/en/data-sheet/MPXH6300A.pdf VOUT = VS*(.00318*P-.00353)
  ;           settingOption = "MPX5700A", EMAPMin=-31,  EMAPMax=746 ; https://www.nxp.com/docs/en/data-sheet/MPX5700.pdf Vout = VS*(0.0012858*P+0.04)
  ;           settingOption = "MPXH6400A", EMAPMin=3,  EMAPMax=416 ; https://www.nxp.com/docs/en/data-sheet/MPXH6400A.pdf VOUT = VS x (0.002421xP–0.00842)
  ;           settingOption = "Denso 079800", EMAPMin=0,  EMAPMax=173 ; http://speeduino.com/forum/viewtopic.php?f=18&t=510&p=7023#p7021
  ;           settingOption = "VW/Audi/Porsche 250kPa", EMAPMin=26,  EMAPMax=250 ; http://speeduino.com/forum/viewtopic.php?p=17502#p17502
  ;           settingOption = "MPX4100A",  EMAPMin=14, EMAPMax=109 ; https://www.nxp.com/docs/en/data-sheet/MPX4100A.pdf Vout = VS (P x 0.01059 - 0.1518)

  ;       field =    "kPa At 0.0 Volts",   EMAPMin,  { useEMAP }
  ;       field =    "kPa At 5.0 Volts",   EMAPMax,  { useEMAP }

  ;   dialog = sensorFilters, "Analog sensor filters"
  ;       field = "The values here set the amount of filtering to apply to each analog input"
  ;       field = "Higher values result in stronger filtering, but slower response times for readings"
  ;       field = "#Most setups will NOT require changes to the default filter values"
  ;       field = ""
  ;       slider = "Throttle Position sensor",    ADCFILTER_TPS,  horizontal
  ;       slider = "Coolant sensor",              ADCFILTER_CLT,  horizontal
  ;       slider = "Inlet Air Temp sensor",       ADCFILTER_IAT,  horizontal
  ;       slider = "O2 sensor",                   ADCFILTER_O2,   horizontal
  ;       slider = "Battery voltage",             ADCFILTER_BAT,  horizontal
  ;       slider = "MAP sensor",                  ADCFILTER_MAP,  horizontal
  ;       slider = "Baro sensor",                 ADCFILTER_BARO, horizontal, { useExtBaro > 0 }

  ;   dialog = fuelPressureSettings
  ;       field = "Enabled",                  fuelPressureEnable
  ;       field = "Pin",                      fuelPressurePin,    { fuelPressureEnable }
  ;       settingSelector = "Common Sensors",                     { fuelPressureEnable }
  ;           #if pressure_bar
  ;           settingOption = "0-10 BAR",  fuelPressureMin=-1.25,   fuelPressureMax=11.25 ; regular sensors give 0.5V to 4.5V for 0 bar to rated bar. Formula Vout = P x 4 / P_rated + 0.5
  ;           settingOption = "0-100 PSI",  fuelPressureMin=-0.1,   fuelPressureMax=7.1   ; these are just converted psi to bar. Kept because most off-shelf are in PSI
  ;           settingOption = "0-150 PSI",  fuelPressureMin=-1.25,   fuelPressureMax=11.58
  ;           #else
  ;           settingOption = "0-100 PSI",  fuelPressureMin=-3,   fuelPressureMax=103 ; Vout = VCC x (P x .97 / 200 + 0.5)
  ;           settingOption = "0-150 PSI",  fuelPressureMin=-18,   fuelPressureMax=168 ; Vout = VCC x (P x 0.8 / 150 + 0.1) https://aftermarketindustries.com.au/image/cache/data/aftermarket%20industries%20fuel%20pressure%20sensor%20data%202-500x500.png 
  ;           #endif
  ;       field = "Pressure at 0v",           fuelPressureMin,    { fuelPressureEnable }
  ;       field = "Pressure at 5v",           fuelPressureMax,    { fuelPressureEnable }

  ;   dialog = fuelPressureDialog, "Fuel Pressure", xAxis
  ;       #if pressure_bar
  ;       gauge = fuelPressureBarGauge
  ;       #else
  ;       gauge = fuelPressureGauge
  ;       #endif
  ;       panel = fuelPressureSettings

  ;   dialog = oilPressureSettings
  ;       field = "Enabled",                  oilPressureEnable
  ;       field = "Pin",                      oilPressurePin,    { oilPressureEnable }
  ;       settingSelector = "Common Sensors",                     { oilPressureEnable }
  ;           #if pressure_bar
  ;           settingOption = "0-10 BAR",  oilPressureMin=-1.25,   oilPressureMax=11.25 ; regular sensors give 0.5V to 4.5V for 0 bar to rated bar. Formula Vout = P x 4 / P_rated + 0.5
  ;           settingOption = "0-100 PSI",  oilPressureMin=-0.1,   oilPressureMax=7.1   ; these are just converted psi to bar. Kept because most off-shelf are in PSI
  ;           settingOption = "0-150 PSI",  oilPressureMin=-1.25,   oilPressureMax=11.58
  ;           #else
  ;           settingOption = "0-100 PSI",  oilPressureMin=-3,   oilPressureMax=103 ; Vout = VCC x (P x .97 / 200 + 0.5)
  ;           settingOption = "0-150 PSI",  oilPressureMin=-18,   oilPressureMax=168 ; Vout = VCC x (P x 0.8 / 150 + 0.1) https://aftermarketindustries.com.au/image/cache/data/aftermarket%20industries%20fuel%20pressure%20sensor%20data%202-500x500.png 
  ;           #endif
  ;       field = "Pressure at 0v",           oilPressureMin,    { oilPressureEnable }
  ;       field = "Pressure at 5v",           oilPressureMax,    { oilPressureEnable }

  ;   dialog = oilPressureDialog, "Oil Pressure", xAxis
  ;       #if pressure_bar
  ;       gauge = oilPressureBarGauge
  ;       #else
  ;       gauge = oilPressureGauge
  ;       #endif
  ;       panel = oilPressureSettings

  ;   dialog = pressureSensors, "Pressure Transducers"
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Sensor_Calibration"
  ;       panel = fuelPressureDialog
  ;       panel = oilPressureDialog

  ;   dialog = boostSettings, "Boost Control"
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Boost_Control"
  ;       field = "Boost Control Enabled",    boostEnabled
  ;       field = "Boost control type",       boostType,          { boostEnabled }
  ;       field = "Boost output pin",         boostPin,           { boostEnabled }
  ;       field = "Boost solenoid freq.",     boostFreq,          { boostEnabled }

  ;       field = "Valve minimum duty cycle", boostMinDuty,  { boostEnabled && boostType == 1 }
  ;       field = "Valve maximum duty cycle", boostMaxDuty,  { boostEnabled && boostType == 1 }
  ;       panel = boostCut
  ;       panel = boostByGear,                { boostEnabled && vssMode > 0 }
  ;       field = "Closed Loop settings"
  ;       field = "Control mode",                     boostMode,     { boostEnabled && boostType == 1 }
  ;       field = "Boost control enable trigger",     boostControlEnable          { boostEnabled && boostType == 1 }
  ;       field = "Valve duty when below threshold",  boostDCWhenDisabled         { boostEnabled && boostType == 1 }
  ;       field = "Boost control enable threshold",   boostControlEnableThreshold { boostEnabled && boostControlEnable && boostType == 1 }
  ;       slider = "Sensitivity",                     boostSens,     horizontal,  { boostEnabled && boostType == 1 }
  ;       field = "Control interval",                 boostIntv,     { boostEnabled && boostType == 1 }
  ;       field = "P",                                boostKP,       { boostEnabled && boostMode && boostType == 1 }
  ;       field = "I",                                boostKI,       { boostEnabled && boostMode && boostType == 1 }
  ;       field = "D",                                boostKD,       { boostEnabled && boostMode && boostType == 1 }

  ;   dialog = vvt2, "Second VVT output"
  ;       field = "!VVT2 PWM is shared with WMI. The 2 cannot be used at the same time.", {}, {}, { wmiEnabled }
  ;       field = "VVT2 Control Enabled",    vvt2Enabled,       { !wmiEnabled }
  ;       field = "VVT2 output pin",         vvt2Pin,           { vvt2Enabled }
  ;       field = "VVT2 Trigger edge",       TrigEdgeThrd,      { vvt2Enabled }
  ;       field = "Increased duty direction",vvt2PWMdir,        { vvt2Enabled && vvtMode == 2 }
  ;       field = "VVT2 Cam angle @ 0% duty",vvt2CL0DutyAng,    { vvt2Enabled && vvtMode == 2 }


  ;   dialog = vvtClosedLoop, "Closed loop"
  ;       field = "Increased duty direction", vvtPWMdir
  ;       field = "Hold duty used",           vvtCLUseHold
  ;       field = "Hold duty",                vvtCLholdDuty,  { vvtCLUseHold }
  ;       field = "Adjust fuel timing",       vvtCLAlterFuelTiming
  ;       field = "Cam angle @ 0% duty",      vvtCL0DutyAng
  ;       field = "Minimum Cam angle",        vvtCLMinAng
  ;       field = "Maximum Cam angle",        vvtCLMaxAng
  ;       field = ""
  ;       displayOnlyField = "#                      !!! Please note that 1.0 means 100% !!!"
  ;       field = "Proportional Gain",        vvtCLKP
  ;       field = "Integral Gain",            vvtCLKI
  ;       field = "Differential Gain",        vvtCLKD
  ;       field = "Minimum valve duty",       vvtCLminDuty,           { vvtEnabled && vvtMode == 2 }
  ;       field = "Maximum valve duty",       vvtCLmaxDuty,           { vvtEnabled && vvtMode == 2 }


  ;   dialog = vvtSettings, "VVT Control"
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/VVT"
  ;       field = "VVT Control Enabled",    vvtEnabled
  ;       field = "VVT Minimum CLT",        vvtMinClt,        { vvtEnabled }
  ;       field = "VVT Delay",              vvtDelay,         { vvtEnabled }
  ;       field = "VVT Mode",               vvtMode,          { vvtEnabled }
  ;       field = "#Note: Closed loop is currently experimental and available on Miata and missing tooth patterns ONLY", {}, {}, { vvtMode == 2 }
  ;       field = "Load source",            vvtLoadSource,    { vvtEnabled }
  ;       field = "VVT output pin",         vvt1Pin,          { vvtEnabled }
  ;       field = "VVT solenoid freq.",     vvtFreq,          { vvtEnabled }
  ;       slider = "VVT angle filter ",     ANGLEFILTER_VVT,horizontal, { vvtEnabled }
  ;       panel = vvtClosedLoop,                              { vvtEnabled && vvtMode == 2 }
  ;       panel = vvt2,                                       { vvtEnabled }

  ;   dialog = wmiSettings, "WMI Control"
  ;       field = "!WMI PWM is shared with VVT2. The 2 cannot be used at the same time.", {}, {}, { vvt2Enabled }
  ;       field = "WMI Control Enabled",    wmiEnabled,       { !vvt2Enabled }
  ;       field = "WMI Mode",               wmiMode,          { wmiEnabled }
  ;       field = "WMI min TPS",            wmiTPS,           { wmiEnabled }
  ;       field = "WMI min RPM",            wmiRPM ,          { wmiEnabled }
  ;       field = "WMI min MAP",            wmiMAP,           { wmiEnabled }
  ;       field = "WMI max MAP",            wmiMAP2,          { wmiEnabled && wmiMode == 1}
  ;       field = "WMI min IAT",            wmiIAT,           { wmiEnabled }
  ;       field = "WMI offset",             wmiOffset,        { wmiEnabled && wmiMode == 3}
  ;       field = ""
  ;       field = "WMI PWM output pin",     vvt2Pin,          { wmiEnabled }
  ;       field = "!WMI PWM frequency is the same as VVT. The 2 cannot be set independently.", {}, {}, { vvt2Enabled }
  ;       field = "WMI PWM freq.",          vvtFreq,          { wmiEnabled }
  ;       field = ""
  ;       field = "WMI enabled output pin", wmiEnabledPin,    { wmiEnabled }
  ;       field = ""
  ;       field = "WMI tank empty input",   wmiEmptyEnabled,  { wmiEnabled }
  ;       field = "WMI tank empty pin",     wmiEmptyPin,      { wmiEnabled }
  ;       field = "WMI tank empty polarity",wmiEmptyPolarity, { wmiEnabled }
  ;       field = ""
  ;       field = "WMI tank indicator output",  wmiIndicatorEnabled,  { wmiEnabled }
  ;       field = "WMI tank indicator pin",     wmiIndicatorPin,      { wmiEnabled }
  ;       field = "WMI tank indicator polarity",wmiIndicatorPolarity, { wmiEnabled }
  ;       field = ""
  ;       field = "Ignition advance correction", wmiAdvEnabled, { wmiEnabled }
  ;       panel = wmi_adv_curve, { wmiEnabled && wmiAdvEnabled }

  ;   dialog = warmup, "Warmup Enrichment (WUE) - Percent Multiplier"
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Warmup"
  ;       panel = warmup_curve

  ;   ;Fuel trim composite dialog
  ;   dialog = inj_trim1TblTitle, "Channel #1"
  ;       panel = fuelTrimTable1Tbl,      { fuelTrimEnabled && nCylinders >= 2 }
  ;   dialog = inj_trim2TblTitle, "Channel #2"
  ;       panel = fuelTrimTable2Tbl,      { fuelTrimEnabled && nCylinders >= 2 }
  ;   dialog = inj_trim3TblTitle, "Channel #3"
  ;       panel = fuelTrimTable3Tbl,      { fuelTrimEnabled && nCylinders >= 3 }
  ;   dialog = inj_trim4TblTitle, "Channel #4"
  ;       panel = fuelTrimTable4Tbl,      { fuelTrimEnabled && nCylinders >= 4 }
  ;   dialog = inj_trim5TblTitle, "Channel #5"
  ;       panel = fuelTrimTable5Tbl,      { fuelTrimEnabled && nCylinders >= 5 }
  ;   dialog = inj_trim6TblTitle, "Channel #6"
  ;       panel = fuelTrimTable6Tbl,      { fuelTrimEnabled && nCylinders >= 6 }
  ;   dialog = inj_trim7TblTitle, "Channel #7"
  ;       panel = fuelTrimTable7Tbl,      { fuelTrimEnabled && nCylinders >= 7 }
  ;   dialog = inj_trim8TblTitle, "Channel #8"
  ;       panel = fuelTrimTable8Tbl,      { fuelTrimEnabled && nCylinders >= 8 }

  ;   dialog = inj_trimadt, "", xAxis
  ;       panel = inj_trim1TblTitle
  ;       panel = inj_trim2TblTitle
  ;   dialog = inj_trimadb, "", xAxis
  ;       panel = inj_trim3TblTitle
  ;       panel = inj_trim4TblTitle
  ;   dialog = inj_trimadt_B, "", xAxis
  ;       panel = inj_trim5TblTitle
  ;       panel = inj_trim6TblTitle
  ;   dialog = inj_trimadb_B, "", xAxis
  ;       panel = inj_trim7TblTitle
  ;       panel = inj_trim8TblTitle

  ;   dialog = inj_trim_enable, ""
  ;       field = "Individual fuel trim enabled",     fuelTrimEnabled,    { injLayout == 3 && nCylinders <= nFuelChannels }

  ;   dialog = inj_trimad,"Injector Cyl 1-4 Trims", yAxis
  ;       panel = inj_trim_enable, North
  ;       panel = inj_trimadt, Center
  ;       panel = inj_trimadb, South

  ;   dialog = inj_trimad_B,"Injector Cyl 5-8 Trims", yAxis
  ;       panel = inj_trim_enable, North
  ;       panel = inj_trimadt_B, Center
  ;       panel = inj_trimadb_B, South

  ;   ;;Injector staging
  ;   dialog = stagingTableDialog_north, ""
  ;       field = "Staging enabled", stagingEnabled
  ;       field = "Staging mode",   stagingMode
  ;       field = "Size of primary injectors",    stagedInjSizePri,             { stagingEnabled }
  ;       field = "Size of secondary injectors",  stagedInjSizeSec,             { stagingEnabled }

  ;   dialog = stagingTableDialog_south, ""
  ;       panel = stagingTbl,     { stagingMode == 0 }

  ;   dialog = stagingTableDialog, "Staged injection"
  ;       topicHelp = "http://wiki.speeduino.com/en/configuration/Staged_Injection"
  ;       panel = stagingTableDialog_north, North
  ;       panel = stagingTableDialog_south, South

  ;   dialog = outputtest_warningmessage, ""
  ;       field = "!WARNING! USE AT YOUR OWN RISK. INCORRECT USE WILL DAMAGE YOUR HARDWARE!"
  ;       field = "Do not attempt to use this page whilst your engine is running!"
  ;       field = "Forcing the Injector or Spark outputs could cause flooding of your engine or permanent damage to ignition coils!"


  dialog = enableoutputtestbuttons, "Enable Test Controls", xAxis
    ;commandButton = "Label Text", command, { Enabled Condition }, optionalFlags

    ; The rem > 0 expression is just for testing.. It works when the arduino is on the Stim with rpm.
    ; a status bit there would be the expected real expression
    commandButton = "Enable Test Mode", cmdEnableTestMode,{!testenabled && !testactive }

    ; if clickOnCloseIfEnabled is set, then the command assigned to this button will be run on the
    ; dialog close, but only if the enable condition is true
    ; valid click flags are:
    ; clickOnCloseIfEnabled - the command will be sent on dialog close if active condition is true
    ; clickOnCloseIfDisabled - the command will be sent on dialog close if active condition is false
    ; clickOnClose - the command will be sent on dialog close always
    commandButton = "Stop Test Mode", cmdStopTestMode,{testactive}, clickOnCloseIfEnabled

  dialog = outputtestinj1, "Injector CH1", yAxis
        commandButton = "Off", cmdtestinj1off,{testactive}
        commandButton = "On - Pulsed", cmdtestinj1Pulsed,{!testenabled && testactive}
        commandButton = "On - 100% DC", cmdtestinj1on,{!testenabled && testactive}
    dialog = outputtestinj2, "Injector CH2", yAxis
        commandButton = "Off", cmdtestinj2off,{testactive && nFuelChannels >= 2 }
        commandButton = "On - Pulsed", cmdtestinj2Pulsed,{!testenabled && testactive && nFuelChannels >= 2 }
        commandButton = "On - 100% DC", cmdtestinj2on,{ !testenabled && testactive && nFuelChannels >= 2 }
    dialog = outputtestinj3, "Injector CH3", yAxis
        commandButton = "Off", cmdtestinj3off,{ testactive && nFuelChannels >= 3 }
        commandButton = "On - Pulsed", cmdtestinj3Pulsed,{!testenabled && testactive && nFuelChannels >= 3 }
        commandButton = "On - 100% DC", cmdtestinj3on,{ !testenabled && testactive && nFuelChannels >= 3 }
    dialog = outputtestinj4, "Injector CH4", yAxis
        commandButton = "Off", cmdtestinj4off,{ testactive && nFuelChannels >= 4 }
        commandButton = "On - Pulsed", cmdtestinj4Pulsed,{!testenabled && testactive && nFuelChannels >= 4 }
        commandButton = "On - 100% DC", cmdtestinj4on  ,{ !testenabled && testactive && nFuelChannels >= 4 }
    dialog = outputtestinj5, "Injector CH5", yAxis
        commandButton = "Off", cmdtestinj5off,{ testactive && nFuelChannels >= 5 }
        commandButton = "On - Pulsed", cmdtestinj5Pulsed,{!testenabled && testactive && nFuelChannels >= 5 }
        commandButton = "On - 100% DC", cmdtestinj5on,{ !testenabled && testactive && nFuelChannels >= 5 }
    dialog = outputtestinj6, "Injector CH6", yAxis
        commandButton = "Off", cmdtestinj6off,{ testactive && nFuelChannels >= 6 }
        commandButton = "On - Pulsed", cmdtestinj6Pulsed,{!testenabled && testactive && nFuelChannels >= 6 }
        commandButton = "On - 100% DC", cmdtestinj6on  ,{ !testenabled && testactive && nFuelChannels >= 6 }
    dialog = outputtestinj7, "Injector CH7", yAxis
        commandButton = "Off", cmdtestinj7off,{ testactive && nFuelChannels >= 7 }
        commandButton = "On - Pulsed", cmdtestinj7Pulsed,{!testenabled && testactive && nFuelChannels >= 7 }
        commandButton = "On - 100% DC", cmdtestinj7on,{ !testenabled && testactive && nFuelChannels >= 7 }
    dialog = outputtestinj8, "Injector CH8", yAxis
        commandButton = "Off", cmdtestinj8off,{ testactive && nFuelChannels >= 8 }
        commandButton = "On - Pulsed", cmdtestinj8Pulsed,{!testenabled && testactive && nFuelChannels >= 8 }
        commandButton = "On - 100% DC", cmdtestinj8on  ,{ !testenabled && testactive && nFuelChannels >= 8 }

    dialog = outputtest_injectors_south, "Injector Driver Output Test", xAxis
        panel = outputtestinj1
        panel = outputtestinj2
        panel = outputtestinj3
        panel = outputtestinj4
        panel = outputtestinj5
        panel = outputtestinj6
        panel = outputtestinj7
        panel = outputtestinj8
    
    dialog = outputtest_injectors, "Injector Driver Output Test", yAxis
        field = "Test pulse duration", hwTestInjDuration, {testactive}
        panel = outputtest_injectors_south

  dialog = outputtestspk1, "Spark CH1 ", yAxis
        commandButton = "Off", cmdtestspk1off,{testactive}
        commandButton = "On - Pulsed", cmdtestspk1Pulsed,{!testenabled && testactive}
        commandButton = "On - 100% DC", cmdtestspk1on,{!testenabled && testactive}
  dialog = outputtestspk2, "Spark CH2", yAxis
      commandButton = "Off", cmdtestspk2off,{testactive && nIgnChannels >= 2 }
      commandButton = "On - Pulsed", cmdtestspk2Pulsed,{!testenabled && testactive && nIgnChannels >= 2 }
      commandButton = "On - 100% DC", cmdtestspk2on,{ !testenabled && testactive && nIgnChannels >= 2 }
  dialog = outputtestspk3, "Spark CH3", yAxis
      commandButton = "Off", cmdtestspk3off,{testactive && nIgnChannels >= 3 }
      commandButton = "On - Pulsed", cmdtestspk3Pulsed,{!testenabled && testactive && nIgnChannels >= 3 }
      commandButton = "On - 100% DC", cmdtestspk3on,{ !testenabled && testactive && nIgnChannels >= 3 }
  dialog = outputtestspk4, "Spark CH4", yAxis
      commandButton = "Off", cmdtestspk4off,{testactive && nIgnChannels >= 4 }
      commandButton = "On - Pulsed", cmdtestspk4Pulsed,{!testenabled && testactive && nIgnChannels >= 4}
      commandButton = "On - 100% DC", cmdtestspk4on,{ !testenabled && testactive && nIgnChannels >= 4 }
  dialog = outputtestspk5, "Spark CH5", yAxis
      commandButton = "Off", cmdtestspk5off,{testactive && nIgnChannels >= 5 }
      commandButton = "On - Pulsed", cmdtestspk5Pulsed,{!testenabled && testactive && nIgnChannels >= 5}
      commandButton = "On - 100% DC", cmdtestspk5on,{ !testenabled && testactive && nIgnChannels >= 5 }
  dialog = outputtestspk6, "Spark CH6", yAxis
      commandButton = "Off", cmdtestspk6off,{testactive && nIgnChannels >= 6 }
      commandButton = "On - Pulsed", cmdtestspk6Pulsed,{!testenabled && testactive && nIgnChannels >= 6}
      commandButton = "On - 100% DC", cmdtestspk6on,{ !testenabled && testactive && nIgnChannels >= 6 }
  dialog = outputtestspk7, "Spark CH7", yAxis
      commandButton = "Off", cmdtestspk7off,{testactive && nIgnChannels >= 7 }
      commandButton = "On - Pulsed", cmdtestspk7Pulsed,{!testenabled && testactive && nIgnChannels >= 7}
      commandButton = "On - 100% DC", cmdtestspk7on,{ !testenabled && testactive && nIgnChannels >= 7 }
  dialog = outputtestspk8, "Spark CH8", yAxis
      commandButton = "Off", cmdtestspk8off,{testactive && nIgnChannels >= 8 }
      commandButton = "On - Pulsed", cmdtestspk8Pulsed,{!testenabled && testactive && nIgnChannels >= 8}
      commandButton = "On - 100% DC", cmdtestspk8on,{ !testenabled && testactive && nIgnChannels >= 8 }

    dialog = outputtest_spark_south, "Spark Driver Output Test", xAxis
        panel = outputtestspk1
        panel = outputtestspk2
        panel = outputtestspk3
        panel = outputtestspk4
        panel = outputtestspk5
        panel = outputtestspk6
        panel = outputtestspk7
        panel = outputtestspk8

    dialog = outputtest_spark, "Spark Driver Output Test", yAxis
        field = "Test pulse duration", hwTestIgnDuration, {testactive}
        panel = outputtest_spark_south

  dialog = outputtest1,"Test Output Hardware"
        topicHelp = "http://wiki.speeduino.com/en/Hardware_testing_page"
        panel = enableoutputtestbuttons
        panel = outputtest_injectors
        panel = outputtest_spark
        ;panel = outputtest_io2
        panel = outputtest_warningmessage
    
    dialog = stm32cmd, "STM32 Commands", yAxis
      commandButton = "Reboot to system", cmdstm32reboot
      commandButton = "Reboot to bootloader", cmdstm32bootloader

    dialog = CanBcast, "CAN Broadcasting menu"
        field = "CAN Broadcast Protocol",    CANBroadcastProt

  dialog = Auxin_north  
        displayOnlyField = !"Secondary Serial DISABLED", blankfield, {enable_secondarySerial == 0},{enable_secondarySerial == 0}    
        displayOnlyField = #"Internal CANBUS ENABLED", blankfield, {enable_intcan && intcan_available},{enable_intcan && intcan_available}    
        displayOnlyField = !"Internal CANBUS DISABLED", blankfield, {enable_intcan == 0 && intcan_available},{enable_intcan == 0 && intcan_available}    
        displayOnlyField = !"Internal CANBUS NOT AVAILABLE to MCU", blankfield, {enable_intcan == 1 && intcan_available == 0},{enable_intcan == 1 && intcan_available == 0}    
        displayOnlyField = !"Internal CANBUS NOT AVAILABLE to MCU", blankfield, {enable_intcan == 0 && intcan_available == 0},{enable_intcan == 0 && intcan_available == 0}  
        field = "   If Secondary Serial or Internal CANBUS is DISABLED then any input channel assigned to that external source will NOT function"  
        field = "Transmission Control requires specific inputs be mapped here: Aux0: RPM, Aux1: MAP, Aux2: TPS, Aux3: CoolantTemp"
        
  dialog = selectionOfEdianness. , "Endianness", yAxis    
        field = "", caninputEndianess {(enable_intcan && intcan_available)}

  dialog = canAuxinput_alias, "", yAxis
        field = "Input Alias"
        ; START TRANSMISSION MOD
        field = "", AUXin00Alias , {(caninput_sel0a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel0b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin01Alias , {(caninput_sel1a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel1b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin02Alias , {(caninput_sel2a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel2b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin03Alias , {(caninput_sel3a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel3b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        
        ; END TRANSMISSION MOD
        field = "", AUXin04Alias , {(caninput_sel4a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel4b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin05Alias , {(caninput_sel5a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel5b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin06Alias , {(caninput_sel6a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel6b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin07Alias , {(caninput_sel7a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel7b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin08Alias , {(caninput_sel8a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel8b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin09Alias , {(caninput_sel9a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel9b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin10Alias , {(caninput_sel10a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel10b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin11Alias , {(caninput_sel11a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel11b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin12Alias , {(caninput_sel12a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel12b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin13Alias , {(caninput_sel13a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel13b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin14Alias , {(caninput_sel14a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel14b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin15Alias , {(caninput_sel15a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel15b && (enable_secondarySerial || (enable_intcan && intcan_available)))}

  dialog = caninput_sel, ""
    ;CAN inputs
        field = "               CAN Input Channel on/off"
        field = "CAN Input 0", caninput_sel0a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 0", caninput_sel0b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 1", caninput_sel1a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 1", caninput_sel1b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 2", caninput_sel2a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 2", caninput_sel2b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 3", caninput_sel3a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 3", caninput_sel3b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 4", caninput_sel4a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 4", caninput_sel4b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 5", caninput_sel5a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 5", caninput_sel5b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 6", caninput_sel6a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 6", caninput_sel6b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 7", caninput_sel7a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 7", caninput_sel7b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 8", caninput_sel8a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 8", caninput_sel8b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 9", caninput_sel9a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 9", caninput_sel9b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 10", caninput_sel10a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 10", caninput_sel10b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 11", caninput_sel11a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 11", caninput_sel11b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 12", caninput_sel12a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 12", caninput_sel12b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 13", caninput_sel13a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 13", caninput_sel13b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 14", caninput_sel14a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 14", caninput_sel14b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "CAN Input 15", caninput_sel15a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "CAN Input 15", caninput_sel15b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
    
    dialog = caninput_parameter_group, "", yAxis
        field = "             Source CAN Address"
        field = "", caninput_source_can_address0, { (caninput_sel0a == 1 || caninput_sel0b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address1, { (caninput_sel1a == 1 || caninput_sel1b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address2, { (caninput_sel2a == 1 || caninput_sel2b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address3, { (caninput_sel3a == 1 || caninput_sel3b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address4, { (caninput_sel4a == 1 || caninput_sel4b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address5, { (caninput_sel5a == 1 || caninput_sel5b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address6, { (caninput_sel6a == 1 || caninput_sel6b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address7, { (caninput_sel7a == 1 || caninput_sel7b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address8, { (caninput_sel8a == 1 || caninput_sel8b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address9, { (caninput_sel9a == 1 || caninput_sel9b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address10, { (caninput_sel10a == 1 || caninput_sel10b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address11, { (caninput_sel11a == 1 || caninput_sel11b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address12, { (caninput_sel12a == 1 || caninput_sel12b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address13, { (caninput_sel13a == 1 || caninput_sel13b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address14, { (caninput_sel14a == 1 || caninput_sel14b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_can_address15, { (caninput_sel15a == 1 || caninput_sel15b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }

  dialog = caninput_parameter_start_byte, "", yAxis
        field = "        source data start byte"
        field = "", caninput_source_start_byte0, { (caninput_sel0a == 1 || caninput_sel0b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte1, { (caninput_sel1a == 1 || caninput_sel1b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte2, { (caninput_sel2a == 1 || caninput_sel2b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte3, { (caninput_sel3a == 1 || caninput_sel3b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte4, { (caninput_sel4a == 1 || caninput_sel4b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte5, { (caninput_sel5a == 1 || caninput_sel5b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
    field = "", caninput_source_start_byte6, { (caninput_sel6a == 1 || caninput_sel6b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte7, { (caninput_sel7a == 1 || caninput_sel7b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte8, { (caninput_sel8a == 1 || caninput_sel8b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte9, { (caninput_sel9a == 1 || caninput_sel9b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte10, { (caninput_sel10a == 1 || caninput_sel10b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte11, { (caninput_sel11a == 1 || caninput_sel11b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte12, { (caninput_sel12a == 1 || caninput_sel12b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte13, { (caninput_sel13a == 1 || caninput_sel13b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
    field = "", caninput_source_start_byte14, { (caninput_sel14a == 1 || caninput_sel14b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_start_byte15, { (caninput_sel15a == 1 || caninput_sel15b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }

  dialog = caninput_parameter_num_byte, "", yAxis
        field = "Input Parameter Number of Bytes"
        field = "", caninput_source_num_bytes0, { (caninput_sel0a == 1 || caninput_sel0b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes1, { (caninput_sel1a == 1 || caninput_sel1b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes2, { (caninput_sel2a == 1 || caninput_sel2b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes3, { (caninput_sel3a == 1 || caninput_sel3b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes4, { (caninput_sel4a == 1 || caninput_sel4b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes5, { (caninput_sel5a == 1 || caninput_sel5b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
    field = "", caninput_source_num_bytes6, { (caninput_sel6a == 1 || caninput_sel6b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes7, { (caninput_sel7a == 1 || caninput_sel7b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes8, { (caninput_sel8a == 1 || caninput_sel8b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes9, { (caninput_sel9a == 1 || caninput_sel9b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes10, { (caninput_sel10a == 1 || caninput_sel10b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes11, { (caninput_sel11a == 1 || caninput_sel11b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes12, { (caninput_sel12a == 1 || caninput_sel12b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes13, { (caninput_sel13a == 1 || caninput_sel13b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
    field = "", caninput_source_num_bytes14, { (caninput_sel14a == 1 || caninput_sel14b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }
        field = "", caninput_source_num_bytes15, { (caninput_sel15a == 1 || caninput_sel15b == 1) && (enable_secondarySerial || (enable_intcan && intcan_available)) }

    dialog = caninput_serial_can, "", yAxis
        field = "Serial/CAN"
        field = "", caninput_sel0extsourcea, {(caninput_sel0a == 1 || caninput_sel0b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel0extsourceb, {(caninput_sel0a == 1 || caninput_sel0b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel0extsourcec, {(caninput_sel0a == 1 || caninput_sel0b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel1extsourcea, {(caninput_sel1a == 1 || caninput_sel1b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel1extsourceb, {(caninput_sel1a == 1 || caninput_sel1b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel1extsourcec, {(caninput_sel1a == 1 || caninput_sel1b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel2extsourcea, {(caninput_sel2a == 1 || caninput_sel2b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel2extsourceb, {(caninput_sel2a == 1 || caninput_sel2b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel2extsourcec, {(caninput_sel2a == 1 || caninput_sel2b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel3extsourcea, {(caninput_sel3a == 1 || caninput_sel3b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel3extsourceb, {(caninput_sel3a == 1 || caninput_sel3b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel3extsourcec, {(caninput_sel3a == 1 || caninput_sel3b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel4extsourcea, {(caninput_sel4a == 1 || caninput_sel4b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel4extsourceb, {(caninput_sel4a == 1 || caninput_sel4b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel4extsourcec, {(caninput_sel4a == 1 || caninput_sel4b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel5extsourcea, {(caninput_sel5a == 1 || caninput_sel5b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel5extsourceb, {(caninput_sel5a == 1 || caninput_sel5b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel5extsourcec, {(caninput_sel5a == 1 || caninput_sel5b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel6extsourcea, {(caninput_sel6a == 1 || caninput_sel6b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel6extsourceb, {(caninput_sel6a == 1 || caninput_sel6b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel6extsourcec, {(caninput_sel6a == 1 || caninput_sel6b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel7extsourcea, {(caninput_sel7a == 1 || caninput_sel7b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel7extsourceb, {(caninput_sel7a == 1 || caninput_sel7b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel7extsourcec, {(caninput_sel7a == 1 || caninput_sel7b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel8extsourcea, {(caninput_sel8a == 1 || caninput_sel8b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel8extsourceb, {(caninput_sel8a == 1 || caninput_sel8b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel8extsourcec, {(caninput_sel8a == 1 || caninput_sel8b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel9extsourcea, {(caninput_sel9a == 1 || caninput_sel9b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel9extsourceb, {(caninput_sel9a == 1 || caninput_sel9b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel9extsourcec, {(caninput_sel9a == 1 || caninput_sel9b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel10extsourcea, {(caninput_sel10a == 1 || caninput_sel10b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel10extsourceb, {(caninput_sel10a == 1 || caninput_sel10b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel10extsourcec, {(caninput_sel10a == 1 || caninput_sel10b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel11extsourcea, {(caninput_sel11a == 1 || caninput_sel11b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel11extsourceb, {(caninput_sel11a == 1 || caninput_sel11b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel11extsourcec, {(caninput_sel11a == 1 || caninput_sel11b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel12extsourcea, {(caninput_sel12a == 1 || caninput_sel12b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel12extsourceb, {(caninput_sel12a == 1 || caninput_sel12b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel12extsourcec, {(caninput_sel12a == 1 || caninput_sel12b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel13extsourcea, {(caninput_sel13a == 1 || caninput_sel13b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel13extsourceb, {(caninput_sel13a == 1 || caninput_sel13b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel13extsourcec, {(caninput_sel13a == 1 || caninput_sel13b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel14extsourcea, {(caninput_sel14a == 1 || caninput_sel14b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel14extsourceb, {(caninput_sel14a == 1 || caninput_sel14b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel14extsourcec, {(caninput_sel14a == 1 || caninput_sel14b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}    
        field = "", caninput_sel15extsourcea, {(caninput_sel15a == 1 || caninput_sel15b == 1) }, {enable_secondarySerial && (!enable_intcan || (enable_intcan && !intcan_available))}
        field = "", caninput_sel15extsourceb, {(caninput_sel15a == 1 || caninput_sel15b == 1) }, {enable_secondarySerial && (enable_intcan && intcan_available)}
        field = "", caninput_sel15extsourcec, {(caninput_sel15a == 1 || caninput_sel15b == 1) }, {!enable_secondarySerial && (enable_intcan && intcan_available)}
    
    dialog = caninconfig_blank1,""
        field = ""

  dialog = Canin_config1, "", xAxis
        panel = canAuxinput_alias
        panel = caninconfig_blank1
        panel = caninput_sel
    panel = caninconfig_blank1
    panel = caninput_serial_can
        panel = caninconfig_blank1
        panel = caninput_parameter_group
        panel = caninconfig_blank1
        panel = caninput_parameter_start_byte
        panel = caninconfig_blank1
        panel = caninput_parameter_num_byte 
        
    dialog = AuxinCenter, "", xAxis
       field = ""
       panel = selectionOfEdianness.

  ;dialog = Canin_config2, "External Data Input"
    ;    field = "Enable External data input",    enable_intcandata_in

  dialog = Canin_config, "",yAxis
      topicHelp = "http://wiki.speeduino.com/en/Secondary_Serial_IO_interface#read-external-analog-data-from-a-remote-device"
      panel = Auxin_north
      panel = AuxinCenter
      panel = Canin_config1
    
  dialog = canAuxoutput_alias, "", yAxis
      field = "Input Alias"
      field = "", AUXin00Alias , {canoutput_sel0}
      field = "", AUXin01Alias , {canoutput_sel1}
      field = "", AUXin02Alias , {canoutput_sel2}
      field = "", AUXin03Alias , {canoutput_sel3}
      field = "", AUXin04Alias , {canoutput_sel4}
      field = "", AUXin05Alias , {canoutput_sel5}
      field = "", AUXin06Alias , {canoutput_sel6}
      field = "", AUXin07Alias , {canoutput_sel7}
      ;field = "", AUXin08Alias , {canoutput_sel8}
      ;field = "", AUXin09Alias , {canoutput_sel9}
      ;field = "", AUXin10Alias , {canoutput_sel10}
      ;field = "", AUXin11Alias , {canoutput_sel11}
      ;field = "", AUXin12Alias , {canoutput_sel12}
      ;field = "", AUXin13Alias , {canoutput_sel13}
      ;field = "", AUXin14Alias , {canoutput_sel14}
      ;field = "", AUXin15Alias , {canoutput_sel15}
        
  dialog = canoutput_sel, "", yAxis
    ;CAN outputs
        field = "CAN Output Channel on/off"
        field = "CAN Output 0", canoutput_sel0, { enable_intcandata_out}
        field = "CAN Output 1", canoutput_sel1, { enable_intcandata_out }
        field = "CAN Output 2", canoutput_sel2, { enable_intcandata_out }
        field = "CAN Output 3", canoutput_sel3, { enable_intcandata_out }
        field = "CAN Output 4", canoutput_sel4, { enable_intcandata_out }
        field = "CAN Output 5", canoutput_sel5, { enable_intcandata_out }
        field = "CAN Output 6", canoutput_sel6, { enable_intcandata_out }
        field = "CAN Output 7", canoutput_sel7, { enable_intcandata_out }
       ; field = "CAN Output 8", canoutput_sel8, { enable_intcandata_out}
       ; field = "CAN Output 9", canoutput_sel9, { enable_intcandata_out }
       ; field = "CAN Output 10", canoutput_sel10, { enable_intcandata_out }
       ; field = "CAN Output 11", canoutput_sel11, { enable_intcandata_out }
       ; field = "CAN Output 12", canoutput_sel12, { enable_intcandata_out }
       ; field = "CAN Output 13", canoutput_sel13, { enable_intcandata_out }
  ;  field = "CAN Output 14", canoutput_sel14, { enable_intcandata_out }
     ;   field = "CAN Output 15", canoutput_sel15, { enable_intcandata_out }

    dialog = canoutput_parameter_group, "", yAxis
        field = "Output Parameter Group"
        field = "", canoutput_param_group[0], { canoutput_sel0 && enable_intcandata_out }
        field = "", canoutput_param_group[1], { canoutput_sel1 && enable_intcandata_out }
        field = "", canoutput_param_group[2], { canoutput_sel3 && enable_intcandata_out }
        field = "", canoutput_param_group[3], { canoutput_sel3 && enable_intcandata_out }
        field = "", canoutput_param_group[4], { canoutput_sel4 && enable_intcandata_out }
        field = "", canoutput_param_group[5], { canoutput_sel5 && enable_intcandata_out }
        field = "", canoutput_param_group[6], { canoutput_sel6 && enable_intcandata_out }
        field = "", canoutput_param_group[7], { canoutput_sel7 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[8], { canoutput_sel9 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[9], { canoutput_sel10 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[10], { canoutput_sel1 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[11], { canoutput_sel2 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[12], { canoutput_sel3 && enable_intcandata_out }
      ;  field = "", canoutput_param_group[13], { canoutput_sel4 && enable_intcandata_out }
  ;  field = "", canoutput_param_group[14], { canoutput_sel5 && enable_intcandata_out }
    ;    field = "", canoutput_param_group[15], { canoutput_sel6 && enable_intcandata_out }

  dialog = canoutput_parameter_start_byte, "", yAxis
        field = "Output Parameter Start Byte"
        field = "", canoutput_param_start_byte0, { canoutput_sel0 && enable_intcandata_out }
        field = "", canoutput_param_start_byte1, { canoutput_sel1 && enable_intcandata_out }
        field = "", canoutput_param_start_byte2, { canoutput_sel2 && enable_intcandata_out }
        field = "", canoutput_param_start_byte3, { canoutput_sel3 && enable_intcandata_out }
        field = "", canoutput_param_start_byte4, { canoutput_sel4 && enable_intcandata_out }
        field = "", canoutput_param_start_byte5, { canoutput_sel5 && enable_intcandata_out }
        field = "", canoutput_param_start_byte6, { canoutput_sel6 && enable_intcandata_out }
        field = "", canoutput_param_start_byte7, { canoutput_sel7 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte8, { canoutput_sel8 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte9, { canoutput_sel9 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte10, { canoutput_sel10 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte11, { canoutput_sel11 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte12, { canoutput_sel12 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte13, { canoutput_sel13 && enable_intcandata_out }
    ;    field = "", canoutput_param_start_byte14, { canoutput_sel14 && enable_intcandata_out }
 ;       field = "", canoutput_param_start_byte15, { canoutput_sel15 && enable_intcandata_out }

  dialog = canoutput_parameter_num_byte, "", yAxis
        field = "Output Parameter Number of Bytes"
        field = "", canoutput_param_num_bytes0, { canoutput_sel0 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes1, { canoutput_sel1 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes2, { canoutput_sel2 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes3, { canoutput_sel3 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes4, { canoutput_sel4 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes5, { canoutput_sel5 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes6, { canoutput_sel6 && enable_intcandata_out }
        field = "", canoutput_param_num_bytes7, { canoutput_sel7 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes8, { canoutput_sel8 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes9, { canoutput_sel9 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes10, { canoutput_sel10 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes11, { canoutput_sel11 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes12, { canoutput_sel12 && enable_intcandata_out }
    ;    field = "", canoutput_param_num_bytes13, { canoutput_sel13 && enable_intcandata_out }
;    field = "", canoutput_param_num_bytes14, { canoutput_sel14 && enable_intcandata_out }
 ;       field = "", canoutput_param_num_bytes15, { canoutput_sel15 && enable_intcandata_out }

    dialog = canoutconfig_blank1,""
    field = ""

  dialog = Canout_config1, "", xAxis
        panel = canAuxoutput_alias
        panel = canoutconfig_blank1
        panel = canoutput_sel
        panel = canoutconfig_blank1
        panel = canoutput_parameter_group
        panel = canoutconfig_blank1
        panel = canoutput_parameter_start_byte
        panel = canoutconfig_blank1
        panel = canoutput_parameter_num_byte

  dialog = Canout_config2, "CAN Data Out"
    field = "Enable CanBus data Output",  enable_intcandata_out

  dialog = Canout_config, "", yAxis
      topicHelp = ""
      panel = Canout_config2
      panel = Canout_config1

  dialog = can_serial3IO, "CanBus/Secondary Serial IO interface"
      topicHelp = "http://wiki.speeduino.com/en/Secondary_Serial_IO_interface"
      field = "Enable Second Serial",       enable_secondarySerial
      field = "Second Serial protocol",     secondarySerialProtocol, { enable_secondarySerial }
      field = "#NOTE: When the TunerStudio protocol is selected, the primary and secondary serial connections cannot be used simultaneously", { } , { }, { secondarySerialProtocol == 5 }
      #if mcu_teensy
        field = "Enable Internal Canbus",     enable_intcan
      #elif mcu_stm32
        field = "Enable Internal Canbus",     enable_intcan
      #endif
      ;  field = "Speeduino TsCanId", speeduino_tsCanId
      ;field = "True Canbus Address", true_address, {enable_secondarySerial||enable_intcan}
      field = "True Canbus Address", true_address, { CANisAvailable }
      
      field = "#NOTE Realtime Data Base Address MUST be at least 0x16 GREATER than the True Address as they are reserved for future expansion"
      field = "Realtime Data Base Can Address", realtime_base_address, { CANisAvailable }
      field = "Speeduino OBD address", obd_address, { CANisAvailable }
  
    dialog = reset_control, "Reset Control"
        topicHelp = "http://wiki.speeduino.com/en/configuration/Reset_Control#settings-in-tuner-studio"
        ; Control type options for custom firmware
        field = "Control Type", resetControl
        field = "Control Pin", resetControlPin

    dialog = Auxinput_pin_selection, "", yAxis
        field = "             Source"       
        displayOnlyField = "Off 0", blankfield, {},{(caninput_sel0a == 0 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel0b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel0b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel0b == 0 && (!enable_secondarySerial && (enable_intcan && intcan_available == 1)))}
        displayOnlyField = "External Source 0 Via Secondary Serial", blankfield, {},{(caninput_sel0b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel0b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel0extsourceb == 0)}
        displayOnlyField = "External Source 0 Via Internal CAN", blankfield, {},{(caninput_sel0b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel0extsourceb == 1) ||(caninput_sel0b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel0extsourcec == 1)}
        field = "Local Analog Source 0                 Pin No:", Auxin0pina , {}, {(caninput_sel0a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel0b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 0                  Pin No:", Auxin0pinb , {}, {(caninput_sel0a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel0b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 1", blankfield, {},{(caninput_sel1a == 0 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel1b == 0 && ((enable_secondarySerial && enable_intcan) || (enable_secondarySerial && !enable_intcan) || (!enable_secondarySerial && enable_intcan)))}
        displayOnlyField = "External Source 1 Via Secondary Serial", blankfield, {},{(caninput_sel1b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel1b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel1extsourceb == 0)}
        displayOnlyField = "External Source 1 Via Internal CAN", blankfield, {},{(caninput_sel1b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel1extsourceb == 1) ||(caninput_sel1b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel1extsourcec == 1)}
        field = "Local Analog Source 1                 Pin No:", Auxin1pina , {}, {(caninput_sel1a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel1b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 1                  Pin No:", Auxin1pinb , {}, {(caninput_sel1a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel1b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        
        displayOnlyField = "Off 2", blankfield, {},{(caninput_sel2a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel2b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel2b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel2b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 2 Via Secondary Serial", blankfield, {},{(caninput_sel2b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel2b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel2extsourceb == 0)}
        displayOnlyField = "External Source 2 Via Internal CAN", blankfield, {},{(caninput_sel2b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel2extsourceb == 1) ||(caninput_sel2b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel2extsourcec == 1)}
        field = "Local Analog Source 2                 Pin No:", Auxin2pina , {}, {(caninput_sel2a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel2b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 2                  Pin No:", Auxin2pinb , {}, {(caninput_sel2a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel2b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 3", blankfield, {},{(caninput_sel3a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel3b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel3b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel3b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 3 Via Secondary Serial", blankfield, {},{(caninput_sel3b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel3b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel3extsourceb == 0)}
        displayOnlyField = "External Source 3 Via Internal CAN", blankfield, {},{(caninput_sel3b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel3extsourceb == 1) ||(caninput_sel3b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel3extsourcec == 1)}
        field = "Local Analog Source 3                 Pin No:", Auxin3pina , {}, {(caninput_sel3a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel3b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 3                  Pin No:", Auxin3pinb , {}, {(caninput_sel3a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel3b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 4", blankfield, {},{(caninput_sel4a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel4b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel4b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel4b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 4 Via Secondary Serial", blankfield, {},{(caninput_sel4b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel4b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel4extsourceb == 0)}
        displayOnlyField = "External Source 4 Via Internal CAN", blankfield, {},{(caninput_sel4b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel4extsourceb == 1) ||(caninput_sel4b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel4extsourcec == 1)}
        field = "Local Analog Source 4                 Pin No:", Auxin4pina , {}, {(caninput_sel4a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel4b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 4                  Pin No:", Auxin4pinb , {}, {(caninput_sel4a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel4b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 5", blankfield, {},{(caninput_sel5a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel5b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel5b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel5b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 5 Via Secondary Serial", blankfield, {},{(caninput_sel5b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel5b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel5extsourceb == 0)}
        displayOnlyField = "External Source 5 Via Internal CAN", blankfield, {},{(caninput_sel5b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel5extsourceb == 1) ||(caninput_sel5b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel5extsourcec == 1)}
        field = "Local Analog Source 5                 Pin No:", Auxin5pina , {}, {(caninput_sel5a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel5b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 5                  Pin No:", Auxin5pinb , {}, {(caninput_sel5a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel5b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 6", blankfield, {},{(caninput_sel6a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel6b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel6b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel6b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 6 Via Secondary Serial", blankfield, {},{(caninput_sel6b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel6b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel6extsourceb == 0)}
        displayOnlyField = "External Source 6 Via Internal CAN", blankfield, {},{(caninput_sel6b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel6extsourceb == 1) ||(caninput_sel6b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel6extsourcec == 1)}
        field = "Local Analog Source 6                 Pin No:", Auxin6pina , {}, {(caninput_sel6a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel6b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 6                  Pin No:", Auxin6pinb , {}, {(caninput_sel6a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel6b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 7", blankfield, {},{(caninput_sel7a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel7b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel7b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel7b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 7 Via Secondary Serial", blankfield, {},{(caninput_sel7b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel7b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel7extsourceb == 0)}
        displayOnlyField = "External Source 7 Via Internal CAN", blankfield, {},{(caninput_sel7b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel7extsourceb == 1) ||(caninput_sel7b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel7extsourcec == 1)}
        field = "Local Analog Source 7                 Pin No:", Auxin7pina , {}, {(caninput_sel7a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel7b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 7                  Pin No:", Auxin7pinb , {}, {(caninput_sel7a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel7b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 8", blankfield, {},{(caninput_sel8a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel8b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel8b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel8b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 8 Via Secondary Serial", blankfield, {},{(caninput_sel8b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel8b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel8extsourceb == 0)}
        displayOnlyField = "External Source 8 Via Internal CAN", blankfield, {},{(caninput_sel8b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel8extsourceb == 1) ||(caninput_sel8b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel8extsourcec == 1)}
        field = "Local Analog Source 8                 Pin No:", Auxin8pina , {}, {(caninput_sel8a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel8b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 8                  Pin No:", Auxin8pinb , {}, {(caninput_sel8a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel8b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 9", blankfield, {},{(caninput_sel9a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel9b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel9b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel9b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 9 Via Secondary Serial", blankfield, {},{(caninput_sel9b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel9b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel9extsourceb == 0)}
        displayOnlyField = "External Source 9 Via Internal CAN", blankfield, {},{(caninput_sel9b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel9extsourceb == 1) ||(caninput_sel9b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel9extsourcec == 1)}
        field = "Local Analog Source 9                 Pin No:", Auxin9pina , {}, {(caninput_sel9a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel9b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 9                  Pin No:", Auxin9pinb , {}, {(caninput_sel9a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel9b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 10", blankfield, {},{(caninput_sel10a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel10b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel10b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel10b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 10 Via Secondary Serial", blankfield, {},{(caninput_sel10b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel10b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel10extsourceb == 0)}
        displayOnlyField = "External Source 10 Via Internal CAN", blankfield, {},{(caninput_sel10b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel10extsourceb == 1) ||(caninput_sel10b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel10extsourcec == 1)}
        field = "Local Analog Source 10                 Pin No:", Auxin10pina , {}, {(caninput_sel10a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel10b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 10                  Pin No:", Auxin10pinb , {}, {(caninput_sel10a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel10b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 11", blankfield, {},{(caninput_sel11a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel11b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel11b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel11b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 11 Via Secondary Serial", blankfield, {},{(caninput_sel11b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel11b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel11extsourceb == 0)}
        displayOnlyField = "External Source 11 Via Internal CAN", blankfield, {},{(caninput_sel11b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel11extsourceb == 1) ||(caninput_sel11b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel11extsourcec == 1)}
        field = "Local Analog Source 11                 Pin No:", Auxin11pina , {}, {(caninput_sel11a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel11b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 11                  Pin No:", Auxin11pinb , {}, {(caninput_sel11a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel11b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 12", blankfield, {},{(caninput_sel12a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel12b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel12b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel12b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 12 Via Secondary Serial", blankfield, {},{(caninput_sel12b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel12b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel12extsourceb == 0)}
        displayOnlyField = "External Source 12 Via Internal CAN", blankfield, {},{(caninput_sel12b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel12extsourceb == 1) ||(caninput_sel12b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel12extsourcec == 1)}
        field = "Local Analog Source 12                 Pin No:", Auxin12pina , {}, {(caninput_sel12a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel12b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 12                  Pin No:", Auxin12pinb , {}, {(caninput_sel12a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel12b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 13", blankfield, {},{(caninput_sel13a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel13b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel13b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel13b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 13 Via Secondary Serial", blankfield, {},{(caninput_sel13b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel13b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel13extsourceb == 0)}
        displayOnlyField = "External Source 13 Via Internal CAN", blankfield, {},{(caninput_sel13b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel13extsourceb == 1) ||(caninput_sel13b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel13extsourcec == 1)}
        field = "Local Analog Source 13                 Pin No:", Auxin13pina , {}, {(caninput_sel13a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel13b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 13                  Pin No:", Auxin13pinb , {}, {(caninput_sel13a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel13b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 14", blankfield, {},{(caninput_sel14a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel14b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel14b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel14b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 14 Via Secondary Serial", blankfield, {},{(caninput_sel14b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel14b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel14extsourceb == 0)}
        displayOnlyField = "External Source 14 Via Internal CAN", blankfield, {},{(caninput_sel14b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel14extsourceb == 1) ||(caninput_sel14b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel14extsourcec == 1)}
        field = "Local Analog Source 14                 Pin No:", Auxin14pina , {}, {(caninput_sel14a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel14b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 14                  Pin No:", Auxin14pinb , {}, {(caninput_sel14a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel14b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}

        displayOnlyField = "Off 15", blankfield, {},{(caninput_sel15a == 0 && (!enable_secondarySerial && !enable_intcan)) || (caninput_sel15b == 0 && (enable_secondarySerial && enable_intcan)) || (caninput_sel15b == 0 && (enable_secondarySerial && !enable_intcan)) || (caninput_sel15b == 0 && (!enable_secondarySerial && enable_intcan))}
        displayOnlyField = "External Source 15 Via Secondary Serial", blankfield, {},{(caninput_sel15b == 1 && enable_secondarySerial && ((enable_intcan && intcan_available == 0) || !enable_intcan)) || (caninput_sel15b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel15extsourceb == 0)}
        displayOnlyField = "External Source 15 Via Internal CAN", blankfield, {},{(caninput_sel15b == 1 && enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel15extsourceb == 1) ||(caninput_sel15b == 1 && !enable_secondarySerial && (enable_intcan && intcan_available) && caninput_sel15extsourcec == 1)}
        field = "Local Analog Source 15                 Pin No:", Auxin15pina , {}, {(caninput_sel15a == 2 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel15b == 2 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
        field = "Local Digital Source 15                  Pin No:", Auxin15pinb , {}, {(caninput_sel15a == 3 && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel15b == 3 && (enable_secondarySerial || (enable_intcan && intcan_available == 1 )))}
          
    dialog = Auxinput_alias, "", yAxis
        field = "Input Alias"
        field = "", AUXin00Alias , {(caninput_sel0a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel0b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin01Alias , {(caninput_sel1a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel1b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin02Alias , {(caninput_sel2a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel2b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin03Alias , {(caninput_sel3a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel3b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin04Alias , {(caninput_sel4a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel4b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin05Alias , {(caninput_sel5a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel5b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin06Alias , {(caninput_sel6a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel6b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin07Alias , {(caninput_sel7a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel7b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin08Alias , {(caninput_sel8a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel8b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin09Alias , {(caninput_sel9a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel9b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin10Alias , {(caninput_sel10a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel10b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin11Alias , {(caninput_sel11a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel11b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin12Alias , {(caninput_sel12a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel12b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin13Alias , {(caninput_sel13a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel13b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin14Alias , {(caninput_sel14a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel14b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
        field = "", AUXin15Alias , {(caninput_sel15a && (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0)))) || (caninput_sel15b && (enable_secondarySerial || (enable_intcan && intcan_available)))}
                
    dialog = Auxinput_channelenable, "", yAxis
        field = "               Aux Input Channel Enable"
        field = "AUX Input 0", caninput_sel0a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 0", caninput_sel0b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 1", caninput_sel1a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 1", caninput_sel1b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 2", caninput_sel2a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 2", caninput_sel2b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 3", caninput_sel3a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 3", caninput_sel3b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 4", caninput_sel4a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 4", caninput_sel4b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 5", caninput_sel5a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 5", caninput_sel5b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 6", caninput_sel6a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 6", caninput_sel6b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 7", caninput_sel7a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 7", caninput_sel7b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 8", caninput_sel8a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 8", caninput_sel8b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 9", caninput_sel9a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 9", caninput_sel9b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 10", caninput_sel10a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 10", caninput_sel10b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 11", caninput_sel11a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 11", caninput_sel11b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 12", caninput_sel12a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 12", caninput_sel12b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 13", caninput_sel13a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 13", caninput_sel13b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 14", caninput_sel14a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 14", caninput_sel14b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
        field = "AUX Input 15", caninput_sel15a, {}, { (!enable_secondarySerial && (!enable_intcan || (enable_intcan && intcan_available == 0))) }
        field = "AUX Input 15", caninput_sel15b, {}, { (enable_secondarySerial && enable_intcan) || (!enable_secondarySerial && (enable_intcan && intcan_available)) || (enable_secondarySerial && !enable_intcan) }
  
    dialog = Auxin_south, "Auxiliary Input Configuration",xAxis
        panel = Auxinput_alias
        panel = Auxinput_channelenable
        panel = Auxinput_pin_selection 
  
    dialog = Auxin_config, "",yAxis      
      panel = Auxin_north
      panel = Auxin_south

    dialog = gaugeLimits, "Gauge Limits"
        field = "#RPM"
        field = "Warning", rpmwarn
        field = "Danger", rpmdang
        field = "High", rpmhigh
        field = "#MAP"
        field = "Warning", mapwarn
        field = "Danger", mapdang
        field = "High", maphigh
        field = "#BATTERY VOLTAGE INDICATOR"
        field = "Low", batlow
        field = "High", bathigh
        field = !"Reload project to update gauges"

    dialog = io_summary, "I/O Summary"
        displayOnlyField = "fuelPumpPin", fuelPumpPin, {fpPrime}
        displayOnlyField = "fanPin", fanPin, {fanEnable}
        displayOnlyField = "tachoPin", tachoPin, {tachoDuration}
        displayOnlyField = "idleUpPin", idleUpPin, {idleUpEnabled}
        displayOnlyField = "idleUpOutputPin", idleUpOutputPin, {idleUpEnabled && idleUpOutputEnabled}
        displayOnlyField = "launchPin", launchPin, {launchEnable}
        displayOnlyField = "vvt1Pin", vvt1Pin, {vvtEnabled}
        displayOnlyField = "vssPin", vssPin, {vssMode > 1}
        displayOnlyField = "boostPin", boostPin, {boostEnabled}
        displayOnlyField = "baroPin", baroPin,{useExtBaro}
        displayOnlyField = "EMAPPin", EMAPPin, {useEMAP}
        displayOnlyField = "n2o_arming_pin", n2o_arming_pin, {n2o_enable}
        displayOnlyField = "n2o_stage1_pin", n2o_stage1_pin, {n2o_enable}
        displayOnlyField = "n2o_stage2_pin", n2o_stage2_pin, {n2o_enable}
        displayOnlyField = "A/C Request Pin", airConReqPin, {airConEnable}
        displayOnlyField = "A/C Output Pin", airConCompPin, {airConEnable}
        displayOnlyField = "Knock Pin", knock_pin, {knock_mode}
        displayOnlyField = "fuel2InputPin", fuel2InputPin, {fuel2Mode}
        displayOnlyField = "resetControlPin", resetControlPin, {resetControl}
        displayOnlyField = "ignBypassPin", ignBypassPin, {ignBypassEnable}
        displayOnlyField = "Programmable out 1", outputPin0, {outputPin[0]}
        displayOnlyField = "Programmable out 2", outputPin1, {outputPin[1]}
        displayOnlyField = "Programmable out 3", outputPin2, {outputPin[2]}
        displayOnlyField = "Programmable out 4", outputPin3, {outputPin[3]}
        displayOnlyField = "Programmable out 5", outputPin4, {outputPin[4]}
        displayOnlyField = "Programmable out 6", outputPin5, {outputPin[5]}
        displayOnlyField = "Programmable out 7", outputPin6, {outputPin[6]}
        displayOnlyField = "Programmable out 8", outputPin7, {outputPin[7]}
    
  ;Rule 1
  dialog = prgm_out_rules_1_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn0,       {outputPin[0]}
    field = "",   firstCompType0,     {outputPin[0]}
    field = "",   firstTarget[0],     {outputPin[0]}
  dialog = prgm_out_rules_1_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn0,      {outputPin[0] && bitwise0}
    field = "",   secondCompType0,    {outputPin[0] && bitwise0}
    field = "",   secondTarget[0],    {outputPin[0] && bitwise0}
  ;Rule 2
  dialog = prgm_out_rules_2_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn1,       {outputPin[1]}
    field = "",   firstCompType1,     {outputPin[1]}
    field = "",   firstTarget[1],     {outputPin[1]}
  dialog = prgm_out_rules_2_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn1,      {outputPin[1] && bitwise1}
    field = "",   secondCompType1,    {outputPin[1] && bitwise1}
    field = "",   secondTarget[1],    {outputPin[1] && bitwise1}
  ;Rule 3
  dialog = prgm_out_rules_3_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn2,       {outputPin[2]}
    field = "",   firstCompType2,     {outputPin[2]}
    field = "",   firstTarget[2],     {outputPin[2]}
  dialog = prgm_out_rules_3_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn2,      {outputPin[2] && bitwise2}
    field = "",   secondCompType2,    {outputPin[2] && bitwise2}
    field = "",   secondTarget[2],    {outputPin[2] && bitwise2}
  ;Rule 4
  dialog = prgm_out_rules_4_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn3,       {outputPin[3]}
    field = "",   firstCompType3,     {outputPin[3]}
    field = "",   firstTarget[3],     {outputPin[3]}
  dialog = prgm_out_rules_4_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn3,      {outputPin[3] && bitwise3}
    field = "",   secondCompType3,    {outputPin[3] && bitwise3}
    field = "",   secondTarget[3],    {outputPin[3] && bitwise3}
  ;Rule 5 
  dialog = prgm_out_rules_5_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn4,       {outputPin[4]}
    field = "",   firstCompType4,     {outputPin[4]}
    field = "",   firstTarget[4],     {outputPin[4]}
  dialog = prgm_out_rules_5_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn4,      {outputPin[4] && bitwise4}
    field = "",   secondCompType4,    {outputPin[4] && bitwise4}
    field = "",   secondTarget[4],    {outputPin[4] && bitwise4}
  ;Rule 6
  dialog = prgm_out_rules_6_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn5,       {outputPin[5]}
    field = "",   firstCompType5,     {outputPin[5]}
    field = "",   firstTarget[5],     {outputPin[5]}
  dialog = prgm_out_rules_6_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn5,      {outputPin[5] && bitwise5}
    field = "",   secondCompType5,    {outputPin[5] && bitwise5}
    field = "",   secondTarget[5],    {outputPin[5] && bitwise5}
  ;Rule 7
  dialog = prgm_out_rules_7_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn6,       {outputPin[6]}
    field = "",   firstCompType6,     {outputPin[6]}
    field = "",   firstTarget[6],     {outputPin[6]}
  dialog = prgm_out_rules_7_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn6,      {outputPin[6] && bitwise6}
    field = "",   secondCompType6,    {outputPin[6] && bitwise6}
    field = "",   secondTarget[6],    {outputPin[6] && bitwise6}
  ;Rule 8
  dialog = prgm_out_rules_8_condition_1, "Condition 1", xAxis
    field = "",   firstDataIn7,       {outputPin[7]}
    field = "",   firstCompType7,     {outputPin[7]}
    field = "",   firstTarget[7],     {outputPin[7]}
  dialog = prgm_out_rules_8_condition_2, "Condition 2", xAxis
    field = "",   secondDataIn7,      {outputPin[7] && bitwise7}
    field = "",   secondCompType7,    {outputPin[7] && bitwise7}
    field = "",   secondTarget[7],    {outputPin[7] && bitwise7}

  dialog = prgm_out_rules_1_output_limit_1, "", xAxis
    field = "",   kindOfLimiting0,                {outputPin[0]}
    field = "output time",  outputTimeLimit[0],   {outputPin[0]}

  dialog = prgm_out_rules_2_output_limit_1, "", xAxis
    field = "",   kindOfLimiting1,                {outputPin[1]}
    field = "output time",  outputTimeLimit[1],   {outputPin[1]}

  dialog = prgm_out_rules_3_output_limit_1, "", xAxis
    field = "",   kindOfLimiting2,                {outputPin[2]}
    field = "output time",  outputTimeLimit[2],   {outputPin[2]}

  dialog = prgm_out_rules_4_output_limit_1, "", xAxis
    field = "",   kindOfLimiting3,                {outputPin[3]}
    field = "output time",  outputTimeLimit[3],   {outputPin[3]}

  dialog = prgm_out_rules_5_output_limit_1, "", xAxis
    field = "",   kindOfLimiting4,                {outputPin[4]}
    field = "output time",  outputTimeLimit[4],   {outputPin[4]}

  dialog = prgm_out_rules_6_output_limit_1, "", xAxis
    field = "",   kindOfLimiting5,                {outputPin[5]}
    field = "output time",  outputTimeLimit[5],   {outputPin[5]}

  dialog = prgm_out_rules_7_output_limit_1, "", xAxis
    field = "",   kindOfLimiting6,                {outputPin[6]}
    field = "output time",  outputTimeLimit[6],   {outputPin[6]}

  dialog = prgm_out_rules_8_output_limit_1, "", xAxis
    field = "",   kindOfLimiting7,                {outputPin[7]}
    field = "output time",  outputTimeLimit[7],   {outputPin[7]}

  dialog = prgm_out_rules_1_output_limit, "Limit time active", yAxis
    field = "#Set 0.0 to disable the limit"
    panel = prgm_out_rules_1_output_limit_1

  dialog = prgm_out_rules_2_output_limit, "Limit time active", yAxis
    field = "#Set 0.0 to disable the limit"
    panel = prgm_out_rules_2_output_limit_1

  dialog = prgm_out_rules_3_output_limit, "Limit time active", yAxis
    field = "#Set 0.0 to disable the limit"
    panel = prgm_out_rules_3_output_limit_1

  dialog = prgm_out_rules_4_output_limit, "Limit time active", yAxis
    field = "#Set 0.0 to disable the limit"
    panel = prgm_out_rules_4_output_limit_1

  dialog = prgm_out_rules_5_output_limit, "Limit time active", yAxis
    field = "#Set 0.0 to disable the limit"
    panel = prgm_out_rules_5_output_limit_1

  dialog = prgm_out_rules_6_output_limit, "Limit time active", yAxis
    field = "#Set 0.0 to disable the limit"
    panel = prgm_out_rules_6_output_limit_1

  dialog = prgm_out_rules_7_output_limit, "Limit time active", yAxis
    field = "#Set 0.0 to disable the limit"
    panel = prgm_out_rules_7_output_limit_1

  dialog = prgm_out_rules_8_output_limit, "Limit time active", yAxis
    field = "#Set 0.0 to disable the limit"
    panel = prgm_out_rules_8_output_limit_1

  dialog = prgm_out_rules_1, "Rule 1", yAxis
    field = "Output Pin Num", outputPin0
    field = "Rule Alias",           prgm_out00Alias,    {outputPin[0]}
    field = "Output Polarity",      outputInverted0,    {outputPin[0]}
    field = "#Set 0.0 to disable the delay"
    field = "Activation Delay",     outputDelay[0],     {outputPin[0]}
    field = "2nd Condition",        bitwise0,           {outputPin[0]}
    panel = prgm_out_rules_1_condition_1
    panel = prgm_out_rules_1_condition_2
    panel = prgm_out_rules_1_output_limit

  dialog = prgm_out_rules_2, "Rule 2", yAxis
    field = "Output Pin Num", outputPin1
    field = "Rule Alias",           prgm_out01Alias,    {outputPin[1]}
    field = "Output Polarity",      outputInverted1,    {outputPin[1]}
    field = "#Set 0.0 to disable the delay"
    field = "Activation Delay",     outputDelay[1],     {outputPin[1]}
    field = "2nd Condition",        bitwise1,           {outputPin[1]}
    panel = prgm_out_rules_2_condition_1
    panel = prgm_out_rules_2_condition_2
    panel = prgm_out_rules_2_output_limit

  dialog = prgm_out_rules_3, "Rule 3", yAxis
    field = "Output Pin Num", outputPin2
    field = "Rule Alias",           prgm_out02Alias,    {outputPin[2]}
    field = "Output Polarity",      outputInverted2,    {outputPin[2]}
    field = "#Set 0.0 to disable the delay"
    field = "Activation Delay",     outputDelay[2],     {outputPin[2]}
    field = "2nd Condition",        bitwise2,           {outputPin[2]}
    panel = prgm_out_rules_3_condition_1
    panel = prgm_out_rules_3_condition_2
    panel = prgm_out_rules_3_output_limit

  dialog = prgm_out_rules_4, "Rule 4", yAxis
    field = "Output Pin Num", outputPin3
    field = "Rule Alias",           prgm_out03Alias,    {outputPin[3]}
    field = "Output Polarity",      outputInverted3,    {outputPin[3]}
    field = "#Set 0.0 to disable the delay"
    field = "Activation Delay",     outputDelay[3],     {outputPin[3]}
    field = "2nd Condition",        bitwise3,           {outputPin[3]}
    panel = prgm_out_rules_4_condition_1
    panel = prgm_out_rules_4_condition_2
    panel = prgm_out_rules_4_output_limit

  dialog = prgm_out_rules_5, "Rule 5", yAxis
    field = "Output Pin Num", outputPin4
    field = "Rule Alias",           prgm_out04Alias,    {outputPin[4]}
    field = "Output Polarity",      outputInverted4,    {outputPin[4]}
    field = "#Set 0.0 to disable the delay"
    field = "Activation Delay",     outputDelay[4],     {outputPin[4]}
    field = "2nd Condition",        bitwise4,           {outputPin[4]}
    panel = prgm_out_rules_5_condition_1
    panel = prgm_out_rules_5_condition_2
    panel = prgm_out_rules_5_output_limit

  dialog = prgm_out_rules_6, "Rule 6", yAxis
    field = "Output Pin Num", outputPin5
    field = "Rule Alias",           prgm_out05Alias,    {outputPin[5]}
    field = "Output Polarity",      outputInverted5,    {outputPin[5]}
    field = "#Set 0.0 to disable the delay"
    field = "Activation Delay",     outputDelay[5],     {outputPin[5]}
    field = "2nd Condition",        bitwise5,           {outputPin[5]}
    panel = prgm_out_rules_6_condition_1
    panel = prgm_out_rules_6_condition_2
    panel = prgm_out_rules_6_output_limit

  dialog = prgm_out_rules_7, "Rule 7", yAxis
    field = "Output Pin Num", outputPin6
    field = "Rule Alias",           prgm_out06Alias,    {outputPin[6]}
    field = "Output Polarity",      outputInverted6,    {outputPin[6]}
    field = "#Set 0.0 to disable the delay"
    field = "Activation Delay",     outputDelay[6],     {outputPin[6]}
    field = "2nd Condition",        bitwise6,           {outputPin[6]}
    panel = prgm_out_rules_7_condition_1
    panel = prgm_out_rules_7_condition_2
    panel = prgm_out_rules_7_output_limit

  dialog = prgm_out_rules_8, "Rule 8", yAxis
    field = "Output Pin Num", outputPin7
    field = "Rule Alias",           prgm_out07Alias,    {outputPin[7]}
    field = "Output Polarity",      outputInverted7,    {outputPin[7]}
    field = "#Set 0.0 to disable the delay"
    field = "Activation Delay",     outputDelay[7],     {outputPin[7]}
    field = "2nd Condition",        bitwise7,           {outputPin[7]}
    panel = prgm_out_rules_8_condition_1
    panel = prgm_out_rules_8_condition_2 
    panel = prgm_out_rules_8_output_limit

  dialog = prgm_out_rules_master, "", card
    panel = prgm_out_rules_1, Center,   { prgm_out_selection == 0 }
    panel = prgm_out_rules_2, Center,   { prgm_out_selection == 1 }
    panel = prgm_out_rules_3, Center,   { prgm_out_selection == 2 }
    panel = prgm_out_rules_4, Center,   { prgm_out_selection == 3 }
    panel = prgm_out_rules_5, Center,   { prgm_out_selection == 4 }
    panel = prgm_out_rules_6, Center,   { prgm_out_selection == 5 }
    panel = prgm_out_rules_7, Center,   { prgm_out_selection == 6 }
    panel = prgm_out_rules_8, Center,   { prgm_out_selection == 7 }
  
  dialog = prgm_out_config, "",yAxis
    ;panel = prgm_out_unique
    field = "Select Rule Number",  prgm_out_selection
    panel = prgm_out_rules_master

  dialog = rtc_setup, "Real Time Clock"
       field = "Real Time Clock mode", rtc_mode
       field = "Real Time Clock Trim +/-", rtc_trim, {rtc_mode}

  dialog = onboard_log_basic_setup, "Log Configuration"  
    field = "Logger type", onboard_log_file_style  
    ;field = "CSV separator", onboard_log_csv_separator      {onboard_log_file_style == 1}
    field = "Log rate", onboard_log_file_rate,               {onboard_log_file_style}
    field = "!Warning: Clicking the below button will erase all data from SD card"
    commandButton = "Format SD card", cmdFormatSD,          { onboard_log_file_style }
    ;commandButton = "Format SD card", cmdVSSratio1,          { onboard_log_file_style }
    ;field = "Filename", onboard_log_filenaming              {onboard_log_file_style}
    ; field = "Storage", onboard_log_storage                  {onboard_log_file_style}

  dialog = onboard_log_trigger_boot, "On boot"
    field = "On Boot",                onboard_log_trigger_boot,   {onboard_log_file_style}
    field = "On Boot log duration",   onboard_log_tr1_duration,   {onboard_log_file_style && onboard_log_trigger_boot}

  dialog = onboard_log_trigger_RPM, "RPM"
     field = "RPM", onboard_log_trigger_RPM                  {onboard_log_file_style && !onboard_log_trigger_boot}
     field = "ON (Min RPM)", onboard_log_tr2_thr_on          {onboard_log_file_style && onboard_log_trigger_RPM}
     field = "OFF (Max RPM)", onboard_log_tr2_thr_off        {onboard_log_file_style && onboard_log_trigger_RPM}

  dialog = onboard_log_trigger_prot, "Engine protection"
     field = "Engine protection", onboard_log_trigger_prot   {onboard_log_file_style && !onboard_log_trigger_boot}

  dialog = onboard_log_trigger_Epin, "External Switch"
     field = "Board pin", onboard_log_trigger_Epin           {onboard_log_file_style && !onboard_log_trigger_boot}
     field = "Pin number", onboard_log_tr5_Epin_pin          {onboard_log_file_style && onboard_log_trigger_Epin}
     
;     field = "RPM", onboard_log_tr3_thr_RPM                  {onboard_log_file_style && onboard_log_trigger_prot}
;     field = "MAP", onboard_log_tr3_thr_MAP                  {onboard_log_file_style && onboard_log_trigger_prot}
;     field = "Oil", onboard_log_tr3_thr_Oil                  {onboard_log_file_style && onboard_log_trigger_prot}
;     field = "AFR", onboard_log_tr3_thr_AFR                  {onboard_log_file_style && onboard_log_trigger_prot}   

;   dialog = onboard_log_trigger_Vbat, "Battery voltage"
;     field = "Battery voltage", onboard_log_trigger_Vbat     {onboard_log_file_style&& !onboard_log_trigger_boot}
;     field = "ON threshold", onboard_log_tr4_thr_on          {onboard_log_file_style && onboard_log_trigger_Vbat}
;     field = "OFF threshold", onboard_log_tr4_thr_off        {onboard_log_file_style && onboard_log_trigger_Vbat}


  dialog = rtc_settings, "Real Time Clock"
      field = "Mode", rtc_mode
      panel = std_ms3Rtc {rtc_mode}

  dialog = onboard_log_trigger, "Triggers"
      panel = onboard_log_trigger_boot
      ;field = "Above RPM",              onboard_log_trigger_RPM
      panel = onboard_log_trigger_RPM
      panel = onboard_log_trigger_prot
      panel = onboard_log_trigger_Epin
      ;field = "With battery",           onboard_log_trigger_Vbat

  dialog = onboard_log_setup, "On-board logger", border
      panel = onboard_log_basic_setup, North 
      panel = onboard_log_trigger, South 

;   dialog = sdcard_datalog, "SD Card Datalogging", yAxis
;     panel = sdcard_top
;     panel = dataLogFieldSelector

  ; START TRANSMISSION MOD

  dialog = transmission_setup, "Transmission Setup"
        field = "VSS Pin",                    vssPin
        field = "Pulses Per KM/VSS ratio",    vssPulsesPerKm
        field = "Smoothing Factor",           vssSmoothing


  dialog = transmission_temp_sensor_calibration_dialog_1, "Calibration Point 1"
    field = "Resistance (ohms)", trans_temp_sensor_calibration_resistance[0]
    field = "Temperature (C)", trans_temp_sensor_calibration_temp[0]

  dialog = transmission_temp_sensor_calibration_dialog_2, "Calibration Point 2"
    field = "Resistance (ohms)", trans_temp_sensor_calibration_resistance[1]
    field = "Temperature (C)", trans_temp_sensor_calibration_temp[1]

  dialog = transmission_temp_sensor_settings_dialog, "Settings"
    field = "Sensor Pin", trans_temp_sensor_pin
    field = "Sensor Pullup Ohms", trans_temp_sensor_pullup_ohms

  dialog = transmission_temp_sensor_dialog, "Transmission Temperature Sensor", border
    panel = transmission_temp_sensor_settings_dialog, North
    panel = transmission_temp_sensor_calibration_dialog_1, West
    panel = transmission_temp_sensor_calibration_dialog_2, East 
    
  


  


  ; Adding Shift Curve 1/2 diaglog
  dialog = shift_curve_1_2_dialog, "Shift Curves 1/2"
    panel = shift_curve_1_2_panel

  dialog = shift_curve_2_3_dialog, "Shift Curves 2/3"
    panel = shift_curve_2_3_panel

  dialog = shift_curve_3_4_dialog, "Shift Curves 3/4"
    panel = shift_curve_3_4_panel
  
  dialog = shift_selector_dialog, "Shift Selector Mapping"
    field = "Gear Selector ADC Pin", shiftSelector_adc_pin
    panel = shift_selector_panel



  ; shift_solenoid_output_dialogs
  dialog = shift_solenoid_output_dialog_col1, "Gear", yAxis
    displayOnlyField = "PARK"
    displayOnlyField = "REVERSE"
    displayOnlyField = "NEUTRAL"
    displayOnlyField = "4TH"
    displayOnlyField = "3RD"
    displayOnlyField = "2ND"
    displayOnlyField = "1ST"

  dialog = shift_solenoid_output_dialog_col2, "Solenoid 1 (0-255)", yAxis
    field = "", shift_solenoid_1_gear_pwm[0]
    field = "", shift_solenoid_1_gear_pwm[1]
    field = "", shift_solenoid_1_gear_pwm[2]
    field = "", shift_solenoid_1_gear_pwm[3]
    field = "", shift_solenoid_1_gear_pwm[4]
    field = "", shift_solenoid_1_gear_pwm[5]
    field = "", shift_solenoid_1_gear_pwm[6]
    field = "", shift_solenoid_1_gear_pwm[7]

  dialog = shift_solenoid_output_dialog_col3, "Solenoid 2 (0-255)", yAxis
    field = "", shift_solenoid_2_gear_pwm[0]
    field = "", shift_solenoid_2_gear_pwm[1]
    field = "", shift_solenoid_2_gear_pwm[2]
    field = "", shift_solenoid_2_gear_pwm[3]
    field = "", shift_solenoid_2_gear_pwm[4]
    field = "", shift_solenoid_2_gear_pwm[5]
    field = "", shift_solenoid_2_gear_pwm[6]
    field = "", shift_solenoid_2_gear_pwm[7]

  dialog = shift_solenoid_output_dialog_pin_assignments, "Shift Solenoid Pin Assignments"
      field = "Solenoid 1 Pin", shift_solenoid_1_pin
      field = "Solenoid 2 Pin", shift_solenoid_2_pin

  dialog = shift_solenoid_output_dialog_pins_logic, "Shift Solenoid Pin Logic",xAxis
      panel = shift_solenoid_output_dialog_col1
      panel = shift_solenoid_output_dialog_col2
      panel = shift_solenoid_output_dialog_col3

  dialog = shift_solenoid_output_dialog, "Shift Solenoid Outputs"
      panel = shift_solenoid_output_dialog_pin_assignments
      panel = shift_solenoid_output_dialog_pins_logic


  ; Torque converter clutch
  dialog = torque_converter_output_dialog, "Torque Converter"
    field = "Torque Converter Clutch Pin", lockup_pin
    field = "Torque Converter Lockup Speed", lockup_vss

  dialog = overrun_clutch_output_dialog, "Overrun Clutch"
    field = "Overrun Clutch Pin", overrun_pin
    field = "Overrun Clutch Engage Duration", overrun_duration


  dialog = trans_line_pressure_output_dialog, "Transmission Line Pressure"
    field = "Transmission Line Pressure Pin", trans_line_pressure_pin
    panel = trans_line_pressure_panel


  ; CAN bus setup

  dialog = trans_can_setup_dialog_tps, "CAN Setup (TPS)"
    field = "CAN ID", can_id_tps
    field = "CAN Offset (0-7)", can_offset_tps
    field = "CAN Bytes (1-2)", can_bytes_tps
    field = "CAN Endianness", can_endianness_tps
    

  dialog = trans_can_setup_dialog_rpm, "CAN Setup (RPM)"
    field = "CAN ID", can_id_rpm
    field = "CAN Offset (0-7)", can_offset_rpm
    field = "CAN Bytes (1-2)", can_bytes_rpm
    field = "CAN Endianness", can_endianness_rpm

  dialog = trans_can_setup_dialog, "CAN Setup"
    field = "CAN Base Address", can_baseAddress
    field = "CAN Baud Rate", can_baud_rate
    panel = trans_can_setup_dialog_tps
    panel = trans_can_setup_dialog_rpm
    

    ;    can_baud_rate = bits,   U08,    117,   [0:0],  "500000",  "250000"
    ; can_baseAddress = scalar, U08,      118,         "",        1.0,         0,     0,     255,      0
    ; can_id_tps = scalar, U16,      119,         "",        1.0,         0,     0,     65535,      0
    ; can_offset_tps = scalar, U08,      121,         "",        1.0,         0,     0,     8,     0 
    ; can_endianness_tps = bits,   U08,    122,   [0:0],  "Big Endian",  "Little Endian"
    ; can_bytes_tps = scalar, U08,      123,         "",        1.0,         0,     0,     2,     0
    ; can_id_rpm = scalar, U16,      124,         "",        1.0,         0,     0,     65535,      0
    ; can_offset_rpm = scalar, U08,      126,         "",        1.0,         0,     0,     8,     0
    ; can_endianness_rpm = bits,   U08,    127,   [0:0],  "Big Endian",  "Little Endian"
    ; can_bytes_rpm = scalar, U08,      128,         "",        1.0,         0,     0,     2,     0


 

  ; END TRANSMISSION MOD

;-------------------------------------------------------------------------------
; General help text

       help = helpGeneral, "Speeduino Online Manual"
        webHelp = "https://wiki.speeduino.com/"
        text = "For current WIKI documentation, click the Web Help button,"
        text = "or visit http://www.speeduino.com/."
        text = "<br>"
        text = "<br>why not visit our forum http://speeduino.com/forum/"
;------------------------------------------------------------------------------
[ControllerCommands]
; commandName    = command1, command2, commandn...
; command in standard ini format, a command name can be assigned to 1 to n commands that will be executed in order.
;         This does not include any resultant protocol envelope data, only the response data itself.

; WARNING!! These commands bypass TunerStudio's normal memory synchronization. If these commands
; alter mapped settings (Constant) memory in the controller, TunerStudio will have an out of sync condition
; and may create error messages.
; It is expected that these commands would not typically alter any ram mapped to a Constant.
cmdStopTestMode =   "E\x01\x00"
cmdEnableTestMode = "E\x01\x01"

cmdtestinj1on =     "E\x02\x01"
cmdtestinj1off =    "E\x02\x02"
cmdtestinj1Pulsed =   "E\x02\x03"
cmdtestinj2on =     "E\x02\x04"
cmdtestinj2off =    "E\x02\x05"
cmdtestinj2Pulsed =   "E\x02\x06"
cmdtestinj3on =     "E\x02\x07"
cmdtestinj3off =    "E\x02\x08"
cmdtestinj3Pulsed =   "E\x02\x09"
cmdtestinj4on =     "E\x02\x0A"
cmdtestinj4off =    "E\x02\x0B"
cmdtestinj4Pulsed =   "E\x02\x0C"
cmdtestinj5on =     "E\x02\x0D"
cmdtestinj5off =    "E\x02\x0E"
cmdtestinj5Pulsed =   "E\x02\x0F"
cmdtestinj6on =     "E\x02\x10"
cmdtestinj6off =    "E\x02\x11"
cmdtestinj6Pulsed =   "E\x02\x12"
cmdtestinj7on =     "E\x02\x13"
cmdtestinj7off =    "E\x02\x14"
cmdtestinj7Pulsed =   "E\x02\x15"
cmdtestinj8on =     "E\x02\x16"
cmdtestinj8off =    "E\x02\x17"
cmdtestinj8Pulsed =   "E\x02\x18"

cmdtestspk1on =     "E\x03\x01"
cmdtestspk1off =    "E\x03\x02"
cmdtestspk1Pulsed =   "E\x03\x03"
cmdtestspk2on =     "E\x03\x04"
cmdtestspk2off =    "E\x03\x05"
cmdtestspk2Pulsed =   "E\x03\x06"
cmdtestspk3on =     "E\x03\x07"
cmdtestspk3off =    "E\x03\x08"
cmdtestspk3Pulsed =   "E\x03\x09"
cmdtestspk4on =     "E\x03\x0A"
cmdtestspk4off =    "E\x03\x0B"
cmdtestspk4Pulsed =   "E\x03\x0C"
cmdtestspk5on =     "E\x03\x0D"
cmdtestspk5off =    "E\x03\x0E"
cmdtestspk5Pulsed =   "E\x03\x0F"
cmdtestspk6on =     "E\x03\x10"
cmdtestspk6off =    "E\x03\x11"
cmdtestspk6Pulsed =   "E\x03\x12"
cmdtestspk7on =     "E\x03\x13"
cmdtestspk7off =    "E\x03\x14"
cmdtestspk7Pulsed =   "E\x03\x15"
cmdtestspk8on =     "E\x03\x16"
cmdtestspk8off =    "E\x03\x17"
cmdtestspk8Pulsed =   "E\x03\x18"

cmdstm32reboot =    "E\x32\x00"
cmdstm32bootloader ="E\x32\x01"

cmdFormatSD =       "E\x33\x01"

cmdVSS60kmh =       "E\x99\x00"
cmdVSSratio1 =      "E\x99\x01"
cmdVSSratio2 =      "E\x99\x02"
cmdVSSratio3 =      "E\x99\x03"
cmdVSSratio4 =      "E\x99\x04"
cmdVSSratio5 =      "E\x99\x05"
cmdVSSratio6 =      "E\x99\x06"

[CurveEditor]

;tps-based accel enrichment
      curve = time_accel_tpsdot_curve, "TPS based AE"
            columnLabel = "TPSdot", "Added"
            xAxis = 0, 1200, 6
            yAxis = 0, 250, 4
            xBins = taeBins, TPSdot
            yBins = taeRates

;map-based accel enrichment
      curve = time_accel_mapdot_curve, "MAP based AE"
            columnLabel = "MAPdot", "Added"
            xAxis = 0, 1200, 6
            yAxis = 0, 250, 4
            xBins = maeBins, MAPdot
            yBins = maeRates

; Correction curve for dwell vs battery voltage
        curve = dwell_correction_curve, "Dwell voltage correction"
            columnLabel = "Voltage", "Dwell"
            xAxis = 6, 22, 6
            yAxis = 0, 255, 6
            xBins = brvBins, batteryVoltage
            yBins = dwellRates

; Correction curve for injectors vs battery voltage
        curve = injector_voltage_curve, "Injector voltage correction"
            columnLabel = "Voltage", "Injector"
            xAxis = 6, 22, 6
            yAxis = 0, 255, 6
            xBins = brvBins, batteryVoltage
            yBins = injBatRates

; Curve for injector timing vs RPM
        curve = injector_timing_curve, "Injector timing"
            columnLabel = "RPM", "Injector"
            xAxis = 0, 7000, 6
            yAxis = 0, 720, 5
            xBins = injAngRPM, rpm
            yBins = injAng

; Correction curve for Air Density vs temperature
        curve = airdensity_curve, "IAT density correction"
            columnLabel = "Air Temperature", "Fuel Amount"
            xAxis = -40, 160, 6
            yAxis = 0, 255, 6
            xBins = airDenBins, iat
            yBins = airDenRates

; Correction curve for Barometric pressure fuel adjustment
        curve = baroFuel_curve, "Baro fuel correction"
            topicHelp = "http://wiki.speeduino.com/en/configuration/Barometric_Correction"
            columnLabel = "Baro Pressure", "Fuel Amount"
            xAxis = 75, 112, 6
            yAxis = 0, 255, 6
            xBins = baroFuelBins, baro
            yBins = baroFuelValues

; Correction curve for fuel temperature fuel adjustment
        curve = fuelTemp_curve, "Fuel temp correction"
            columnLabel = "Fuel Temperature", "Fuel Amount"
            xAxis = -40, 125, 6
            yAxis = 0, 255, 6
            xBins = fuelTempBins, fuelTemp
            yBins = fuelTempValues

; IAT based ignition timing retard
        curve = iat_retard_curve, "IAT timing retard"
            columnLabel =   "Inlet Air Temp", "Retard"
            #if CELSIUS
            xAxis = 0, 125, 5
            #else
            xAxis = 32, 257, 5
            #endif
            yAxis = 0, 30, 5
            xBins = iatRetBins, iat
            yBins = iatRetRates

; CLT based ignition timing retard
        curve = clt_advance_curve, "Cold Advance"
            columnLabel =   "Coolant Temp", "Advance"
            xAxis = -40, 200, 5
            yAxis = -12.7, 12.7, 5
            xBins = cltAdvBins, coolant
            yBins = cltAdvValues

; Idle RPM target based ignition timing
        curve = idle_advance_curve, "Idle Advance"
            columnLabel =   "RPM Delta", "Advance"
            xAxis       = -500, 500, 5
            yAxis       =  -15,  50, 5
            xBins       = idleAdvBins, CLIdleDelta
            yBins       = idleAdvValues
            size        = 450, 200

; PWM Fan duty curve based on temp input
        curve = pwm_fan_curve, "Fan PWM Duty"
            columnLabel =   "Temp", "Duty %"
            xAxis = -40, 215, 4
            yAxis = 0, 100, 4
            xBins = fanPWMBins, coolant
            yBins = PWMFanDuty
            gauge = cltGauge
            size  = 400, 400

; Curves for idle control
        ; Standard duty table for PWM valves
        curve = iacPwm_curve, "IAC PWM Duty"
            columnLabel = "Coolant Temperature", "Valve"
        #if CELSIUS
            xAxis = -40, 215, 6
        #else
            xAxis = -40, 315, 6
        #endif
            yAxis = 0, 100, 4
            xBins = iacBins, coolant
            yBins = iacOLPWMVal

        ; Cranking duty table for PWM valves
        curve = iacPwmCrank_curve, "IAC PWM Cranking Duty"
            columnLabel = "Coolant Temperature", "Valve"
            xAxis = -40, 215, 6
            yAxis = 0, 100, 4
            xBins = iacCrankBins, coolant
            yBins = iacCrankDuty

        curve = iacStep_curve, "IAC Stepper Motor"
            columnLabel = "Coolant Temperature", "Motor"
        #if CELSIUS
            xAxis = -40, 215, 6
        #else
            xAxis = -40, 315, 6
        #endif
            yAxis = 0, 850, 4
            xBins = iacBins, coolant
            yBins = iacOLStepVal

        curve = iacStepCrank_curve, "IAC Stepper Motor Cranking"
            columnLabel = "Coolant Temperature", "Motor"
            xAxis = -40, 120, 6
            yAxis = 0, 850, 4
            xBins = iacCrankBins, coolant
            yBins = iacCrankSteps

        curve = iacClosedLoop_curve, "Idle RPM Targets"
            columnLabel = "Coolant Temperature", "Motor"
            xAxis = -40, 120, 6
            yAxis = 0, 2000, 4
            xBins = iacBins, coolant
            yBins = iacCLValues
            size  = 450, 200

        curve = rotaryTrailing_curve, "Rotary Trailing Split"
            columnLabel = "Ignition load", "SplitDegrees"
            yAxis = 0, 40, 4
            xBins = rotarySplitBins, ignLoad
            xAxis = 0, { ignLoadMax }, 5
            yBins = rotarySplitValues

; Warmup enrichment curve
        curve = warmup_curve, "Warmup Enrichment (WUE) Curve"
            columnLabel = "Coolant", "WUE %"
            xAxis       = -40, 210, 9
            yAxis       =   0,  240, 6
            xBins       = wueBins, coolant
            yBins       = wueRates
            gauge       = cltGauge

; Cranking enrichment curve
        curve = cranking_enrich_curve, "Cranking Enrichment Curve"
          columnLabel = "Coolant", "Fuel Modifier"
          xAxis       = -40, 110, 9
          yAxis       =   0,  400, 6
          xBins       = crankingEnrichBins, coolant
          yBins       = crankingEnrichValues
          ;gauge       = cltGau25

; Priming Pulsewidth curve
        curve = priming_pw_curve, "Priming Pulsewidth"
          columnLabel = "Coolant", "PW"
          xAxis       = -40, 110, 4
          yAxis       =   0,  10, 4
          xBins       = primeBins, coolant
          yBins       = primePulse
          gauge       = cltGauge

; Afterstart Enrichment curve
        curve = afterstart_enrichment_curve, "ASE - Enrichment %"
          columnLabel = "Coolant", "Enrichment"
          xAxis       = -40, 110, 4
          yAxis       =   0,  200, 4
          xBins       = aseBins, coolant
          yBins       = asePct
          gauge       = cltGauge

; Afterstart Enrichment time
        curve = afterstart_enrichment_time, "ASE - Duration"
          columnLabel = "Coolant", "Time"
          xAxis       = -40, 110, 4
          yAxis       =   0,  20, 4
          xBins       = aseBins, coolant
          yBins       = aseCount
          gauge       = cltGauge

; Flex fuel correction curves
        curve = flex_fuel_curve, "Flex Fuel Adjustments"
          columnLabel    = "Ethanol", "Fuel"
          xAxis          = 0, 100, 10
          yAxis          = 50, 250, 5
          xBins          = flexFuelBins, flex
          yBins          = flexFuelAdj
          size           = 400, 200

        curve = flex_adv_curve, "Flex Timing Advance"
          columnLabel     = "Ethanol", "Advance"
          xAxis           = 0, 100, 10
          yAxis           = 0, 50, 5
          xBins           = flexAdvBins, flex
          yBins           = flexAdvAdj
          size            = 400, 200

        curve = flex_boost_curve, "Flex Boost Adjustments"
          columnLabel     = "Ethanol", "Boost"
          xAxis           = 0, 100, 10
          yAxis           = -100, 200, 5
          xBins           = flexBoostBins, flex
          yBins           = flexBoostAdj
          size            = 400, 200

;Knock sensor windows
        curve = knock_window_angle_curve, "Knock Window"
          columnLabel     = "RPM", "Window Start"
          xAxis           = 0, 8000, 9
          yAxis           = -100, 100, 11
          xBins           = knock_window_rpms, rpm
          yBins           = knock_window_angle
          size            = 400, 200

        curve = knock_window_duration_curve, "Knock Window Duration"
          columnLabel     = "RPM", "Window Duration"
          xAxis           = 0, 8000, 9
          yAxis           = 0, 100, 10
          xBins           = knock_window_rpms, rpm
          yBins           = knock_window_dur
          size            = 400, 200

; Oil Pressure protection curve
        curve = oil_pressure_prot_curve, "Oil Pressure Protection"
          columnLabel     = "RPM", "Minimum"
          xAxis           = 0, 8000, 9
          #if pressure_bar
            yAxis           = 0, 10.0, 3
          #else
            yAxis           = 0, 150, 3
          #endif
          xBins           = oilPressureProtRPM, rpm
          yBins           = oilPressureProtMins
          size            = 400, 200

; Coolant protection curve
        curve = coolant_prot_curve, "Coolant Temperature Protection"
          columnLabel     = "Coolant", "Limit" 
          #if CELSIUS
            xAxis = -40, 140, 5
        #else
            xAxis = -40, 315, 5
        #endif
          yAxis           = 0, 8000, 3
          xBins           = coolantProtTemp, coolant
          yBins           = coolantProtRPM
          size            = 200, 200

  ; Rolling engine protection curve
        curve = rolling_prot_curve, "Rolling Cut Percent"
          columnLabel     = "RPM Delta", "Event Cut" 
          xAxis           = -300, 0, 6
          yAxis           = 0, 125, 6
          xBins           = rollingProtRPMDelta
          yBins           = rollingProtCutPercent
          size            = 200, 200

  ; ; Warmup enrichment VEAL AFR adjustment curves
  ;         curve = warmup_afr_curve, "Target Adjustment"
  ;           columnLabel     = "Coolant", "Offset"
  ;           xAxis           =  -40,   210, 9
  ; #if LAMBDA
  ;           yAxis           = -0.3, 0.1, 5
  ; #else
  ;           yAxis           =  -4,   1, 5
  ; #endif
  ;           xBins           = wueBins, coolant
  ;           yBins           = wueAFR

        curve = warmup_analyzer_curve, "Warmup Enrichment"
          columnLabel     = "Coolant", "Current WUE", "Coolant", "Recommended WUE"
          xAxis           = -40, 210, 9
          yAxis           = 100, 255, 6
          xBins           = wueBins, coolant
          yBins           = wueRates
          yBins           = wueRecommended
          lineLabel       = "Current WUE"
          lineLabel       = "Recommended WUE"


        curve = wmi_adv_curve, "WMI Timing Advance"
          columnLabel     = "kPa", "Advance"
          xAxis           = 0, 511, 20
          yAxis           = 0, 50, 5
          xBins           = wmiAdvBins, map
          yBins           = wmiAdvAdj
          size            = 400, 200


        ; START TRANSMISSION MOD
        curve = shift_curve_1_2_panel, "Shift Curves 1/2"
            columnLabel = "Throttle", "Up", "Down"
            xAxis       = 0, 100, 6 ; tps from 0 - 100%
            yAxis       =  0, 120, 6 ; speed from 0 - 120mph
            xBins       = knock_window_rpms, auxin_gauge1 ;knock_window_rpms, fuelLoad  ; Reusing RPM bins to track throttle position
            yBins       = knock_window_angle      ; Reusing angle variable for upshift
            yBins       = knock_window_dur        ; Reusing duration variable for downshift

        curve = shift_curve_2_3_panel, "Shift Curves 2/3"
            columnLabel = "Throttle", "Up", "Down"
            xAxis       = 0, 100, 6 ; tps from 0 - 100%
            yAxis       =  0, 120, 6 ; speed from 0 - 120mph
            xBins       = fuelTempValues, auxin_gauge1 ;knock_window_rpms, fuelLoad  ; Reusing RPM bins to track throttle position
            yBins       = flexBoostBins      ; Reusing angle variable for upshift
            yBins       = flexFuelBins        ; Reusing duration variable for downshift

        curve = shift_curve_3_4_panel, "Shift Curves 3/4"
            columnLabel = "Throttle", "Up", "Down"
            xAxis       = 0, 100, 6 ; tps from 0 - 100%
            yAxis       =  0, 120, 6 ; speed from 0 - 120mph
            xBins       = flexAdvBins, auxin_gauge1 ;knock_window_rpms, fuelLoad  ; Reusing RPM bins to track throttle position
            yBins       = flexFuelAdj      ; Reusing angle variable for upshift
            yBins       = flexAdvAdj        ; Reusing duration variable for downshift

        curve = shift_selector_panel, "Shift Selector Mapping"
            columnLabel = "Selector Input", "Gear"
            xAxis       = 0, 255, 8 ; tps from 0 - 255, 8 set points
            yAxis       =  0, 10, 8 ; speed from 0 - 10, 8 set points
            xBins       = rpmBinsDutyLookup, gearSelector_ADC ;knock_window_rpms, fuelLoad  ; Reusing RPM bins to track throttle position
            yBins       = loadBinsDutyLookup      ; Reusing angle variable for upshift


        curve = trans_line_pressure_panel, "Transmission Line Pressure"
            columnLabel = "TPS", "PWM"
            xAxis       = 0, 255, 8 ; tps from 0 - 255, 8 set points
            yAxis       =  0, 255, 8 ; speed from 0 - 255, 8 set points
            xBins       = trans_line_pressure_tps, auxin_gauge1 ;knock_window_rpms, fuelLoad  ; Reusing RPM bins to track throttle position
            yBins       = trans_line_pressure_pwm      ; Reusing angle variable for upshift


        ; END TRANSMISSION MOD


[TableEditor]
   ;       table_id,    map3d_id,    "title",      page
   table = veTable1Tbl,  veTable1Map,  "VE Table",   2
      topicHelp = "http://wiki.speeduino.com/en/configuration/VE_table"
      xBins       = rpmBins,  rpm
      yBins       = fuelLoadBins, fuelLoad
      xyLabels    = "RPM", "Fuel Load: "
      zBins       = veTable

      gridHeight  = 2.0
      gridOrient  = 250,   0, 340
      upDownLabel = "(RICHER)", "(LEANER)"

    table = fuelTable2Tbl,  fuel2Map,  "Fuel Table 2",   11
        topicHelp = "http://wiki.speeduino.com/en/configuration/VE_table#secondary-fuel-table"
        xBins       = fuelRPM2Bins,  rpm
        yBins       = fuelLoad2Bins, fuelLoad2
        xyLabels    = "RPM", "Fuel Load: "
        zBins       = veTable2

        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHER)", "(LEANER)"

   table = sparkTbl,    sparkMap,    "Ignition Advance Table", 3
      xBins = rpmBins2, rpm
      ;yBins = ignLoadBins, ignLoad
      yBins = mapBins1, ignLoad
      xyLabels    = "RPM", "Ignition Load: "
      zBins = advTable1
      gridHeight  = 3.0
      upDownLabel = "ADVANCING", "RETARDING"

    table = spark2Tbl,    spark2Map,    "Second Ignition Advance Table", 14
      xBins = rpmBins3, rpm
      ;yBins = ignLoadBins, ignLoad
      yBins = mapBins2, ignLoad2
      xyLabels    = "RPM", "Ignition Load: "
      zBins = advTable2
      gridHeight  = 3.0
      upDownLabel = "ADVANCING", "RETARDING"

    ;table = afrTbl,    afrTableMap,    "AFR Table", 5
    table = afrTable1Tbl, afrTable1Map, "AFR Table", 5
      xBins = rpmBinsAFR, rpm
      yBins = loadBinsAFR, fuelLoad
      zBins = afrTable
      gridHeight  = 1.0
      upDownLabel = "RICHER", "LEANER"
      gridOrient  = 250,   0, 340

    table = lambdaTable1Tbl, lambdaTable1Map, "Lambda Table", 5
      xBins = rpmBinsAFR, rpm
      yBins = loadBinsAFR, fuelLoad
      zBins = lambdaTable
      gridHeight  = 1.0
      upDownLabel = "RICHER", "LEANER"
      gridOrient  = 250,   0, 340

      ;#if BOOSTPSI
      ;table = boostTbl,    boostMap,    "Boost targets (PSI)", 8
      ;#else
      ;table = boostTbl,    boostMap,    "Boost targets (Absolute kPa)", 8
      ;#endif
    table = boostTbl,    boostMap,  "Boost Duty / Target", 7
      xBins = rpmBinsBoost, rpm
      yBins = tpsBinsBoost, throttle
      zBins = boostTable
      gridHeight  = 3.0
      upDownLabel = "HIGHER", "LOWER"

    table = boostDCLupTbl,   boostDutyLookup,  "Base duty for closed loop", 7
      xBins = rpmBinsDutyLookup, rpm
      yBins = loadBinsDutyLookup, boostTarget
      zBins = boostTableDutyLookup
      gridHeight  = 3.0
      upDownLabel = "HIGHER", "LOWER"      


    table = vvtTbl,    vvtMap,    "VVT control Table", 7
      xBins = rpmBinsVVT, rpm
      ;yBins = tpsBinsVVT, throttle
      yBins = loadBinsVVT, vvtLoad
      zBins = vvtTable
      xyLabels    = "RPM", "VVT Load: "
      gridHeight  = 3.0
      upDownLabel = "HIGHER", "LOWER"

    table = vvt2Tbl,    vvt2Map,    "VVT2 control Table", 12
      xBins = rpmBinsVVT2, rpm
      ;yBins = tpsBinsVVT, throttle
      yBins = loadBinsVVT2, vvtLoad
      zBins = vvt2Table
      xyLabels    = "RPM", "VVT Load: "
      gridHeight  = 3.0
      upDownLabel = "HIGHER", "LOWER"

    table = wmiTbl,  wmiMapMap,    "WMI control Table", 12
      xBins = rpmBinsWMI, rpm
      yBins = mapBinsWMI, map
      zBins = wmiTable
      xyLabels    = "RPM", "WMI Load: "
      gridHeight  = 3.0
      upDownLabel = "HIGHER", "LOWER"

    table = stagingTbl,    stagingMap,    "Fuel Staging Table", 7
      xBins = rpmBinsStaging, rpm
      yBins = loadBinsStaging, fuelLoad
      zBins = stagingTable
      gridHeight  = 3.0
      upDownLabel = "HIGHER", "LOWER"

;--------- Sequential fuel trim maps -----------
    table = fuelTrimTable1Tbl,  fuelTrimTable1Map,  "Fuel trim Table 1",   8
        xBins       = fuelTrim1rpmBins,  rpm
        yBins       = fuelTrim1loadBins,  fuelLoad
        zBins       = fuelTrim1Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHER)", "(LEANER)"

    table = fuelTrimTable2Tbl,  fuelTrimTable2Map,  "Fuel trim Table 2",   8
        xBins       = fuelTrim2rpmBins,  rpm
        yBins       = fuelTrim2loadBins,  fuelLoad
        zBins       = fuelTrim2Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHER)", "(LEANER)"

    table = fuelTrimTable3Tbl,  fuelTrimTable3Map,  "Fuel trim Table 3",   8
        xBins       = fuelTrim3rpmBins,  rpm
        yBins       = fuelTrim3loadBins,  fuelLoad
        zBins       = fuelTrim3Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHER)", "(LEANER)"

    table = fuelTrimTable4Tbl,  fuelTrimTable4Map,  "Fuel trim Table 4",   8
        xBins       = fuelTrim4rpmBins,  rpm
        yBins       = fuelTrim4loadBins,  fuelLoad
        zBins       = fuelTrim4Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHER)", "(LEANER)"

    table = fuelTrimTable5Tbl,  fuelTrimTable5Map,  "Fuel trim Table 5",   8
        xBins       = fuelTrim5rpmBins,  rpm
        yBins       = fuelTrim5loadBins,  fuelLoad
        zBins       = fuelTrim5Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHER)", "(LEANER)"

    table = fuelTrimTable6Tbl,  fuelTrimTable6Map,  "Fuel trim Table 6",   8
        xBins       = fuelTrim6rpmBins,  rpm
        yBins       = fuelTrim6loadBins,  fuelLoad
        zBins       = fuelTrim6Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHER)", "(LEANER)"

    table = fuelTrimTable7Tbl,  fuelTrimTable7Map,  "Fuel trim Table 7",   8
        xBins       = fuelTrim7rpmBins,  rpm
        yBins       = fuelTrim7loadBins,  fuelLoad
        zBins       = fuelTrim7Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHER)", "(LEANER)"

    table = fuelTrimTable8Tbl,  fuelTrimTable8Map,  "Fuel trim Table 8",   8
        xBins       = fuelTrim8rpmBins,  rpm
        yBins       = fuelTrim8loadBins,  fuelLoad
        zBins       = fuelTrim8Table
        gridHeight  = 2.0
        gridOrient  = 250,   0, 340
        upDownLabel = "(RICHER)", "(LEANER)"

    table = dwell_map, dwell_tblMap, "Dwell map", 12
      xBins = rpmBinsDwell, rpm
      yBins = loadBinsDwell, ignLoad
      zBins = dwellTable
      xyLabels    = "RPM", "Load: "
      gridHeight  = 3.0
      upDownLabel = "HIGHER", "LOWER"


;-------------------------------------------------------------------------------

[GaugeConfigurations]

   ;-------------------------------------------------------------------------------
   ; Define a gauge's characteristics here, then go to a specific layout
   ; block (Tuning or FrontPage) and use the name you've defined here to
   ; display that gauge in a particular position.
   ;
   ; Name  = Case-sensitive, user-defined name for this gauge configuration.
   ; Var   = Case-sensitive name of variable to be displayed, see the
   ;         OutputChannels block in this file for possible values.
   ; Title = Title displayed at the top of the gauge.
   ; Units = Units displayed below value on gauge.
   ; Lo    = Lower scale limit of gauge.
   ; Hi    = Upper scale limit of gauge.
   ; LoD   = Lower limit at which danger color is used for gauge background.
   ; LoW   = Lower limit at which warning color is used.
   ; HiW   = Upper limit at which warning color is used.
   ; HiD   = Upper limit at which danger color is used.
   ; vd    = Decimal places in displayed value
   ; ld    = Label decimal places for display of Lo and Hi, above.

    gaugeCategory = "Main"
    ;Name               Var            Title                 Units     Lo     Hi     LoD    LoW   HiW   HiD vd ld
    accelEnrichGauge  = accelEnrich,   "Accel Enrich",       "%",      50,   150,     -1,    -1,  999,  999, 0, 0
    injOpenGauge      = inj_open,      "Injector Open Time", "mSec",  0.0,   3.0,    0.0,   0.0,  3.0,  3.0, 3, 3
    dutyCycleGauge    = dutyCycle,     "Duty Cycle",         "%",       0,   100,     -1,    -1,   70,   80, 1, 1
    stgDutyCycleGauge = stgDutyCycle,  "Staging Duty Cycle", "%",       0,   100,     -1,    -1,   70,   80, 1, 1
    egoCorrGauge      = egoCorrection, "EGO Correction",     "%",      50,   150,     90,    99,  101,  110, 0, 0

    gammaEnrichGauge  = gammaEnrich,   "Gamma Enrichment",   "%",      50,   250,     -1,    -1,  151,  151, 0, 0
    pulseWidthGauge   = pulseWidth,    "Pulse Width",        "mSec",    0,  35.0,    1.0,   1.2,   20,   25, 3, 3
    pulseWidthGauge2  = pulseWidth2,   "Pulse Width 2",      "mSec",    0,  35.0,    1.0,   1.2,   20,   25, 3, 3
    pulseWidthGauge3  = pulseWidth3,   "Pulse Width 3",      "mSec",    0,  35.0,    1.0,   1.2,   20,   25, 3, 3
    pulseWidthGauge4  = pulseWidth4,   "Pulse Width 4",      "mSec",    0,  35.0,    1.0,   1.2,   20,   25, 3, 3
    tachometer        = rpm,           "Engine Speed",       "RPM",     0,  {rpmhigh},    300,   600, {rpmwarn}, {rpmdang}, 0, 0
    veGauge           = veCurr,        "VE (Current)",         "%",       0,   120,     -1,    -1,  999,  999, 0, 0
    ve1Gauge          = VE1,           "VE1 (Fuel Table 1)", "%",       0,   120,     -1,    -1,  999,  999, 0, 0
    ve2Gauge          = VE2,           "VE2 (Fuel Table 2)", "%",       0,   120,     -1,    -1,  999,  999, 0, 0
    warmupEnrichGauge = warmupEnrich,  "Warmup Enrichment",  "%",     100,   200,    130,   140,  140,  150, 0, 0
    aseEnrichGauge    = ase_enrich,    "Afterstart Enrichment","%",     0,   200,    130,   140,  140,  150, 0, 0
    batCorrectGauge   = bat_correction,"Voltage Correction", "%",       0,   200,    130,   140,  140,  150, 0, 0
    iatCorrectGauge   = airCorrection, "IAT Correction",     "%",       0,   200,    130,   140,  140,  150, 0, 0
    baroCorrectGauge  = baroCorrection,"Baro Correction",    "%",       0,   200,    130,   140,  140,  150, 0, 0
    flexEnrich        = flexFuelCor,   "Flex Correction",    "%",       0,   200,    130,   140,  140,  150, 0, 0
    fuelTempCorGauge  = fuelTempCor,   "Fuel Temp Correction", "%",     0,   200,    130,   140,  140,  150, 0, 0
    advanceGauge      = advance,       "Advance (Current)",     "deg",    -10, 50,      0,     0,    35,   45, 0, 0
    advance1Gauge     = advance1,      "Advance1 (Spark Table 1)",  "deg",-10, 50,      0,     0,    35,   45, 0, 0
    advance2Gauge     = advance2ForGauge, "Advance2 (Spark Table 2)",  { bitStringValue( spark2ModeUnits, spark2Mode ) }, { ign2ValuesMin }, { ign2ValuesMax }, { ign2ValueLoD }, { ign2ValueLoW },  { ign2ValueHiW }, { ign2ValueHiD }, 0, 0
    dwellGauge        = dwell,         "Dwell (Requested)",         "mSec",    0,  35.0,    1.0,   1.2,   20,   25, 3, 3
    dwellActualGauge  = dwellActual,   "Dwell (Measured)",          "mSec",    0,  35.0,    1.0,   1.2,   20,   25, 3, 3
    boostTargetGauge  = boostTarget,   "Target Boost",       "kPa",     0,   {maphigh},      0,    20,  {mapwarn},  {mapdang}, 0, 0
    boostDutyGauge    = boostDuty,     "Boost Duty Cycle",   "%",       0,   100,     -1,    -1,  101,  110, 1, 1
    ;afrTargetGauge    = afrTarget,     "Target AFR",         "",        7,    25,   {12 / 14.7 * stoich}, {13 / 14.7 * stoich}, {15 / 14.7 * stoich}, {16 / 14.7 * stoich}, 2, 2
    lambdaTargetGauge = lambdaTarget,  "Target Lambda",      "",        0.5, 1.5,   0.82,  0.89, 1.02, 1.09, 3, 3
    IdleTargetGauge   = CLIdleTarget,  "Idle Target RPM",    "RPM",     0,  2000,    300,   600, 1500, 1700, 0, 0
    idleLoadGauge     = idleLoad,      "IAC Load",          { bitStringValue( idleUnits , iacAlgorithm  ) }, 0,   {(iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6) ? 100: iacStepHome},      0,    0,  2000,  2000, 0, 0
    FANdutyCycleGauge = fanDuty,       "FAN Duty Cycle",     "%",       0,   100,     -1,    -1,  101,  110, 1, 1
    vvt1DutyCycleGauge= vvt1Duty,      "VVT Duty Cycle",     "%",       0,  100,     -1,    -1,   101, 110, 1, 1
    vvt1TargetGauge   = vvt1Target,    "VVT Target Angle",   "deg",     0,  100,     15,    25,    65,  75, 1, 1
    vvt1AngleGauge    = vvt1Angle,     "VVT Angle",          "deg",   -20,  100,      0,    -5,    70,  90, 1, 1
    vvt2DutyCycleGauge= vvt2Duty,      "VVT2 Duty Cycle",    "%",       0,  100,     -1,    -1,   101, 110, 1, 1
    vvt2TargetGauge   = vvt2Target,    "VVT2 Target Angle",  "deg",     0,  100,     15,    25,    65,  75, 1, 1
    vvt2AngleGauge    = vvt2Angle,     "VVT2 Angle",         "deg",   -20,  100,      0,    -5,    70,  90, 1, 1

    WMIdutyCycleGauge = wmiPW,         "WMI Duty Cycle",     "%",       0,   100,     -1,    -1,  101,  110, 1, 1

    gaugeCategory = "Sensor inputs"
    mapGauge          = map,           "Engine MAP",              "kPa",          0,      {maphigh},    0,      20,  {mapwarn},  {mapdang}, 0, 0
    mapGauge_psi      = map_psi,       "Engine MAP (PSI)",        "PSI",          -15,    100,    0,      20,  200,  245, 0, 0
    mapGauge_bar      = map_bar,       "Engine MAP (BAR)",        "Bar",          -1,     3,      -1,     -1,    5,  5,  2, 2
    mapGauge_vacBoost = map_vacboost,  "Engine MAP (in-Hg/PSI)",  "in-Hg/PSI",    -30,    30,     -30,    -30, 30, 30, 1, 1
    emapGauge         = emap,          "Exhaust MAP",             "kPa",          0,      {maphigh},    0,      20,  {mapwarn},  {mapdang}, 0, 0
    baroGauge         = baro,          "Baro Pressure",           "kPa",          0,      {maphigh},    0,      20,  {mapwarn},  {mapdang}, 0, 0
    batteryVoltage    = batteryVoltage,"Battery Voltage",         "volts",        0,    25,      8,     9,   15,   16, 2, 2
    vssGauge          = vss,           "Vehicle Speed (kph)",     "km/h",         0,    250,     5,    10,   180,   200, 0, 0
    vssGaugeMPH       = vssMPH,        "Vehicle Speed (mph)",     "mph",          0,    250,     5,    10,   180,   200, 0, 0
    ; TRANSMISSION MOD TESTING START
    ;Name               Var            Title                                                  Units     Lo     Hi     LoD    LoW   HiW      HiD vd ld
    gearGauge         = gear,          "Gear"                                                   "",    0,    5,      0,     0,    5,        5, 0, 0
    gearSelector_ADCGauge = gearSelector_ADC,  "Gear Selector ADC",                              "",    0,    255,      0,     0,    255,    255, 0, 0
    gearSelectorChosenGearGauge = gearSelectorChosenGear,  "Gear Selector Chosen Gear",          "",    0,    8,        0,     0,    8,       8, 0, 0
    transTemp_CalculatedResistanceGauge = transTemp_CalculatedResistance,  "Trans Temp Calculated Resistance",          "",    0,    65535,        0,     0,    65535,       65535, 0, 0
    transTempGauge = transTemp,  "Trans Temp",          "TEMP",    0,    200,        0,     0,    200,       200, 0, 0
    canRPMGauge = canRPM,           "CAN Engine Speed",       "RPM",     0,  {rpmhigh},    300,   600, {rpmwarn}, {rpmdang}, 0, 0
    canTPSGauge = canTPS,     "CAN Throttle Position",   "%",       0,   100,     -1,    -1,  101,  110, 1, 1
    ; TRANSMISSION MOD TESTING END  

    tpsADCGauge       = tpsADC,        "TPS ADC",            "",        0,   255,     -1,    -1,  256,  256, 0, 0
    throttleGauge     = throttle,      "Throttle Position",  "%TPS",    0,   100,     -1,     1,   90,  100, 1, 1

    ;afrGauge          = afr,           "Air:Fuel Ratio",     "",        7,    25,   {12 / 14.7 * stoich}, {13 / 14.7 * stoich}, {15 / 14.7 * stoich}, {16 / 14.7 * stoich}, 2, 2
    ;afrGauge2         = afr2,          "Air:Fuel Ratio 2",   "",        7,    25,   {12 / 14.7 * stoich}, {13 / 14.7 * stoich}, {15 / 14.7 * stoich}, {16 / 14.7 * stoich}, 2, 2
    lambdaGauge       = lambda,        "Lambda",             "",        0.5,  1.5,    0.5,   0.7,    2,  1.1, 2, 2
    TPSdotGauge       = TPSdot,        "TPS DOT",            "%/s",   -1000, 1000,  -2560, -2560, 2560, 2560, 0, 0
    MAPdotGauge       = MAPdot,        "MAP DOT",            "kPa/s", -1000, 1000,  -2560, -2560, 2560, 2560, 0, 0

    #if CELSIUS
    cltGauge          = coolant,       "Coolant Temp",       "TEMP", -40,   120,    -15,     0,   95,  105, 0, 0
    iatGauge          = iat,           "Inlet Air Temp",     "TEMP", -40,   120,    -15,     0,   95,  100, 0, 0
    fuelTempGauge     = fuelTemp,      "Fuel Temp",          "TEMP", -40,   120,    -15,     0,   95,  100, 0, 0
    #else
    cltGauge          = coolant,       "Coolant Temp",       "TEMP", -40,   248,      0,    30,  200,  220, 0, 0
    iatGauge          = iat,           "Inlet Air Temp",     "TEMP", -40,   248,      0,    30,  200,  210, 0, 0
    fuelTempGauge     = fuelTemp,      "Fuel Temp",          "TEMP", -40,   248,      0,    30,  200,  210, 0, 0
    #endif
    flexGauge         = flex,          "Flex sensor",        "%",       0,   100,     -1,    -1,  999,  999, 0, 0

    fuelPressureGauge    = fuelPressure,    "Fuel Pressure (PSI)", "PSI",    -15,    100,   0,       20,   200,   245, 0, 0
    oilPressureGauge     = oilPressure,     "Oil Pressure (PSI)",  "PSI",    -15,    100,   0,       20,   200,   245, 0, 0
    fuelPressureBarGauge = fuelPressure_bar,"Fuel Pressure (BAR)", "BAR",   -1.0,    7.0,   0.5,    1.4,  14.0,  17.0, 1, 1
    oilPressureBarGauge  = oilPressure_bar, "Oil Pressure (BAR)",  "BAR",   -1.0,    7.0,   0.5,    1.4,  14.0,  17.0, 1, 1
    fuelPressurekPaGauge = fuelPressure_kpa,"Fuel Pressure (kPa)", "kPa",   -100,    700,   50,     140,  1400,  1700, 0, 0
    oilPressurekPaGauge  = oilPressure_kpa, "Oil Pressure (kPa)",  "kPa",   -100,    700,   50,     140,  1400,  1700, 0, 0


    gaugeCategory     = "Auxiliary Input Channels"
    AuxInGauge0       = auxin_gauge0,    { stringValue(AUXin00Alias) },        "",             0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge1       = auxin_gauge1,    { stringValue(AUXin01Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge2       = auxin_gauge2,    { stringValue(AUXin02Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge3       = auxin_gauge3,    { stringValue(AUXin03Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge4       = auxin_gauge4,    { stringValue(AUXin04Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge5       = auxin_gauge5,    { stringValue(AUXin05Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge6       = auxin_gauge6,    { stringValue(AUXin06Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge7       = auxin_gauge7,    { stringValue(AUXin07Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge8       = auxin_gauge8,    { stringValue(AUXin08Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge9       = auxin_gauge9,    { stringValue(AUXin09Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge10      = auxin_gauge10,    { stringValue(AUXin10Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge11      = auxin_gauge11,    { stringValue(AUXin11Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge12      = auxin_gauge12,    { stringValue(AUXin12Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge13      = auxin_gauge13,    { stringValue(AUXin13Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge14      = auxin_gauge14,    { stringValue(AUXin14Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0
    AuxInGauge15      = auxin_gauge15,    { stringValue(AUXin15Alias) },        "",        0,    1024,  -1,    -1,  1025,    1025,  0,  0

    gaugeCategory = "System Data"
    clockGauge        = secl,          "Clock",              "Seconds", 0,   255,     10,    10,  245,  245, 0, 0
    loopGauge         = loopsPerSecond,"Main loop speed",    "Loops/S" , 0,  5000,   750,  900, 100000, 100000, 0, 0
    loopsPerRevGauge  = loopsPerRev,   "Main loops per revolution", "Loops/rev", 0, 100, 10,  15, 10000, 10000, 2, 0
    memoryGauge       = freeRAM,       "Free memory",        "bytes" ,   0,  8000,     -1,    1000,8000, 1000, 0, 0
    reqFuelGauge      = req_fuel,       "Req. Fuel",          "ms",      0,  35.0,    1.0,   1.2,   20,   25, 2, 2
    mapMultiplyGauge  = map_multiply_amt, "MAP Multiply",     "%",       0,   200,    130,   140,  140,  150, 0, 0
    nSquirtsGauge     = nSquirts,       "# Squirts",          "",        0,    10,    130,   140,  140,  150, 0, 0
    syncLossGauge     = syncLossCounter, "# Sync Losses",      "",        0,    255,    -1,   -1,  10,  50, 0, 0
;-------------------------------------------------------------------------------

[FrontPage]


   ; Gauges are numbered left to right, top to bottom.
   ;
   ;    1  2  3  4
   ;    5  6  7  8

   gauge1 = tachometer
   gauge2 = throttleGauge
   gauge3 = pulseWidthGauge
   gauge4 = dutyCycleGauge
   gauge5 = mapGauge
   gauge6 = iatGauge
   gauge7 = gearSelector_ADCGauge
   gauge8 = gearSelectorChosenGearGauge

   ;----------------------------------------------------------------------------
   ; Indicators
   ;             expr                   off-label       on-label,             off-bg, off-fg, on-bg,  on-fg
   indicator = { gearSelectorChosenGear == 0}, "Park",   "PARK",            white,  black, green,    black
   indicator = { gearSelectorChosenGear == 1 }, "Reverse",  "REVERSE",           white,  black, green,    black
   indicator = { gearSelectorChosenGear == 2 }, "Neutral",       "NEUTRAL",             white,  black, green,    black
   indicator = { gearSelectorChosenGear == 3 }, "Drive",       "DRIVE",             white,  black, green,    black
   indicator = { gearSelectorChosenGear == 4 }, "2nd",         "2ND GEAR",              white,  black, green,    black
   indicator = { gearSelectorChosenGear == 5 }, "1st",         "1ST GEAR",              white,  black, green,    black
   indicator = { mapaccaen          }, "MAP Accel",     "MAP Accel",          white,  black, green,    black
   indicator = { mapaccden          }, "MAP Decel",     "MAP Decel",          white,  black, green,    black
   indicator = { error              }, "No Errors",     "ERROR",              white,  black, green,    black
   indicator = { (tps > tpsflood) && (rpm < crankRPM) }, "FLOOD OFF", "FLOOD CLEAR",      white, black, red,   black
   indicator = { DFCOOn             }, "DFCO OFF",      "DFCO On",            white,  black, red,      black
   indicator = { launchHard         }, "Launch Hard",   "Launch Hard",        white,  black, green,    black
   indicator = { launchSoft         }, "Launch Soft",   "Launch Soft",        white,  black, green,    black
   indicator = { softlimitOn        }, "Soft Limit OFF","Soft Limiter",       white,  black, red,      black
   indicator = { hardLimitOn        }, "Hard Limit OFF","Hard Limiter",       white,  black, red,      black
   indicator = { boostCutOut        }, "Ign Cut OFF",   "Ign Cut (Boost)",    white,  black, red,      black
   indicator = { sync               }, "No Sync",       "Full Sync",          white,  black, green,    black
   indicator = { halfSync           }, "No or Full Sync",  "Half Sync",       white,  black, yellow, black
   indicator = { resetLockOn        }, "Reset Lock OFF","Reset Lock ON",      red,    black, green,    black
   indicator = { bootloaderCaps > 0 }, "Std. Boot",     "Custom Boot",        white,  black, white,    black
   indicator = { nitrousOn          }, "Nitrous Off",   "Nitrous On",         white,  black, red,      black
   indicator = { IOError            }, "I/O Ok",        "I/O Error!",         white,  black, red,      black
   indicator = { burnPending        }, "EEPROM Burn",   "EEPROM Burn",        white,  black, red,      black
   indicator = { stagingActive      }, "Staging Off",   "Staging On",         white,  black, green,      black
   ;Engine Protection status indicators
   indicator = { engineProtectStatus}, "Engine Protect OFF",   "Engine Protect ON",   white, black, red,      black
   indicator = { engineProtectRPM   }, "Rev Limiter Off",      "Rev Limiter ON",      white, black, red,      black
   indicator = { engineProtectMAP   }, "Boost Limit OFF",      "Boost Limit ON",      white, black, red,      black
   indicator = { engineProtectOil   }, "Oil Pres. Protect OFF","Oil Pres. Protect ON",white, black, red,      black
   indicator = { engineProtectAFR   }, "AFR Protect OFF",      "AFR Protect ON",      white, black, red,      black
   indicator = { engineProtectCoolant }, "Coolant Protect OFF","Coolant Protect ON",white, black, red, black
   indicator = { wmiEmptyBit        }, "WMI Tank NOT Empty",   "WMI Tank Empty",      white, black, red,      black
   indicator = { vvt1Error          }, "VVT1 Ok",              "VVT1 Error",          white, black, red,      black
   indicator = { vvt2Error          }, "VVT2 Ok",              "VVT2 Error",          white, black, red,      black
   indicator = { fanStatus          }, "Fan OFF",              "Fan ON",              white, black, red,      black
   indicator = { idleControlOn      }, "Idle OFF",             "Idle ON",             white, black, green,    black
   indicator = { (batteryVoltage < batlow) || (batteryVoltage > bathigh) }, "Battery Voltage OK", "Battery Voltage Warning", white, black, red, black
   indicator = { outputsStatus0     }, "Programmable out 1 Off", "Programmable out 1 ON", white, black, green, black
   indicator = { outputsStatus1     }, "Programmable out 2 Off", "Programmable out 2 ON", white, black, green, black
   indicator = { outputsStatus2     }, "Programmable out 3 Off", "Programmable out 3 ON", white, black, green, black
   indicator = { outputsStatus3     }, "Programmable out 4 Off", "Programmable out 4 ON", white, black, green, black
   indicator = { outputsStatus4     }, "Programmable out 5 Off", "Programmable out 5 ON", white, black, green, black
   indicator = { outputsStatus5     }, "Programmable out 6 Off", "Programmable out 6 ON", white, black, green, black
   indicator = { outputsStatus6     }, "Programmable out 7 Off", "Programmable out 7 ON", white, black, green, black
   indicator = { outputsStatus7     }, "Programmable out 8 Off", "Programmable out 8 ON", white, black, green, black

   ;AC stuff
   indicator = { airConRequest      }, "A/C Request OFF",   "A/C Request ON",       white, black, green, black
   indicator = { airConCompressor   }, "A/C Comp OFF",      "A/C Comp ON",          white, black, green, black
   indicator = { airConFanStatus    }, "A/C Fan OFF",       "A/C Fan ON",           white, black, green, black

   ;sd card indicators
   indicator = { sd_status      & 1}, "No SD Card", "SD Present",   white, black, green, black
   indicator = { sd_status      & 4}, "SD ready", "SD ready",       white, black, green, black
   indicator = { sd_status      & 8}, "SD Off", "SD Logging",       white, black, green, black
   indicator = { sd_status      & 16},"SD OK", "SD Error",          white, black, red, black

;-------------------------------------------------------------------------------

[OutputChannels]
  ; The number of bytes MegaTune or TunerStudio should expect as a result
  ; of sending the "A" command to Speeduino is determined
  ; by the value of ochBlockSize, so be very careful when
  ; you change it.

  ochGetCommand    = "r\$tsCanId\x30%2o%2c"
  ochBlockSize     =  140

  secl             = scalar, U08,  0, "sec",    1.000, 0.000
  status1          = scalar, U08,  1, "bits",   1.000, 0.000
  inj1Status       = bits,    U08,    1, [0:0]
  inj2Status       = bits,    U08,    1, [1:1]
  inj3Status       = bits,    U08,    1, [2:2]
  inj4Status       = bits,    U08,    1, [3:3]
  DFCOOn           = bits,    U08,    1, [4:4]
  boostCutFuel     = bits,    U08,    1, [5:5]
  toothLog1Ready   = bits,    U08,    1, [6:6]
  toothLog2Ready   = bits,    U08,    1, [7:7]
  engine           = scalar, U08,  2, "bits",   1.000, 0.000
  running          = bits,    U08,    2, [0:0]
  crank            = bits,    U08,    2, [1:1]
  ase              = bits,    U08,    2, [2:2]
  warmup           = bits,    U08,    2, [3:3]
  tpsaccaen        = bits,    U08,    2, [4:4]
  tpsaccden        = bits,    U08,    2, [5:5]
  mapaccaen        = bits,    U08,    2, [6:6]
  mapaccden        = bits,    U08,    2, [7:7]
  syncLossCounter  = scalar,   U08,    3, "",       1.000, 0.000
  map              = scalar,   U16,    4, "kpa",    1.000, 0.000
  iatRaw           = scalar,   U08,    6, "°C",     1.000, 0.000
  coolantRaw       = scalar,   U08,    7, "°C",     1.000, 0.000
  batCorrection    = scalar,   U08,    8, "%",      1.000, 0.000
  batteryVoltage   = scalar,   U08,    9, "V",      0.100, 0.000
  afr              = scalar,   U08,    10, "O2",     0.100, 0.000
  egoCorrection    = scalar,   U08,    11, "%",      1.000, 0.000
  airCorrection    = scalar,   U08,    12, "%",      1.000, 0.000
  warmupEnrich     = scalar,   U08,    13, "%",      1.000, 0.000
  rpm              = scalar,   U16,    14, "rpm",    1.000, 0.000
  accelEnrich      = scalar,   U08,    16, "%",      2.000, 0.000
  gammaEnrich      = scalar,   U16,    17, "%",      1.000, 0.000
  VE1              = scalar,   U08,    19, "%",      1.000, 0.000
  VE2              = scalar,   U08,    20, "%",      1.000, 0.000
  afrTarget        = scalar,   U08,    21, "O2",     0.100, 0.000
  TPSdot           = scalar,   S16,    22, "%/s",    1.000, 0.000
  advance          = scalar,   S08,    24, "deg",    1.000, 0.000
  tps              = scalar,   U08,    25, "%",      0.500, 0.000
  loopsPerSecond   = scalar,   U16,    26, "loops",  1.000, 0.000
  freeRAM          = scalar,   U16,    28, "bytes",  1.000, 0.000
  boostTarget      = scalar,   U08,    30, "kPa",    2.000, 0.000
  boostDuty        = scalar,   U08,    31, "%",      1.000, 0.000
  status2          = scalar,   U08,    32, "bits",   1.000, 0.000
  launchHard       = bits,    U08,    32, [0:0]
  launchSoft       = bits,    U08,    32, [1:1]
  hardLimitOn      = bits,    U08,    32, [2:2]
  softlimitOn      = bits,    U08,    32, [3:3]
  boostCutSpark    = bits,    U08,    32, [4:4]
  error            = bits,    U08,    32, [5:5]
  idleControlOn    = bits,    U08,    32, [6:6]
  sync             = bits,    U08,    32, [7:7]
  rpmDOT           = scalar,   S16,    33, "rpm/s",  1.000, 0.000
  flex             = scalar,   U08,    35, "%",      1.000, 0.000
  flexFuelCor      = scalar,   U08,    36, "%",      1.000, 0.000
  flexIgnCor       = scalar,   S08,    37, "deg",    1.000, 0.000
  idleLoad         = scalar,   U08,    38, { bitStringValue( idleUnits , iacAlgorithm  ) },    { (iacAlgorithm == 2 || iacAlgorithm == 3 || iacAlgorithm == 6 || iacMaxSteps <= 255) ? 1.000 : 2.000 }, 0.000 ; This is a combined variable covering both PWM and stepper IACs. The units and precision used depend on which idle algorithm is chosen
  testoutputs      = scalar,   U08,    39, "bits",   1.000, 0.000
  testenabled      = bits,    U08,    39, [0:0]
  testactive       = bits,    U08,    39, [1:1]
  afr2             = scalar,   U08,    40, "O2",     0.100, 0.000
  baro             = scalar,   U08,    41, "kpa",    1.000, 0.000
  auxin_gauge0      = scalar,   U16,    42,  "",       1.000, 0.000
  auxin_gauge1      = scalar,   U16,    44,  "",       1.000, 0.000
  auxin_gauge2      = scalar,   U16,    46,  "",       1.000, 0.000
  auxin_gauge3      = scalar,   U16,    48,  "",       1.000, 0.000
  auxin_gauge4      = scalar,   U16,    50,  "",        1.000, 0.000
  auxin_gauge5      = scalar,   U16,    52,  "",       1.000, 0.000
  auxin_gauge6      = scalar,   U16,    54,  "",       1.000, 0.000
  auxin_gauge7      = scalar,   U16,    56,  "",       1.000, 0.000
  auxin_gauge8      = scalar,   U16,    58,  "",       1.000, 0.000
  auxin_gauge9      = scalar,   U16,    60,  "",       1.000, 0.000
  auxin_gauge10     = scalar,   U16,    62,  "",        1.000, 0.000
  auxin_gauge11     = scalar,   U16,    64,  "",        1.000, 0.000
  auxin_gauge12     = scalar,   U16,    66,  "",       1.000, 0.000
  auxin_gauge13     = scalar,   U16,    68,  "",        1.000, 0.000
  auxin_gauge14     = scalar,   U16,    70,  "",        1.000, 0.000
  auxin_gauge15     = scalar,   U16,    72,  "",        1.000, 0.000
  tpsADC            = scalar,   U08,    74, "ADC",    1.000, 0.000
  errors            = scalar,   U08,    75, "bits",   1.000, 0.000
    errorNum          = bits,     U08,    75, [0:1]
    currentError      = bits,     U08,    75, [2:7]
  pulseWidth        = scalar,   U16,    76, "ms",     0.001, 0.000
  pulseWidth2       = scalar,   U16,    78, "ms",     0.001, 0.000
  pulseWidth3       = scalar,   U16,    80, "ms",     0.001, 0.000
  pulseWidth4       = scalar,   U16,    82, "ms",     0.001, 0.000
  status3           = scalar,   U08,    84, "bits", 1.000, 0.000
    resetLockOn       = bits,     U08,       84, [0:0]
    nitrousOn         = bits,     U08,       84, [1:1]
    fuel2Active       = bits,     U08,       84, [2:2]
    vssRefresh        = bits,     U08,       84, [3:3]
    halfSync          = bits,     U08,       84, [4:4]
    nSquirts          = bits,     U08,       84, [5:7]
  engineProtectStatus = scalar,   U08,    85, "bits", 1.000, 0.000
    engineProtectRPM  = bits,     U08,       85, [0:0]
    engineProtectMAP  = bits,     U08,       85, [1:1]
    engineProtectOil  = bits,     U08,       85, [2:2]
    engineProtectAFR  = bits,     U08,       85, [3:3]
    engineProtectCoolant = bits,  U08,       85, [4:4]
    engineProtectOth  = bits,     U08,       85, [5:6] ; Unused for now
    IOError           = bits,     U08,       85, [7:7]
  fuelLoad          = scalar,   S16,    86, { bitStringValue( algorithmUnits , algorithm  ) }, {fuelLoadFeedBack}, 0.000
  ignLoad           = scalar,   S16,    88, { bitStringValue( algorithmUnits , ignAlgorithm  ) }, {ignLoadFeedBack}, 0.000
  dwell             = scalar,   U16,    90, "ms",     0.001, 0.000
  CLIdleTarget      = scalar,   U08,    92, "RPM",    10.00, 0.000
  MAPdot            = scalar,   S16,    93, "kPa/s",  1.000, 0.000
  vvt1Angle         = scalar,   S16,    95, "deg",    0.50, 0.000
  vvt1Target        = scalar,   U08,    97, "deg",    0.50, 0.000
  vvt1Duty          = scalar,   U08,    98, "%",      0.50, 0.000
  flexBoostCor      = scalar,   S16,    99, "kPa",    1.000, 0.000
  baroCorrection    = scalar,   U08,   101, "%",      1.000, 0.000
  veCurr            = scalar,   U08,   102, "%",      1.000, 0.000
  ASECurr           = scalar,   U08,   103, "%",      1.000, 0.000
  vss               = scalar,   U16,   104, "km/h",   1.000, 0.000
  gear              = scalar,   U08,    106, "",      1.000, 0.000
  fuelPressure      = scalar,   U08,    107, "PSI",   1.000, 0.000
  oilPressure       = scalar,   U08,    108, "PSI",   1.000, 0.000
  wmiPW             = scalar,   U08,    109, "%",     1.000, 0.000
  status4           = scalar,   U08,    110, "bits",  1.000, 0.000
    wmiEmptyBit       = bits,     U08,    110, [0:0]
    vvt1Error         = bits,     U08,    110, [1:1]
    vvt2Error         = bits,     U08,    110, [2:2]
    fanStatus         = bits,     U08,    110, [3:3]
    burnPending       = bits,     U08,    110, [4:4]
    stagingActive     = bits,     U08,    110, [5:5]
    UnusedBits4       = bits,     U08,    110, [6:7]
  vvt2Angle         = scalar,   S16,    111, "deg",    0.50, 0.000
  vvt2Target        = scalar,   U08,    113, "deg",    0.50, 0.000
  vvt2Duty          = scalar,   U08,    114, "%",      0.50, 0.000
    outputsStatus0    = bits,     U08,    115,  [0:0]
    outputsStatus1    = bits,     U08,    115,  [1:1]
    outputsStatus2    = bits,     U08,    115,  [2:2]
    outputsStatus3    = bits,     U08,    115,  [3:3]
    outputsStatus4    = bits,     U08,    115,  [4:4]
    outputsStatus5    = bits,     U08,    115,  [5:5]
    outputsStatus6    = bits,     U08,    115,  [6:6]
    outputsStatus7    = bits,     U08,    115,  [7:7]
  fuelTempRaw       = scalar,   U08,    116, "°C",    1.000, 0.000
  fuelTempCor       = scalar,   U08,    117, "%",     1.000, 0.000
  advance1          = scalar,   S08,    118, "deg",      1.000, 0.000
  advance2          = scalar,   S08,    119, "deg",      1.000, 0.000
  sd_status         = scalar,   U08,    120, "",         1.0,   0.0
  emap              = scalar,   U16,    121, "kpa",    1.000, 0.000
  fanDuty           = scalar,   U08,    123, "%",        0.5, 0.000
  airConStatus      = scalar,   U08,    124, "bits",  1.000, 0.000
    airConRequest     = bits,     U08,    124,  [0:0]
    airConCompressor  = bits,    U08,    124,  [1:1]
    airConRPMMLockout = bits,   U08,    124,  [2:2]
    airConTPSLockout  = bits,    U08,    124,  [3:3]
    airConTurningOn   = bits,     U08,    124,  [4:4]
    airConCLTLockout  = bits,    U08,    124,  [5:5]
    airConFanStatus   = bits,     U08,    124,  [6:6]
    airConUnusedBits  = bits,    U08,    124,  [7:7]
  dwellActual       = scalar,   U16,    125, "ms",     0.001, 0.000
  status5           = scalar,   U08,    127, "bits",  1.000, 0.000  
    flatShiftHardActive = bits, U08,    127, [0:0]
    flatShiftSoftActive = bits, U08,    127, [1:1]
    spark2Active        = bits, U08,    127, [2:2]
    knockActive         = bits, U08,    127, [3:3]
    knockIGNORE         = bits, U08,    127, [4:4]
    UnusedBits5-5       = bits, U08,    127, [5:5]
    UnusedBits5-6       = bits, U08,    127, [6:6]
    UnusedBits5-7       = bits, U08,    127, [7:7]
  knockEventCount   = scalar,   U08,    128, "",        1.000, 0.000
  knockCor          = scalar,   U08,    129, "deg",     1.000, 0.000
  gearSelector_ADC  = scalar,   U08,    130, "",        1.000, 0.000
  gearSelectorChosenGear = scalar,   U08,    131, "",        1.000, 0.000
  transTemp_CalculatedResistance = scalar,   U16,    132, "",        1.000, 0.000
  transTemp           = scalar,   S16,    134, "°C",      1.000, 0.000
  canRPM              = scalar,   U16,    136, "rpm",     1.000, 0.000
  canTPS              = scalar,   U16,    138, "%",     1.000, 0.000

   ;sd_filenum       = scalar,   U16,    125, "", 1, 0
   ;sd_error         = scalar,   U08,    127, "", 1, 0
   ;sd_phase         = scalar,   U08,    128, "", 1, 0
   

#if CELSIUS
   coolant          = { coolantRaw - 40                               } ; Temperature readings are offset by 40 to allow for negatives
   iat              = { iatRaw - 40                                   } ; Temperature readings are offset by 40 to allow for negatives
   fuelTemp         = { fuelTempRaw - 40                              } ; Temperature readings are offset by 40 to allow for negatives
#else
   coolant          = { (coolantRaw - 40) * 1.8 + 32                  } ;Convert C to F (Offset by 40)
   iat              = { (iatRaw - 40) * 1.8 + 32                      } ;Convert C to F (Offset by 40)
   fuelTemp         = { (fuelTempRaw - 40) * 1.8 + 32                 } ;Convert C to F (Offset by 40)
#endif
   time             = { timeNow                                       }
   seconds          = { secl                                          }

   fuelPressure_bar = { fuelPressure * 0.06894757                     }
   oilPressure_bar  = { oilPressure * 0.06894757                      }
   fuelPressure_kpa = { fuelPressure * 6.894757                       }
   oilPressure_kpa  = { oilPressure  * 6.894757                       }

   throttle         = { tps }, "%"

   revolutionTime   = { rpm ? ( 60000.0 / rpm) : 0                    }
   strokeMultipler  = { twoStroke == 1 ? 1 : 2                        }
   cycleTime        = { revolutionTime * strokeMultipler              }
   pulseLimit       = { cycleTime / nSquirts                          }
   
   nFuelChannels    = { arrayValue( array.boardFuelOutputs, pinLayout ) }
   nIgnChannels     = { arrayValue( array.boardIgnOutputs, pinLayout ) }
   sequentialFuelAvailable = { nCylinders <= nFuelChannels }
   sequentialIgnitionAvailable = { nCylinders <= nIgnChannels }
   
   dutyCycle        = { rpm ? ( 100.0*pulseWidth/pulseLimit ) : 0     }
   stgDutyCycle     = { rpm && stagingEnabled ? ( 100.0*pulseWidth3/pulseLimit ) : 0      }

   boostCutOut      = { boostCutFuel || boostCutSpark }
   lambda           = {afr}   ; { afr / stoich } ; changed to stop crashing for now
   lambdaTarget     = {afrTarget}   ; { afrTarget / stoich } ; changed to stop crashing for now
   MAPxRPM          = { rpm * map }
   loopsPerRev      = { rpm ? loopsPerSecond / (rpm / 60) : 0 }
   req_fuel         = { reqFuel }
   bat_correction   = { battVCorMode ? 100 : batCorrection } ; If battery voltage correction mode is Whole PW, use the battery correction, otherwise 100%
   inj_open         = { battVCorMode ? ((injOpen * batCorrection) / 100) : injOpen } ; If battery voltage correction mode is Open Time Only, calculate the corrected open time
   ase_enrich       = { ASECurr } ; If ASE is active then equal the ASE + 100
   map_multiply_amt = { multiplyMAP ? map : 100 } ; If multiply MAP is enabled, use the current MAP value, otherwise 100%
   ;nSquirts         = { nCylinders / divider }

   ;Manifold pressure in weirdo units
   map_bar      = { (map - baro) / 101.33 }
   map_psi      = { (map - baro) * 0.145038 }
   map_inhg     = { (baro - map) * 0.2953007 } ;in-Hg
   map_vacboost = { map < baro ? -map_inhg : map_psi }

   vssMPH       = { vss / 1.60934 }

   ;fuelLoadMax = { arrayValue(algorithmLimits , algorithm) } ;Doesn't work, no idea why.
   fuelLoadMax  = { (algorithm == 0 || algorithm == 2) ? 511 : 100.0 }
   ignLoadMax  = { (ignAlgorithm == 0 || ignAlgorithm == 2) ? 511 : 100.0 }
   fuel2LoadMax  = { (fuel2Algorithm == 0 || fuel2Algorithm == 2) ? 511 : 100.0 }
   ign2LoadMax  = { (spark2Algorithm == 0 || spark2Algorithm == 2) ? 511 : 100.0 }
   ign2ValuesMin  = { (spark2Mode == 1) ? 0 : -40 }
   ign2ValuesMax  = { (spark2Mode == 1) ? 215 : 70 }
   ; We have to pass a U08 through a S08 in multiply mode
   advance2ForGauge = { (spark2Mode == 1) ? advance2+127 : advance2 }
   ign2ValueLoD  = { (spark2Mode == 1) ? ign2ValuesMin : (ign2ValuesMin/10)*9 }
   ign2ValueHiD  = { (spark2Mode == 1) ? ign2ValuesMax : (ign2ValuesMax/10)*9 }
   ign2ValueLoW  = { (spark2Mode == 1) ? ign2ValuesMin : (ign2ValuesMin/10)*8 }
   ign2ValueHiW  = { (spark2Mode == 1) ? ign2ValuesMax : (ign2ValuesMax/10)*8 }

   fuelLoad2    = { fuel2Algorithm == 0 ? map : fuel2Algorithm == 1 ? tps : fuel2Algorithm == 2 ? 0 : 0 }
   ignLoad2     = { spark2Algorithm == 0 ? map : spark2Algorithm == 1 ? tps : spark2Algorithm == 2 ? 0 : ignLoad }
   vvtLoad      = { (vvtLoadSource == 0) ? map : tps }
   vvtLoadMax   = { (vvtLoadSource == 0) ? 511 : 100.0 }
   wmiLoadMax   = { (wmiMode == 2) ? 100.0 : 255 }

   ;Select data resolution and scale based on algorithm used
   idleRes      = { (iacAlgorithm == 5 || iacAlgorithm == 7) ? 3.0 : 1.0 }
   idleResMax   = { (iacAlgorithm == 5 || iacAlgorithm == 7) ? (iacStepHome-3) : 100.0 }

   vvtLoadRes   = { (vvtLoadSource == 0) ? 2.000 : 0.500 }
   wmiLoadRes   = { (wmiMode >= 2) ? 0.5 : 1.0 }

   fuelLoadRes  = { ((algorithm == 0) || (algorithm == 2)) ? 2.000 : 0.500 }
   ignLoadRes  = { ((ignAlgorithm == 0) || (ignAlgorithm == 2)) ? 2.000 : 0.500 }

   fuelLoadFeedBack  = { ((algorithm == 0) || (algorithm == 2)) ? 1.000 : 0.250 }
   ignLoadFeedBack  = { ((ignAlgorithm == 0) || (ignAlgorithm == 2)) ? 1.000 : 0.250 }

   fuel2LoadRes  = { ((fuel2Algorithm  == 0) || (fuel2Algorithm  == 2)) ? 2.000 : 0.500 }
   ign2LoadRes  = { ((spark2Algorithm == 0) || (spark2Algorithm == 2)) ? 2.000 : 0.500 }

   vvtDecimalRes= { (vvtLoadSource == 0) ? 0 : 1 }
   fuelDecimalRes= { ((algorithm == 0) || (algorithm == 2)) ? 0 : 1 }
   ignDecimalRes= { ((ignAlgorithm == 0) || (ignAlgorithm == 2)) ? 0 : 1 }
   fuel2DecimalRes= { ((fuel2Algorithm  == 0) || (fuel2Algorithm  == 2)) ? 0 : 1 }
   ign2DecimalRes= { ((spark2Algorithm == 0) || (spark2Algorithm == 2)) ? 0 : 1 }

   boostTableLimit = { boostType == 0 ? 100.0 : 511 } ;The maximum value allowed in the boost table. 100 is used for duty cycle, 511 for kpa

   CLIdleDelta      = { CLIdleTarget - rpm }
   syncStatus       = { halfSync + (sync << 1) }
   #if mcu_teensy
   CANisAvailable   = { ( (enable_secondarySerial && (secondarySerialProtocol == 2)) || (enable_intcan)) }
   #elif mcu_stm32
   CANisAvailable   = { ( (enable_secondarySerial && (secondarySerialProtocol == 2)) || (enable_intcan)) }
   #else
   CANisAvailable   = { (enable_secondarySerial && (secondarySerialProtocol == 2)) }
   #endif
;-------------------------------------------------------------------------------

[Datalog]
  ; Full datalog.
  ;
  ; Default user-defined log emulates the full datalog.
  ;
  ; The entries are saved in the datalog file in the order in
  ; which they appear in the list below.
  ;
  ;   Channel - Case sensitive name of output channel to be logged.
  ;   Label   - String written to header line of log.  Be careful
  ;             about changing these, as programs like MSLVV and
  ;             MSTweak key off specific column names.
  ;   Type    - Data type of output, converted before writing.
  ;   Format  - C-style output format of data.
  ;
  ;       Channel          Label               Type    Format
  ;       --------------   ----------          -----   ------
  entry = time,            "Time",             float,  "%.3f"
  entry = secl,            "SecL",             int,    "%d"
  entry = rpm,             "RPM",              int,    "%d"
  entry = map,             "MAP",              int,    "%d"
  entry = MAPxRPM,         "MAPxRPM",          int,    "%d"
  entry = tps,             "TPS",              float,  "%.1f"
  entry = afr,             "AFR",              float,  "%.3f"
  entry = lambda,          "Lambda",           float,  "%.3f"
  entry = iat,             "IAT",              int,    "%d"
  entry = coolant,         "CLT",              int,    "%d"
  entry = engine,          "Engine",           int,    "%d"
  entry = DFCOOn,          "DFCO",             int,    "%d"
  entry = egoCorrection,   "Gego",             int,    "%d"
  entry = airCorrection,   "Gair",             int,    "%d"
  entry = bat_correction,  "Gbattery",         int,    "%d"
  entry = warmupEnrich,    "Gwarm",            int,    "%d"
  entry = baroCorrection,  "Gbaro",            int,    "%d"
  entry = gammaEnrich,     "Gammae",           int,    "%d"
  entry = accelEnrich,     "Accel Enrich",     int,    "%d"
  entry = veCurr,          "VE (Current)",     int,    "%d"
  entry = VE1,             "VE1",              int,    "%d"
  entry = VE2,             "VE2",              int,    "%d"
  entry = pulseWidth,      "PW",               float,  "%.3f"
  entry = pulseWidth2,     "PW2",              float,  "%.3f"
  entry = pulseWidth3,     "PW3",              float,  "%.3f"
  entry = pulseWidth4,     "PW4",              float,  "%.3f"
  entry = afrTarget,       "AFR Target",       float,  "%.3f"
  entry = lambdaTarget,    "Lambda Target",    float,  "%.3f"
  entry = dutyCycle,       "Duty Cycle",       float,  "%.1f"
  entry = stgDutyCycle,    "Duty Cycle (Staging)",float,  "%.1f"
  entry = TPSdot,          "TPS DOT",          int,    "%d",        { aeMode == 0 }
  entry = advance,         "Advance (Current)",int,    "%d"
  entry = dwell,           "Dwell",            float,  "%.3f"
  entry = dwellActual,     "Dwell (Measured)", float,  "%.3f",    { perToothIgn }
  entry = batteryVoltage,  "Battery V",        float,  "%.1f"
  entry = rpmDOT,          "rpm/s",            int,    "%d"
  entry = flex,            "Eth %",            int,    "%d",       { flexEnabled }
  entry = flexFuelCor,     "GflexFuel",        int,    "%d",       { flexEnabled }
  entry = fuelTemp,        "Fuel Temp",        int,    "%d",       { flexEnabled }
  entry = fuelTempCor,     "GfuelTemp",        int,    "%d",       { flexEnabled }
  entry = errorNum,        "Error #",          int,    "%d",       { errorNum }
  entry = currentError,    "Error ID",         int,    "%d",       { errorNum }
  entry = map_psi,         "Boost PSI",        float,  "%.1f"
  entry = boostTarget,     "Boost Target",     int,    "%d",       { boostEnabled }
  entry = boostDuty,       "Boost Duty",       int,    "%d",       { boostEnabled }
  entry = flexBoostCor,    "Boost Flex Adjust",int,    "%d",       { flexEnabled && boostEnabled }
  entry = boostCutOut ,    "Boost cut",        int,    "%d"
  entry = launchHard ,     "Hard Launch",      int,    "%d"
  entry = hardLimitOn ,    "Hard Limiter",     int,    "%d"
  entry = idleControlOn,   "Idle Control",     int,    "%d"
  entry = idleLoad,        "IAC value",        int,    "%d"
  entry = CLIdleTarget,    "Idle Target RPM",  int,    "%d",     { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 || idleAdvEnabled >= 1 } ;Only show for closed loop idle modes and if idle advance is enabled
  entry = CLIdleDelta,     "Idle RPM Delta",   int,    "%d",      { iacAlgorithm == 3 || iacAlgorithm == 5 || iacAlgorithm == 6 || iacAlgorithm == 7 || idleAdvEnabled >= 1 } ;Only show for closed loop idle modes and if idle advance is enabled
  entry = baro,            "Baro Pressure",    int,    "%d"
  entry = nitrousOn,       "Nitrous",          int,    "%d",      { n2o_enable > 0 }
  entry = fanStatus,       "Fan",              int,    "%d"
  entry = syncLossCounter, "Sync Loss #",      int,    "%d"
  entry = vvt1Angle,       "VVT1 Angle",       int,    "%.1f",        { vvtEnabled > 0 }
  entry = vvt1Target,      "VVT1 Target Angle",int,    "%.1f",        { vvtEnabled > 0 && vvtMode == 2 } ;;Only show when using close loop vvt
  entry = vvt1Duty,        "VVT1 Duty",        int,    "%.1f",        { vvtEnabled > 0 }
  entry = vss,             "Wheel Speed (kph)",int,    "%d",          { vssMode > 1 }   
  entry = vssMPH,          "Wheel Speed (mph)",int,    "%d",          { vssMode > 1 }   
  entry = gear,            "Gear",             int,    "%d",          { vssMode > 1 }  
  entry = fuelPressure,    "Fuel Pressure",    int,    "%d",          { fuelPressureEnable > 0 }   
  entry = oilPressure,     "Oil Pressure",     int,    "%d",          { oilPressureEnable > 0 }  
  entry = vvt2Angle,       "VVT2 Angle",       int,    "%.1f",        { vvt2Enabled > 0 }
  entry = vvt2Target,      "VVT2 Target Angle",int,    "%.1f",        { vvt2Enabled > 0 && vvtMode == 2 } ;;Only show when using close loop vvt
  entry = vvt2Duty,        "VVT2 Duty",        int,    "%.1f",        { vvt2Enabled > 0 && vvtMode == 2 }
  entry = fanDuty,         "FAN Duty",         int,    "%.1f",       { fanEnable == 2 }
  entry = loopsPerSecond,  "Loops/s",          int,    "%d"
  entry = loopsPerRev,     "Loops/rev",        int,    "%.2f"
  entry = wmiPW,           "WMI Duty Cycle",   int,    "%d",          { wmiEnabled == 1 }
  entry = MAPdot,          "MAP DOT",          int,    "%d",           { aeMode == 1 }

  entry = auxin_gauge0,  { stringValue(AUXin00Alias) },  int,     "%d", {(caninput_sel0b != 0)}
  entry = auxin_gauge1,  { stringValue(AUXin01Alias) },  int,     "%d", { (caninput_sel1b != 0)}
  entry = auxin_gauge2,  { stringValue(AUXin02Alias) },  int,     "%d", { (caninput_sel2b != 0)}
  entry = auxin_gauge3,  { stringValue(AUXin03Alias) },  int,     "%d", { (caninput_sel3b != 0)}
  entry = auxin_gauge4,  { stringValue(AUXin04Alias) },  int,     "%d", { (caninput_sel4b != 0)}
  entry = auxin_gauge5,  { stringValue(AUXin05Alias) },  int,     "%d", { (caninput_sel5b != 0)}
  entry = auxin_gauge6,  { stringValue(AUXin06Alias) },  int,     "%d", { (caninput_sel6b != 0)}
  entry = auxin_gauge7,  { stringValue(AUXin07Alias) },  int,     "%d", { (caninput_sel7b != 0)}
  entry = auxin_gauge8,  { stringValue(AUXin08Alias) },  int,     "%d", { (caninput_sel8b != 0)}
  entry = auxin_gauge9,  { stringValue(AUXin09Alias) },  int,     "%d", { (caninput_sel9b != 0)}
  entry = auxin_gauge10, { stringValue(AUXin10Alias) },  int,     "%d", { (caninput_sel10b != 0)}
  entry = auxin_gauge11, { stringValue(AUXin11Alias) },  int,     "%d", { (caninput_sel11b != 0)}
  entry = auxin_gauge12, { stringValue(AUXin12Alias) },  int,     "%d", { (caninput_sel12b != 0)}
  entry = auxin_gauge13, { stringValue(AUXin13Alias) },  int,     "%d", { (caninput_sel13b != 0)}
  entry = auxin_gauge14, { stringValue(AUXin14Alias) },  int,     "%d", { (caninput_sel14b != 0)}
  entry = auxin_gauge15, { stringValue(AUXin15Alias) },  int,     "%d", { (caninput_sel15b != 0)}
  entry = outputsStatus0, { stringValue(prgm_out00Alias)},    int,     "%d", { (outputPin[0] != 0)}
  entry = outputsStatus1, { stringValue(prgm_out01Alias)},    int,     "%d", { (outputPin[1] != 0)}
  entry = outputsStatus2, { stringValue(prgm_out02Alias)},    int,     "%d", { (outputPin[2] != 0)}
  entry = outputsStatus3, { stringValue(prgm_out03Alias)},    int,     "%d", { (outputPin[3] != 0)}
  entry = outputsStatus4, { stringValue(prgm_out04Alias)},    int,     "%d", { (outputPin[4] != 0)}
  entry = outputsStatus5, { stringValue(prgm_out05Alias)},    int,     "%d", { (outputPin[5] != 0)}
  entry = outputsStatus6, { stringValue(prgm_out06Alias)},    int,     "%d", { (outputPin[6] != 0)}
  entry = outputsStatus7, { stringValue(prgm_out07Alias)},    int,     "%d", { (outputPin[7] != 0)}

  entry = advance1,         "Advance 1",                  int,      "%d"
  entry = advance2,         "Advance 2",                  int,      "%d"
  entry = emap,             "EMAP",                       int,      "%d", { useEMAP }
  entry = fuelLoad,         "FuelLoad",                   float,    "%.1f"
  entry = ignLoad,          "IgnitionLoad",               float,    "%.1f"
  entry = syncStatus,       "Sync status",                int,      "%d"
  entry = engineProtectRPM,  "Engine Prot. RPM",          int,      "onOff", { engineProtectType }
  entry = engineProtectMAP,  "Engine Prot. MAP",          int,      "onOff", { engineProtectType && boostCutEnabled }
  entry = engineProtectOil,  "Engine Prot. Oil Pressure", int,      "onOff", { engineProtectType && oilPressureProtEnbl && oilPressureEnable }
  entry = engineProtectAFR,  "Engine Prot. AFR",          int,      "onOff", { engineProtectType && afrProtectEnabled && (egoType == 2) }
  entry = engineProtectCoolant,  "Engine Prot. CLT",      int,      "onOff", { engineProtectType }
  entry = stagingActive,      "Fuel Staging",             int,      "onOff", { stagingEnabled }
  

  entry = knockEventCount,  "Current Knock Events",       int,      "%d",   { knock_mode }
  entry = knockCor,         "Knkock Retard",              int,      "%d",   { knock_mode }
  entry = knockActive,      "Knock Detected",             int,      "onOff", { knock_mode }

[LoggerDefinition]
    ; valid logger types: composite, tooth, trigger, csv

    ;loggerDef = uniqueName, Display Name, type
    loggerDef = tooth, "Tooth Logger", tooth
       ;dataReadCommand = "r\\x00\\xf4\\x00\\x00\\x04\\x00" ; standard TS command format
       startCommand = "H"
       stopCommand = "h"
       ;dataReadCommand = "T" ; Basic TS command format
       dataReadCommand = "T\$tsCanId\x01\xFC\x00\x01\xFC" ; Basic TS command format. Note that this is shared with the composite logger. Firmware detects which log is currently running
       dataReadTimeout = 5000 ; time in ms
       continuousRead = true
       dataReadyCondition = { toothLog1Ready == 1 }
       dataLength =  508; in bytes, including headers, footers and data (not used). 4 bytes * 127 entries (TOOTH_LOG_SIZE)
       ;dataLength = 128 ; in bytes, including headers, footers and data (not used)

       ;recordDef = headerLen. footerLen, recordLen
       recordDef =   0,   0,   4; in bytes, the recordLen is for each record, currently limited to 4 bytes

       ;recordField = Name,          HeaderName,      startBit,   bitCount,   scale,  units, updateCondition
       recordField = toothTime,         "ToothTime",     0,          32,       1.0,    "uS"

    loggerDef = compositeLogger, "Composite Logger", composite
        startCommand = "J"
        stopCommand = "j"
        ;dataReadCommand = "T" ; Basic TS command format. Note that this is shared with the composite logger. Firmware detects which log is currently running
        dataReadCommand = "T\$tsCanId\x00\x00\x00\x02\x7B" ; Basic TS command format. Note that this is shared with the composite logger. Firmware detects which log is currently running
        dataReadTimeout = 5000 ; time in ms
        dataReadyCondition = { toothLog1Ready == 1 }
        continuousRead = true
        dataLength = 127 ; Number of records to show on a single screen. Should match TOOTH_LOG_SIZE in the code

        ;recordDef = headerLen. footerLen, recordLen
        recordDef =   0,   0,   5; in bytes, the recordLen is for each record, currently limited to 4 bytes

        ;recordField = Name,          HeaderName,      startBit,   bitCount,   scale,  units, updateCondition
        recordField = priLevel,          "PriLevel",     0,          1,          1.0,    "Flag"
        recordField = secLevel,          "SecLevel",     1,          1,          1.0,    "Flag"
        recordField = ThirdLevel,        "ThirdLevel",   2,          1,          1.0,    "Flag"
        recordField = trigger,           "Trigger",      3,          1,          1.0,    "Flag"
        recordField = sync,              "Sync",         4,          1,          1.0,    "Flag"
        recordField = cycle,             "Cycle",        5,          1,          1.0,    "Flag"        
        recordField = refTime,           "RefTime",      8,          32,         0.001,  "ms"

        ; hidden calcField serves as intermediate variable
        calcField = maxTime,               "MaxTime",   "ms",  { maxValue(refTime) }, hidden
        calcField = toothTime,           "ToothTime",    "ms",       { refTime - pastValue(refTime, 1) }
        calcField = time,                "Time",   "ms",  { refTime }

loggerDef = compositeLogger2, "Composite Logger 2nd Cam", composite
        startCommand = "O"
        stopCommand = "o"
        ;dataReadCommand = "T" ; Basic TS command format. Note that this is shared with the composite logger. Firmware detects which log is currently running
        dataReadCommand = "T\$tsCanId\x00\x00\x00\x02\x7B" ; Basic TS command format. Note that this is shared with the composite logger. Firmware detects which log is currently running
        dataReadTimeout = 50000 ; time in ms
        dataReadyCondition = { toothLog1Ready == 1 }
        continuousRead = true
        dataLength = 127 ; Number of records to show on a single screen. Should match TOOTH_LOG_SIZE in the code

        ;recordDef = headerLen. footerLen, recordLen
        recordDef =   0,   0,   5; in bytes, the recordLen is for each record, currently limited to 4 bytes

        ;recordField = Name,          HeaderName,      startBit,   bitCount,   scale,  units, updateCondition
        recordField = priLevel,          "PriLevel",     0,          1,          1.0,    "Flag"
        recordField = secLevel,          "SecLevel",     1,          1,          1.0,    "Flag"
        recordField = ThirdLevel,        "ThirdLevel",   2,          1,          1.0,    "Flag"
        recordField = trigger,           "Trigger",      3,          1,          1.0,    "Flag"
        recordField = sync,              "Sync",         4,          1,          1.0,    "Flag"
        recordField = cycle,             "Cycle",        5,          1,          1.0,    "Flag"        
        recordField = refTime,           "RefTime",      8,          32,         0.001,  "ms"

        ; hidden calcField serves as intermediate variable
        calcField = maxTime,               "MaxTime",   "ms",  { maxValue(refTime) }, hidden
        calcField = toothTime,           "ToothTime",    "ms",       { refTime - pastValue(refTime, 1) }
        calcField = time,                "Time",   "ms",  { refTime }      

    loggerDef = compositeLogger3, "Composite Logger Both cams", composite
        startCommand = "X"
        stopCommand = "x"
        ;dataReadCommand = "T" ; Basic TS command format. Note that this is shared with the composite logger. Firmware detects which log is currently running
        dataReadCommand = "T\$tsCanId\x00\x00\x00\x02\x7B" ; Basic TS command format. Note that this is shared with the composite logger. Firmware detects which log is currently running
        dataReadTimeout = 50000 ; time in ms
        dataReadyCondition = { toothLog1Ready == 1 }
        continuousRead = true
        dataLength = 127 ; Number of records to show on a single screen. Should match TOOTH_LOG_SIZE in the code

        ;recordDef = headerLen. footerLen, recordLen
        recordDef =   0,   0,   5; in bytes, the recordLen is for each record, currently limited to 4 bytes

        ;recordField = Name,          HeaderName,      startBit,   bitCount,   scale,  units, updateCondition        
        recordField = priLevel,          "PriLevel",     0,          1,          1.0,    "Flag"
        recordField = secLevel,          "SecLevel",     1,          1,          1.0,    "Flag"
        recordField = ThirdLevel,        "ThirdLevel",   2,          1,          1.0,    "Flag"        
        recordField = trigger,           "Trigger",      3,          1,          1.0,    "Flag"
        recordField = sync,              "Sync",         4,          1,          1.0,    "Flag"
        recordField = cycle,             "Cycle",        5,          1,          1.0,    "Flag"        
        recordField = refTime,           "RefTime",      8,          32,         0.001,  "ms"

        ; hidden calcField serves as intermediate variable
        calcField = maxTime,               "MaxTime",   "ms",  { maxValue(refTime) }, hidden
        calcField = toothTime,           "ToothTime",    "ms",       { refTime - pastValue(refTime, 1) }
        calcField = time,                "Time",   "ms",  { refTime }        

[ReferenceTables]
    tableWriteCommand     = "t\$tsCanId%2i%2o%2c%v"; "t%2i%2o%2c%v";      "t\x01\xFC\x00\x01\xFC"    "t\%2i%2o%2c%v"
  #if mcu_stm32
    tableBlockingFactor   = 64
  #else
    tableBlockingFactor   = 256
  #endif
  #if COMMS_COMPAT
    tableBlockingFactor   = 64
  #endif
  
    referenceTable = std_ms2gentherm, "Calibrate Thermistor Tables."
      topicHelp = "http://wiki.speeduino.com/en/configuration/Sensor_Calibration"
      tableIdentifier = 000, "Coolant Temperature Sensor", 001, "Air Temperature Sensor"
      ; tableLimits (optional) = intentifier, min, max, defaultVal 
      ; will set the default value if value is outside the min and max limits.
      tableLimits = 000, -40, 350, 180 ;Coolant
      tableLimits = 001, -40, 350, 70  ;IAT
      ;Table 002 is AFR
      
      adcCount            = 32  ; length of the table
      bytesPerAdc         = 2     ; using shorts
      scale               = 10    ; scale by 10 before sending to controller
      ;tableGenerator = Generator type, Label 
      tableGenerator  = thermGenerator, "Thermistor Measurements"
      tableGenerator  = fileBrowseGenerator, "Browse for Inc File"
      ; thermOption       = name,             resistor bias,  tempPoint1(C),  resPoint1,  tempPoint2, resPoint2, tempPoint3, resPoint3
      thermOption         = "GM",             2490,           -40,            100700,     30,         2238,       99,         177
      thermOption         = "Chrysler 85 up", 2490,           5.5,            24500,      30.5,       8100,       88.3,       850
      thermOption         = "Ford",           2490,           0,              94000,      50,         11000,      98,         2370
      thermOption         = "Saab (Bosch)",   2490,           0,              5800,       80,         320,        100,        180
      thermOption         = "Mazda",          50000,          -40,            2022088,    21,         68273,      99,         3715
      thermOption         = "Mitsu",          2490,           -40,            100490,     30,         1875,       99,         125
      thermOption         = "Toyota",         2490,           -40,            101890,     30,         2268,       99,         156
      thermOption         = "RX-7_CLT(S4 & S5)", 2490,        -20,            16200,      20,         2500,       80,         300
      thermOption         = "RX-7_MAT",       42200,          20,             41500,      50,         11850,      85,         3500
      thermOption         = "VW L-Jet Cylinder Head Temp Sensor II", 1100, -13.888, 11600,53.888,     703,        95.555,     207
      thermOption         = "RX-7_AFM(S5 in AFM)", 2490,      -20,            16200,      20,         2500,       80,         300
      thermOption         = "BMW E30 325i",   2490,           -10,            9300,       20,         2500,       80,         335
      solution        = "3 Point Therm Generator",          thermGenerator
      solution        = "Custom inc File",    fileBrowseGenerator

    referenceTable = std_ms2geno2, "Calibrate AFR Table..."
      topicHelp           = "https://wiki.speeduino.com/en/configuration/Sensor_Calibration"
      tableIdentifier     = 002, "AFR Table"
      adcCount            = 1024   ; length of the table
      bytesPerAdc         = 1   ; using bytes
      scale               = 10 ; scale by 10 before sending to controller
      ;tableGenerator  = Generator Type,     Label, xUnits, yUnits,  xLow, xHi,  yLow, yHi
      tableGenerator  = linearGenerator, "Custom Linear WB", "Volts","AFR",    1,   4,   9.7,  18.7
      tableGenerator  = fileBrowseGenerator, "Browse for Inc File"

      solutionsLabel = "EGO Sensor"
      solution  = " ",                                { } ; blank row in case no match found. Must reman at top.
      solution  = "Narrowband",                       { table(adcValue*5/1023 , "nb.inc") } ;     
      solution  = "14Point7",                         { 10.0001 + ( adcValue * 0.0097752 )} ; 10.0001 causes 1 adc to round different for unique match.
      solution  = "AEM Linear AEM-30-42xx",           { 9.72 + (adcValue * 0.0096665) } ; 9.72:1 - 19.60:1
      solution  = "AEM Linear (30-2310 & 30-4900)",   { 7.3125 + (adcValue * 0.0116080) } ; 7.31:1 - 19.18:1
      solution  = "Autometer 0V=10:1, 4V=16:1",       { 10 + (adcValue * 0.0073313783) }
      solution  = "Ballenger AFR500 0V=9:1, 5V=16:1", { 9 + (adcValue * 0.00684262) }
      solution  = "Ballenger AFR500 0V=6:1, 5V=20:1", { 6 + (adcValue * 0.01368524) }
      solution  = "Daytona TwinTec",                  { 10.01 + (adcValue    * 0.0097752) }
      solution  = "DIY-EFI TinyWB",                   { 10.0001 + ( adcValue * 0.0097752 )} ; Same as 14point7 units
      solution  = "DynoJet Wideband Commander",       { adcValue    * 0.00784325 + 10 }
      solution  = "F.A.S.T. Wideband",                { adcValue    * 0.01357317 + 9.6 } ; 838.8608
      solution  = "FJO WB",                           { table(adcValue*5/1023 , "fjoWB.inc" ) }
      solution  = "Fueltech WB-02 Nano Anhydr. Eth.", { 5.11043 + (adcValue * 0.997826) }
      solution  = "Fueltech WB-02 Nano Hydr. Ethan.", { 4.74685 + (adcValue * 0.927739) }
      solution  = "Fueltech WB-02 Nano Gasoline",     { 8.37391 + (adcValue * 0.00796111) }
      solution  = "Fueltech WB-02 Nano Methanol",     { 3.65652 + (adcValue * 0.00350289) }
      solution  = "Innovate LC-1 / LC-2 Default",     { 7.35 + (adcValue    * 0.01470186 )}
      solution  = "Innovate / PLX 0.0-5.0 10:1-20:1", { 10 + (adcValue    * 0.0097752)}
      solution  = "Innovate 1.0-2.0",                 { adcValue * 0.049025}
      solution  = "LambdaBoy",                        { table(adcValue*5/1023 , "lambdaBoy.inc" ) }
      solution  = "NGK Powerdex",                     { 9 + ( adcValue * 0.0068359375 ) }
      solution  = "ODG Wideband - Faixa 1",           { 8.3470 + (adcValue * 0.00795792) }
      solution  = "ODG Wideband - Faixa 2",           { 9.1447 + (adcValue * 0.01013714) }
      solution  = "TechEdge DIY Non-Linear",          { table(adcValue*5/1023 , "TechEdge_DIYwbo2.inc") }
      solution  = "TechEdge Linear",                  { adcValue    * 0.0097752 + 9 }
      solution  = "Zeitronix - Non Linear",           { table(adcValue*5/1023 , "zeitronix.inc") }
      solution  = "Zeitronix - Linear Default",       { 9.6 + (adcValue    * 0.0097752) }

      solution  = "Custom Linear WB",                 linearGenerator
      solution  = "Custom inc File",                  fileBrowseGenerator

[Tools]
  ;addTool = toolName, PanelName
  addTool = veTableGenerator, "VE Table Generator", veTable1Tbl
  addTool = afrTableGenerator, "AFR Table Generator", afrTable1Tbl

  ; The AFR Table Generator does not work with the lambda target table
  ;addTool = afrTableGenerator, "AFR Table Generator", lambdaTable1Tbl

[VeAnalyze]
  ;           ;    tableName,  lambdaTargetTableName, lambdaChannel, egoCorrectionChannel, activeCondition
  ; #if LAMBDA
  ;     veAnalyzeMap = veTable1Tbl, lambdaTable1Tbl, lambda, egoCorrection
  ;     lambdaTargetTables = lambdaTable1Tbl, afrTSCustom
  ; #else
  ;     veAnalyzeMap = veTable1Tbl, afrTable1Tbl, afr, egoCorrection
  ;     lambdaTargetTables = afrTable1Tbl, afrTSCustom
  ; #endif
  ;         filter = std_xAxisMin ; Auto build with appropriate axis channels
  ;         ;filter = minRPMFilter, "Minimum RPM", rpm,           <       , 500,      , true
  ;         filter = std_xAxisMax ; Auto build with appropriate axis channels
  ;         filter = std_yAxisMin ; Auto build with appropriate axis channels
  ;         filter = std_yAxisMax ; Auto build with appropriate axis channels
  ;         filter = std_DeadLambda ; Auto build

  ; #if CELSIUS
  ;         filter = minCltFilter, "Minimum CLT", coolant,       <       , 71,       , true
  ; #else
  ;         filter = minCltFilter, "Minimum CLT", coolant,       <       , 160,      , true
  ; #endif
  ;         filter = accelFilter, "Accel Flag" , engine,         &       , 16,       , false
  ;         filter = aseFilter,   "ASE Flag"   , engine,         &       , 4,        , false
  ;         filter = overrunFilter, "Overrun"    , pulseWidth,  =       , 0,        , false
  ;         filter = std_Custom ; Standard Custom Expression Filter.


[WueAnalyze]
  ; ; wueCurveName, afrTempCompensationCurve, lambdaTargetTableName, lambdaChannel, coolantTempChannel, wueChannel, egoCorrectionChannel, activeCondition
  ; #if LAMBDA
  ;    wueAnalyzeMap = warmup_analyzer_curve, warmup_afr_curve, lambdaTable1Tbl, lambda, coolant, warmupEnrich, egoCorrection
  ;    lambdaTargetTables = lambdaTable1Tbl, afrTSCustom
  ; #else
  ;    wueAnalyzeMap = warmup_analyzer_curve, warmup_afr_curve, afrTable1Tbl, afr, coolant, warmupEnrich, egoCorrection
  ;    lambdaTargetTables = afrTable1Tbl, afrTSCustom
  ; #endif
  ;    filter = std_DeadLambda  ; Auto build
  ;    filter = accelFilter,   "Accel Flag",           engine,         &,    16,        false
  ;    filter = aseFilter,     "ASE Flag",             engine,         &,    4,         false
  ;    filter = overrunFilter, "Overrun",              pulseWidth,     =,    0,         false
  ;    filter = maxTPS,        "Max TPS",              throttle,       >,    15,        true
  ;    filter = minRPM,        "Min RPM",              rpm,            <,    300,       true
  ;    filter = std_Custom ; Standard Custom Expression Filter.
